{
	"info": {
		"_postman_id": "5a935ba1-4497-479c-9f47-53362f90c124",
		"name": "Onboarding - e2e",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "26036736",
		"_collection_link": "https://idpay-test-funzionali.postman.co/workspace/IDPay-Test-Funzionali~d5f80577-ab5d-4d50-87c4-a81b6bcba6bc/collection/26036736-5a935ba1-4497-479c-9f47-53362f90c124?action=share&source=collection_link&creator=26036736"
	},
	"item": [
		{
			"name": "Happy Case",
			"item": [
				{
					"name": "APP_IO",
					"item": [
						{
							"name": "Onboarding User with Whitelist",
							"item": [
								{
									"name": "ENTE - Initiative Creation",
									"item": [
										{
											"name": "Generate Portal Token",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"let textResponse = pm.response.text()\r",
															"\r",
															"pm.test('Onboarding - Happy case - APP IO - Onboarding user with whitelist - Initiative creation - Generate Portal Token (Ente Admin)', () => {\r",
															"    //verify response HTTP status \r",
															"    pm.response.to.have.status(200);\r",
															"    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"aud\": \"idpay.welfare.pagopa.it\",\r\n  \"uid\": \"{{uid_Ente}}\",\r\n  \"name\": \"{{name_Ente}}\",\r\n  \"familyName\": \"{{familyName_Ente}}\",\r\n  \"email\": \"{{email_Ente}}\",\r\n  \"orgId\": \"{{orgId_Ente}}\",\r\n  \"orgVAT\": \"{{orgVAT_Ente}}\",\r\n  \"orgName\": \"Ente di test IdPay\",\r\n  \"orgPartyRole\": \"{{orgPartyRole_Ente}}\",\r\n  \"orgRole\": \"{{orgRole_Ente}}\"\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlToken}}/welfare/token/test",
													"host": [
														"{{baseUrlToken}}"
													],
													"path": [
														"welfare",
														"token",
														"test"
													]
												}
											},
											"response": []
										},
										{
											"name": "STEP1-Insert Initiative (Service Info)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"let moment = require('moment');\r",
															"const now = String(moment().format('DD-MM-YYYY hh:mm'));\r",
															"const serviceName = 'Test funzionali App IO onboarding user whitelist ' + now;\r",
															"pm.collectionVariables.set('serviceName', serviceName);\r",
															"\r",
															"pm.collectionVariables.set('description', pm.variables.replaceIn('{{$randomLoremSentence}}'));\r",
															"\r",
															"pm.collectionVariables.set('channel_type', 'web');\r",
															"pm.collectionVariables.set('channel_contact', 'https://www.google.it');"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = JSON.parse(responseBody);\r",
															"// console.log('jsondata', jsonData);\r",
															"// console.log('jsondata.initiativeId', jsonData.initiativeId);\r",
															"pm.collectionVariables.set('initiativeIdWithWhitelist', jsonData.initiativeId);\r",
															"\r",
															"pm.test(\"Onboarding - Happy case - APP IO - Onboarding user with whitelist - Initiative creation - STEP1 - Status test 201\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"});\r",
															"\r",
															"pm.test(\"Onboarding - Happy case - APP IO - Onboarding user with whitelist - Initiative creation - STEP1 - Verify response body contains initiativeId\", function () {\r",
															"    let jsonResponse = pm.response.json();\r",
															"    pm.expect(jsonResponse).have.property(\"initiativeId\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"serviceIO\": true,\n    \"serviceName\": \"{{serviceName}}\",\n    \"serviceScope\": \"LOCAL\",\n    \"description\": \"{{description}}\",\n    \"privacyLink\": \"https://www.google.it\",\n    \"tcLink\": \"https://www.google.com\",\n    \"channels\": [\n        {\n            \"type\": \"{{channel_type}}\",\n            \"contact\": \"{{channel_contact}}\"\n        }\n    ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlInitiative}}/info",
													"host": [
														"{{baseUrlInitiative}}"
													],
													"path": [
														"info"
													]
												},
												"description": "Save initiative and first subset of data 'general info'"
											},
											"response": []
										},
										{
											"name": "STEP2-Update Initiative (general Info)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"let moment = require('moment');\r",
															"//Format: YYYY-MM-DD\r",
															"let today = String(moment().format('YYYY-MM-DD'));\r",
															"let todayP1 = String(moment().add(1,'months').format('YYYY-MM-DD'));\r",
															"let todayP2 = String(moment().add(2,'months').format('YYYY-MM-DD'));\r",
															"let todayP3 = String(moment().add(3,'months').format('YYYY-MM-DD'));\r",
															"\r",
															"/*\r",
															"var futureDate = pm.variables.replaceIn('{{$$randomDateFuture}}');\r",
															"pm.collectionVariables.set('...', _.random(0, 180));\r",
															"*/\r",
															"//_.floor(_.random(1.0, 100000.0, true),2)\r",
															"//pm.collectionVariables.set('budget', _.floor(_.random(10000, 100000, true),2));\r",
															"pm.collectionVariables.set('budget', 200000);\r",
															"pm.collectionVariables.set('beneficiaryType', 'PF');\r",
															"//pm.collectionVariables.set('beneficiaryKnown', pm.variables.replaceIn('{{$randomBoolean}}'));\r",
															"pm.collectionVariables.set('beneficiaryKnown', true);\r",
															"//pm.collectionVariables.set('beneficiaryBudget', pm.variables.replaceIn('{{$randomInt}}'));//default max 1000\r",
															"pm.collectionVariables.set('beneficiaryBudget', 1);//default max 1000\r",
															"pm.collectionVariables.set('rankingStartDate', today);\r",
															"pm.collectionVariables.set('rankingEndDate', todayP1);\r",
															"pm.collectionVariables.set('startDate', todayP2);\r",
															"pm.collectionVariables.set('endDate', todayP3);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Onboarding - Happy case - APP IO - Onboarding user with whitelist - Initiative creation - STEP2 - Status 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"budget\": {{budget}},\n    \"beneficiaryType\": \"{{beneficiaryType}}\",\n    \"beneficiaryKnown\": {{beneficiaryKnown}},\n    \"beneficiaryBudget\": {{beneficiaryBudget}},\n    \"rankingStartDate\": \"{{rankingStartDate}}\",\n    \"rankingEndDate\": \"{{rankingEndDate}}\",\n    \"startDate\": \"{{startDate}}\",\n    \"endDate\": \"{{endDate}}\",\n    \"descriptionMap\": {\n        \"it\": \"it\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlInitiative}}/:initiativeId/general",
													"host": [
														"{{baseUrlInitiative}}"
													],
													"path": [
														":initiativeId",
														"general"
													],
													"variable": [
														{
															"key": "initiativeId",
															"value": "{{initiativeIdWithWhitelist}}",
															"description": "(Required) The initiative ID"
														}
													]
												},
												"description": "Save initiative and first subset of data 'general info'"
											},
											"response": []
										},
										{
											"name": "STEP3 Update Groups - upload correct file",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Onboarding - Happy case - APP IO - Onboarding user with whitelist - Initiative creation - STEP3 - Status 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Onboarding - Happy case - APP IO - Onboarding user with whitelist - Initiative creation - STEP3 - Verify response body\", function () {\r",
															"    let jsonResponse = pm.response.json();\r",
															"    pm.expect(jsonResponse).have.property(\"status\");\r",
															"    pm.expect(jsonResponse.status).contain('DRAFT');\r",
															"    pm.expect(jsonResponse).have.property(\"elabTimeStamp\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "file",
															"type": "file",
															"src": "./postman/example_fiscal_code.csv"
														}
													]
												},
												"url": {
													"raw": "{{baseUrlGroup}}/:initiativeId/upload",
													"host": [
														"{{baseUrlGroup}}"
													],
													"path": [
														":initiativeId",
														"upload"
													],
													"variable": [
														{
															"key": "initiativeId",
															"value": "{{initiativeIdWithWhitelist}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "STEP4-Update Initiative Trx-Reward rules",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Onboarding - Happy case - APP IO - Onboarding user with whitelist - Initiative creation - STEP4 - Status 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const d = new Date();\r",
															"dateString = d.toISOString()\r",
															"let endTime = dateString.split('T');\r",
															"endTime = endTime[1].split('Z');\r",
															"\r",
															"pm.collectionVariables.set('rewardRuleType', 'rewardValue');\r",
															"const rewardValueTypes = [\"PERCENTAGE\", \"ABSOLUTE\"];\r",
															"rewardValueTypeRandomIndex = _.random(0, rewardValueTypes.length - 1);\r",
															"const selectedRewardValueType = rewardValueTypes[rewardValueTypeRandomIndex];\r",
															"pm.collectionVariables.set('rewardValueType', selectedRewardValueType);\r",
															"if (selectedRewardValueType == \"PERCENTAGE\") {\r",
															"    pm.collectionVariables.set('rewardRuleValue', 100);\r",
															"    pm.collectionVariables.set('trxThresholdFrom', 10);\r",
															"} else {\r",
															"    pm.collectionVariables.set('rewardRuleValue', 1);\r",
															"    pm.collectionVariables.set('trxThresholdFrom', 1);\r",
															"    \r",
															"}\r",
															"pm.collectionVariables.set('trxThresholdTo', 50);\r",
															"\r",
															"pm.collectionVariables.set('trxDaysOfWeek', pm.variables.replaceIn('{{$randomWeekday}}').toString().toUpperCase());\r",
															"pm.collectionVariables.set('trxDayEndTime', endTime[0]);\r",
															"pm.collectionVariables.set('trxCountFrom', 3);\r",
															"pm.collectionVariables.set('trxCountTo', 11);\r",
															"pm.collectionVariables.set('trxRewardLimitFrequency', 'DAILY');\r",
															"pm.collectionVariables.set('trxRewardLimitValue', 3);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{ \"initiativeRewardType\": \"REFUND\",\n  \"rewardRule\": {\n    \"_type\": \"{{rewardRuleType}}\",\n    \"rewardValue\": {{rewardRuleValue}},\n    \"rewardValueType\": \"{{rewardValueType}}\"\n  },\n  \"trxRule\": {\n    \"daysOfWeek\": [\n      {\n        \"daysOfWeek\": [\n          \"{{trxDaysOfWeek}}\"\n        ],\n        \"intervals\": [\n          {\n            \"startTime\": \"00:00:00.000\",\n            \"endTime\": \"{{trxDayEndTime}}\"\n          }\n        ]\n      }\n    ],\n    \"threshold\": {\n      \"from\": {{trxThresholdFrom}},\n      \"fromIncluded\": true,\n      \"to\": {{trxThresholdTo}},\n      \"toIncluded\": true\n    },\n    \"mccFilter\": {\n      \"allowedList\": true,\n      \"values\": [\n        \"0742\", \"0743\", \"0744\"\n      ]\n    },\n    \"trxCount\": {\n      \"from\": {{trxCountFrom}},\n      \"fromIncluded\": true,\n      \"to\": {{trxCountTo}},\n      \"toIncluded\": true\n    }\n  }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlInitiative}}/:initiativeId/reward",
													"host": [
														"{{baseUrlInitiative}}"
													],
													"path": [
														":initiativeId",
														"reward"
													],
													"variable": [
														{
															"key": "initiativeId",
															"value": "{{initiativeIdWithWhitelist}}",
															"description": "(Required) The initiative ID"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "STEP5-Update Initiative Refund Rule",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Onboarding - Happy case - APP IO - Onboarding user with whitelist - Initiative creation - STEP5 - Status 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"/*const timeType = [\"CLOSED\",\"DAILY\",\"WEEKLY\",\"MONTHLY\",\"QUARTERLY\"];\r",
															"timeTypeRandomIndex = _.random(0, timeType.length-1);\r",
															"\r",
															"const accumulatedType = [\"BUDGET_EXHAUSTED\",\"THRESHOLD_REACHED\"];\r",
															"accumulatedTypeRandomIndex = _.random(0, timeType.length-1);\r",
															"\r",
															"pm.collectionVariables.set('timeType', timeType[timeTypeRandomIndex]);\r",
															"pm.collectionVariables.set('accumulatedType', accumulatedType[accumulatedTypeRandomIndex]);\r",
															"pm.collectionVariables.set('identificationCode', pm.variables.replaceIn('{{$randomLoremSentence}}'));\r",
															"*/\r",
															"\r",
															"\r",
															"let refundType = [\"timeParameter\", \"accumulatedAmount\"];\r",
															"refundTypeRandomIndex = _.random(0, refundType.length - 1);\r",
															"\r",
															"const refundTypeSelected = refundType[refundTypeRandomIndex];\r",
															"let body = {};\r",
															"if (refundTypeSelected == \"timeParameter\") {\r",
															"    const timeType = [\"CLOSED\",\"DAILY\",\"WEEKLY\",\"MONTHLY\",\"QUARTERLY\"];\r",
															"    timeTypeRandomIndex = _.random(0, timeType.length-1);\r",
															"    body = {\r",
															"        timeParameter: {\r",
															"            timeType: timeType[timeTypeRandomIndex]\r",
															"        }\r",
															"    };\r",
															"} else {\r",
															"    const accumulatedType = [\"BUDGET_EXHAUSTED\", \"THRESHOLD_REACHED\"];\r",
															"    accumulatedTypeRandomIndex = _.random(0, accumulatedType.length - 1);\r",
															"    const accumulatedTypeSelected = accumulatedType[accumulatedTypeRandomIndex];\r",
															"    if (accumulatedTypeSelected == \"BUDGET_EXHAUSTED\") {\r",
															"        body = {\r",
															"            accumulatedAmount: {\r",
															"                accumulatedType: \"BUDGET_EXHAUSTED\"\r",
															"            }\r",
															"        };\r",
															"    } else {\r",
															"        body = {\r",
															"            accumulatedAmount: {\r",
															"                accumulatedType: \"THRESHOLD_REACHED\",\r",
															"                refundThreshold: 10\r",
															"            }\r",
															"        };\r",
															"    }\r",
															"}\r",
															"\r",
															"pm.collectionVariables.set('body', JSON.stringify(body));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{body}}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlInitiative}}/:initiativeId/refund",
													"host": [
														"{{baseUrlInitiative}}"
													],
													"path": [
														":initiativeId",
														"refund"
													],
													"variable": [
														{
															"key": "initiativeId",
															"value": "{{initiativeIdWithWhitelist}}",
															"description": "(Required) The initiative ID"
														}
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "PAGOPA - Initiative update status APPROVED",
									"item": [
										{
											"name": "Generate Portal Token",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"let textResponse = pm.response.text()\r",
															"\r",
															"pm.test('Onboarding - Happy case - APP IO - Onboarding user with whitelist - Initiative creation - Generate Portal Token (PagoPA Admin)', () => {\r",
															"    //verify response HTTP status \r",
															"    pm.response.to.have.status(200);\r",
															"    pm.collectionVariables.set(\"identityPortalTokenPagopa\", textResponse);\r",
															"});\r",
															"\r",
															"//response time is less than 1s\r",
															"tests[\"Response time is less than 1s\"] = responseTime < 1000;"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"aud\": \"idpay.welfare.pagopa.it\",\r\n  \"uid\": \"{{uid_Pagopa}}\",\r\n  \"name\": \"{{name_Pagopa}}\",\r\n  \"familyName\": \"{{familyName_Pagopa}}\",\r\n  \"email\": \"{{email_Pagopa}}\",\r\n  \"orgId\": \"{{orgId_Pagopa}}\",\r\n  \"orgVAT\": \"{{orgVAT_Pagopa}}\",\r\n  \"orgName\": \"Ente di test IdPay\",\r\n  \"orgPartyRole\": \"{{orgPartyRole_Pagopa}}\",\r\n  \"orgRole\": \"{{orgRole_Pagopa}}\"\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlToken}}/welfare/token/test",
													"host": [
														"{{baseUrlToken}}"
													],
													"path": [
														"welfare",
														"token",
														"test"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update initiative into APPROVED status",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Onboarding - Happy case - APP IO - Onboarding user with whitelist - PagoPA Admin updates initiative status to APPROVED - status 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"//setTimeout(function(){}, 20000); //milliseconds"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalTokenPagopa}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrlInitiative}}/{{initiativeIdWithWhitelist}}/approved",
													"host": [
														"{{baseUrlInitiative}}"
													],
													"path": [
														"{{initiativeIdWithWhitelist}}",
														"approved"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "ENTE - Initiative PUBLISHED",
									"item": [
										{
											"name": "Generate Portal Token",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"let textResponse = pm.response.text()\r",
															"\r",
															"pm.test('Onboarding - Happy case - APP IO - Onboarding user with whitelist - Initiative creation - Generate Portal Token (Ente Admin)', () => {\r",
															"    //verify response HTTP status \r",
															"    pm.response.to.have.status(200);\r",
															"    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
															"});\r",
															"\r",
															"//response time is less than 1s\r",
															"tests[\"Response time is less than 1s\"] = responseTime < 1000;"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"aud\": \"idpay.welfare.pagopa.it\",\r\n  \"uid\": \"{{uid_Ente}}\",\r\n  \"name\": \"{{name_Ente}}\",\r\n  \"familyName\": \"{{familyName_Ente}}\",\r\n  \"email\": \"{{email_Ente}}\",\r\n  \"orgId\": \"{{orgId_Ente}}\",\r\n  \"orgVAT\": \"{{orgVAT_Ente}}\",\r\n  \"orgName\": \"Ente di test IdPay\",\r\n  \"orgPartyRole\": \"{{orgPartyRole_Ente}}\",\r\n  \"orgRole\": \"{{orgRole_Ente}}\"\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlToken}}/welfare/token/test",
													"host": [
														"{{baseUrlToken}}"
													],
													"path": [
														"welfare",
														"token",
														"test"
													]
												}
											},
											"response": []
										},
										{
											"name": "Initiative PUBLISHED",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Onboarding - Happy case - APP IO - Onboarding user with whitelist - Ente Admin updates initiative status to PUBLISHED - status 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"setTimeout(()=> {}, 20000);\r",
															"\r",
															"\r",
															"/*let body;\r",
															"baseUrlInitiative = pm.variables.get('baseUrlInitiative')\r",
															"if(baseUrlInitiative.includes('localhost')){\r",
															"    body = {\r",
															"        mode: 'raw',\r",
															"        raw: JSON.stringify({\r",
															"            organizationName: 'Comune di Milano',\r",
															"            organizationFiscalCode: '11122233344',\r",
															"            organizationUserId: 'b8986bf2-1f93-4827-ab16-b21eb8aeae2b',\r",
															"            organizationUserRole: 'admin'\r",
															"        })\r",
															"    }\r",
															"    pm.request.headers.add({\r",
															"        key: \"Content-Type\",\r",
															"        value: \"application/json\"\r",
															"    });\r",
															"    pm.variables.set('body', JSON.stringify(body));\r",
															"    pm.request.body.update(body);\r",
															"}\r",
															"*/"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {}
											},
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "{{baseUrlInitiative}}/{{initiativeIdWithWhitelist}}/published",
													"host": [
														"{{baseUrlInitiative}}"
													],
													"path": [
														"{{initiativeIdWithWhitelist}}",
														"published"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Generate Token IO",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Onboarding - Happy case - APP IO - Onboarding user with whitelist - Generate token IO', () => {\r",
													"    //verify response HTTP status \r",
													"    pm.response.to.have.status(200);\r",
													"    pm.collectionVariables.set(\"tokenIO\", pm.response.text());\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"setTimeout(()=> {}, 10000)"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{genericSubscriptionKey}}",
												"type": "default"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "default"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/rtd/mock-io/login?fiscalCode={{CF_fake}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"rtd",
												"mock-io",
												"login"
											],
											"query": [
												{
													"key": "fiscalCode",
													"value": "{{CF_fake}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Accept T&C",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Onboarding - Happy case - APP IO - Onboarding user with whitelist - Accept T&C - Status 204\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//setTimeout(()=> {}, 20000)"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tokenIO}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{apimSubscriptionKey}}",
												"type": "text"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"initiativeId\" : \"{{initiativeIdWithWhitelist}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/idpay/onboarding/",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"idpay",
												"onboarding",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "Prerequisites Check",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Onboarding - Happy case - APP IO - Onboarding user with whitelist - Prerequisites check - Status 204\", function () {\r",
													"    pm.response.to.have.status(202);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//setTimeout(()=> {}, 20000)"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tokenIO}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{apimSubscriptionKey}}",
												"type": "text"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"initiativeId\" : \"{{initiativeIdWithWhitelist}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/idpay/onboarding/initiative",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"idpay",
												"onboarding",
												"initiative"
											]
										}
									},
									"response": []
								},
								{
									"name": "Status Onboarding - ok",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Onboarding - Happy case - APP IO - Onboarding user with whitelist - Status Onboarding OK - Status 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Onboarding status is ONBOARDING_OK or ON_EVALUATION\", function () {\r",
													"    let jsonResponse = pm.response.json()\r",
													"    pm.expect(jsonResponse.status).to.be.oneOf(['ONBOARDING_OK', 'ON_EVALUATION']);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tokenIO}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/idpay/onboarding/{{initiativeIdWithWhitelist}}/status",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"idpay",
												"onboarding",
												"{{initiativeIdWithWhitelist}}",
												"status"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Onboarding User with criteria",
							"item": [
								{
									"name": "ENTE - Initiative creation",
									"item": [
										{
											"name": "Generate Portal Token",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"let textResponse = pm.response.text()\r",
															"\r",
															"pm.test('Onboarding - Happy case - APP IO - Onboarding user with whitelist - Initiative creation - Generate Portal Token (Ente Admin)', () => {\r",
															"    //verify response HTTP status \r",
															"    pm.response.to.have.status(200);\r",
															"    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "default"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"aud\": \"idpay.welfare.pagopa.it\",\r\n  \"uid\": \"{{uid_Ente}}\",\r\n  \"name\": \"{{name_Ente}}\",\r\n  \"familyName\": \"{{familyName_Ente}}\",\r\n  \"email\": \"{{email_Ente}}\",\r\n  \"orgId\": \"{{orgId_Ente}}\",\r\n  \"orgVAT\": \"{{orgVAT_Ente}}\",\r\n  \"orgName\": \"Ente di test IdPay\",\r\n  \"orgPartyRole\": \"{{orgPartyRole_Ente}}\",\r\n  \"orgRole\": \"{{orgRole_Ente}}\"\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlToken}}/welfare/token/test",
													"host": [
														"{{baseUrlToken}}"
													],
													"path": [
														"welfare",
														"token",
														"test"
													]
												}
											},
											"response": []
										},
										{
											"name": "STEP1-Insert Initiative (Service Info)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = JSON.parse(responseBody);\r",
															"// console.log('jsondata', jsonData);\r",
															"// console.log('jsondata.initiativeId', jsonData.initiativeId);\r",
															"pm.collectionVariables.set('initiativeIdWithCriteria', jsonData.initiativeId);\r",
															"\r",
															"pm.test(\"Onboarding - Happy case - APP IO - Onboarding user with criteria - Initiative creation - STEP1 - Status test 201\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"});\r",
															"\r",
															"pm.test(\"Onboarding - Happy case - APP IO - Onboarding user with criteria - Initiative creation - STEP1 - Verify response body contains initiativeId\", function () {\r",
															"    let jsonResponse = pm.response.json();\r",
															"    pm.expect(jsonResponse).have.property(\"initiativeId\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"//pm.collectionVariables.set('serviceId', pm.variables.replaceIn('{{$randomUUID}}'));\r",
															"let moment = require('moment');\r",
															"const now = String(moment().format('DD-MM-YYYY hh:mm'));\r",
															"const serviceName = 'Test funzionali App IO onboarding user criteri automatici ' + now;\r",
															"pm.collectionVariables.set('serviceName', serviceName);\r",
															"pm.collectionVariables.set('description', pm.variables.replaceIn('{{$randomLoremSentence}}'));\r",
															"\r",
															"pm.collectionVariables.set('channel_type', 'web');\r",
															"pm.collectionVariables.set('channel_contact','https://www.google.it');"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"serviceIO\": true,\n    \"serviceName\": \"{{serviceName}}\",\n    \"serviceScope\": \"LOCAL\",\n    \"description\": \"{{description}}\",\n    \"privacyLink\": \"https://www.google.it\",\n    \"tcLink\": \"https://www.google.com\",\n    \"channels\": [\n        {\n            \"type\": \"{{channel_type}}\",\n            \"contact\": \"{{channel_contact}}\"\n        }\n    ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlInitiative}}/info",
													"host": [
														"{{baseUrlInitiative}}"
													],
													"path": [
														"info"
													]
												},
												"description": "Save initiative and first subset of data 'general info'"
											},
											"response": []
										},
										{
											"name": "STEP2-Update Initiative (general Info)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"let moment = require('moment');\r",
															"//Format: YYYY-MM-DD\r",
															"let today = String(moment().format('YYYY-MM-DD'));\r",
															"let todayP1 = String(moment().add(1,'months').format('YYYY-MM-DD'));\r",
															"let todayP2 = String(moment().add(2,'months').format('YYYY-MM-DD'));\r",
															"let todayP3 = String(moment().add(3,'months').format('YYYY-MM-DD'));\r",
															"\r",
															"/*\r",
															"var futureDate = pm.variables.replaceIn('{{$$randomDateFuture}}');\r",
															"pm.collectionVariables.set('...', _.random(0, 180));\r",
															"*/\r",
															"//_.floor(_.random(1.0, 100000.0, true),2)\r",
															"pm.collectionVariables.set('budget', _.floor(_.random(10000, 100000, true),2));\r",
															"pm.collectionVariables.set('beneficiaryType', 'PF');\r",
															"//pm.collectionVariables.set('beneficiaryKnown', pm.variables.replaceIn('{{$randomBoolean}}'));\r",
															"pm.collectionVariables.set('beneficiaryKnown', false);\r",
															"pm.collectionVariables.set('rankingEnabled', false);\r",
															"pm.collectionVariables.set('beneficiaryBudget', pm.variables.replaceIn('{{$randomInt}}'));//default max 1000\r",
															"pm.collectionVariables.set('rankingStartDate', today);\r",
															"pm.collectionVariables.set('rankingEndDate', todayP1);\r",
															"pm.collectionVariables.set('startDate', todayP2);\r",
															"pm.collectionVariables.set('endDate', todayP3);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Onboarding - Happy case - APP IO - Onboarding user with criteria - Initiative creation - STEP2 - Status 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"budget\": {{budget}},\n    \"beneficiaryType\": \"{{beneficiaryType}}\",\n    \"beneficiaryKnown\": {{beneficiaryKnown}},\n    \"rankingEnabled\": {{rankingEnabled}},\n    \"beneficiaryBudget\": {{beneficiaryBudget}},\n    \"rankingStartDate\": \"{{rankingStartDate}}\",\n    \"rankingEndDate\": \"{{rankingEndDate}}\",\n    \"startDate\": \"{{startDate}}\",\n    \"endDate\": \"{{endDate}}\",\n    \"descriptionMap\": {\n        \"it\": \"it\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlInitiative}}/:initiativeId/general",
													"host": [
														"{{baseUrlInitiative}}"
													],
													"path": [
														":initiativeId",
														"general"
													],
													"variable": [
														{
															"key": "initiativeId",
															"value": "{{initiativeIdWithCriteria}}",
															"description": "(Required) The initiative ID"
														}
													]
												},
												"description": "Save initiative and first subset of data 'general info'"
											},
											"response": []
										},
										{
											"name": "STEP3-Update Initiative (criteria)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Onboarding - Happy case - APP IO - Onboarding user with criteria - Initiative creation - STEP3 - Status 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"automatedCriteria\": [\r\n        {\r\n            \"authority\": \"INPS\",\r\n            \"code\": \"ISEE\",\r\n            \"operator\": \"GE\",\r\n            \"value\": \"1\",\r\n            \"value2\": \"\",\r\n            \"iseeTypes\": [\r\n                \"ORDINARIO\",\r\n                \"MINORENNE\",\r\n                \"UNIVERSITARIO\",\r\n                \"SOCIOSANITARIO\",\r\n                \"DOTTORATO\",\r\n                \"RESIDENZIALE\",\r\n                \"CORRENTE\"\r\n            ]\r\n        }\r\n    ],\r\n    \"selfDeclarationCriteria\":[]\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlInitiative}}/:initiativeId/beneficiary",
													"host": [
														"{{baseUrlInitiative}}"
													],
													"path": [
														":initiativeId",
														"beneficiary"
													],
													"variable": [
														{
															"key": "initiativeId",
															"value": "{{initiativeIdWithCriteria}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "STEP4-Update Initiative Trx-Reward rules",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Onboarding - Happy case - APP IO - Onboarding user with criteria - Initiative creation - STEP4 - Status 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const d = new Date();\r",
															"dateString = d.toISOString()\r",
															"let endTime = dateString.split('T');\r",
															"endTime = endTime[1].split('Z');\r",
															"\r",
															"pm.collectionVariables.set('rewardRuleType', 'rewardValue');\r",
															"const rewardValueTypes = [\"PERCENTAGE\", \"ABSOLUTE\"];\r",
															"rewardValueTypeRandomIndex = _.random(0, rewardValueTypes.length - 1);\r",
															"const selectedRewardValueType = rewardValueTypes[rewardValueTypeRandomIndex];\r",
															"pm.collectionVariables.set('rewardValueType', selectedRewardValueType);\r",
															"if (selectedRewardValueType == \"PERCENTAGE\") {\r",
															"    pm.collectionVariables.set('rewardRuleValue', 100);\r",
															"    pm.collectionVariables.set('trxThresholdFrom', 10);\r",
															"} else {\r",
															"    pm.collectionVariables.set('rewardRuleValue', 1);\r",
															"    pm.collectionVariables.set('trxThresholdFrom', 1);\r",
															"    \r",
															"}\r",
															"pm.collectionVariables.set('trxThresholdTo', 50);\r",
															"\r",
															"pm.collectionVariables.set('trxDaysOfWeek', pm.variables.replaceIn('{{$randomWeekday}}').toString().toUpperCase());\r",
															"pm.collectionVariables.set('trxDayEndTime', endTime[0]);\r",
															"pm.collectionVariables.set('trxCountFrom', 3);\r",
															"pm.collectionVariables.set('trxCountTo', 11);\r",
															"pm.collectionVariables.set('trxRewardLimitFrequency', 'DAILY');\r",
															"pm.collectionVariables.set('trxRewardLimitValue', 3);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{ \"initiativeRewardType\": \"REFUND\",\n  \"rewardRule\": {\n    \"_type\": \"{{rewardRuleType}}\",\n    \"rewardValue\": {{rewardRuleValue}},\n    \"rewardValueType\": \"{{rewardValueType}}\"\n  },\n  \"trxRule\": {\n    \"daysOfWeek\": [\n      {\n        \"daysOfWeek\": [\n          \"{{trxDaysOfWeek}}\"\n        ],\n        \"intervals\": [\n          {\n            \"startTime\": \"00:00:00.000\",\n            \"endTime\": \"{{trxDayEndTime}}\"\n          }\n        ]\n      }\n    ],\n    \"threshold\": {\n      \"from\": {{trxThresholdFrom}},\n      \"fromIncluded\": true,\n      \"to\": {{trxThresholdTo}},\n      \"toIncluded\": true\n    },\n    \"mccFilter\": {\n      \"allowedList\": true,\n      \"values\": [\n        \"0742\", \"0743\", \"0744\"\n      ]\n    },\n    \"trxCount\": {\n      \"from\": {{trxCountFrom}},\n      \"fromIncluded\": true,\n      \"to\": {{trxCountTo}},\n      \"toIncluded\": true\n    }\n  }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlInitiative}}/:initiativeId/reward",
													"host": [
														"{{baseUrlInitiative}}"
													],
													"path": [
														":initiativeId",
														"reward"
													],
													"variable": [
														{
															"key": "initiativeId",
															"value": "{{initiativeIdWithCriteria}}",
															"description": "(Required) The initiative ID"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "STEP5-Update Initiative Refund Rule",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Onboarding - Happy case - APP IO - Onboarding user with criteria - Initiative creation - STEP5 - Status 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"/*const timeType = [\"CLOSED\",\"DAILY\",\"WEEKLY\",\"MONTHLY\",\"QUARTERLY\"];\r",
															"timeTypeRandomIndex = _.random(0, timeType.length-1);\r",
															"\r",
															"const accumulatedType = [\"BUDGET_EXHAUSTED\",\"THRESHOLD_REACHED\"];\r",
															"accumulatedTypeRandomIndex = _.random(0, timeType.length-1);\r",
															"\r",
															"pm.collectionVariables.set('timeType', timeType[timeTypeRandomIndex]);\r",
															"pm.collectionVariables.set('accumulatedType', accumulatedType[accumulatedTypeRandomIndex]);\r",
															"pm.collectionVariables.set('identificationCode', pm.variables.replaceIn('{{$randomLoremSentence}}'));\r",
															"*/\r",
															"\r",
															"\r",
															"let refundType = [\"timeParameter\", \"accumulatedAmount\"];\r",
															"refundTypeRandomIndex = _.random(0, refundType.length - 1);\r",
															"\r",
															"const refundTypeSelected = refundType[refundTypeRandomIndex];\r",
															"let body = {};\r",
															"if (refundTypeSelected == \"timeParameter\") {\r",
															"    const timeType = [\"CLOSED\",\"DAILY\",\"WEEKLY\",\"MONTHLY\",\"QUARTERLY\"];\r",
															"    timeTypeRandomIndex = _.random(0, timeType.length-1);\r",
															"    body = {\r",
															"        timeParameter: {\r",
															"            timeType: timeType[timeTypeRandomIndex]\r",
															"        }\r",
															"    };\r",
															"} else {\r",
															"    const accumulatedType = [\"BUDGET_EXHAUSTED\", \"THRESHOLD_REACHED\"];\r",
															"    accumulatedTypeRandomIndex = _.random(0, accumulatedType.length - 1);\r",
															"    const accumulatedTypeSelected = accumulatedType[accumulatedTypeRandomIndex];\r",
															"    if (accumulatedTypeSelected == \"BUDGET_EXHAUSTED\") {\r",
															"        body = {\r",
															"            accumulatedAmount: {\r",
															"                accumulatedType: \"BUDGET_EXHAUSTED\"\r",
															"            }\r",
															"        };\r",
															"    } else {\r",
															"        body = {\r",
															"            accumulatedAmount: {\r",
															"                accumulatedType: \"THRESHOLD_REACHED\",\r",
															"                refundThreshold: 10\r",
															"            }\r",
															"        };\r",
															"    }\r",
															"}\r",
															"\r",
															"pm.collectionVariables.set('body', JSON.stringify(body));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{body}}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlInitiative}}/:initiativeId/refund",
													"host": [
														"{{baseUrlInitiative}}"
													],
													"path": [
														":initiativeId",
														"refund"
													],
													"variable": [
														{
															"key": "initiativeId",
															"value": "{{initiativeIdWithCriteria}}",
															"description": "(Required) The initiative ID"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "PAGOPA - Initiative update status APPROVED",
									"item": [
										{
											"name": "Generate Portal Token",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"let textResponse = pm.response.text()\r",
															"\r",
															"pm.test('Onboarding - Happy case - APP IO - Onboarding user with criteria - Initiative creation - Generate Portal Token (PagoPA Admin)', () => {\r",
															"    //verify response HTTP status \r",
															"    pm.response.to.have.status(200);\r",
															"    pm.collectionVariables.set(\"identityPortalTokenPagopa\", textResponse);\r",
															"});\r",
															"\r",
															"//response time is less than 1s\r",
															"tests[\"Response time is less than 1s\"] = responseTime < 1000;"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "default"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"aud\": \"idpay.welfare.pagopa.it\",\r\n  \"uid\": \"{{uid_Pagopa}}\",\r\n  \"name\": \"{{name_Pagopa}}\",\r\n  \"familyName\": \"{{familyName_Pagopa}}\",\r\n  \"email\": \"{{email_Pagopa}}\",\r\n  \"orgId\": \"{{orgId_Pagopa}}\",\r\n  \"orgVAT\": \"{{orgVAT_Pagopa}}\",\r\n  \"orgName\": \"Ente di test IdPay\",\r\n  \"orgPartyRole\": \"{{orgPartyRole_Pagopa}}\",\r\n  \"orgRole\": \"{{orgRole_Pagopa}}\"\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlToken}}/welfare/token/test",
													"host": [
														"{{baseUrlToken}}"
													],
													"path": [
														"welfare",
														"token",
														"test"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update initiative into APPROVED status",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Onboarding - Happy case - APP IO - Onboarding user with criteria - PagoPA Admin updates initiative status to APPROVED - status 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"//setTimeout(function(){}, 20000); //milliseconds"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalTokenPagopa}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrlInitiative}}/{{initiativeIdWithCriteria}}/approved",
													"host": [
														"{{baseUrlInitiative}}"
													],
													"path": [
														"{{initiativeIdWithCriteria}}",
														"approved"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "ENTE - Initiative PUBLISHED",
									"item": [
										{
											"name": "Generate Portal Token",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"let textResponse = pm.response.text()\r",
															"\r",
															"pm.test('Onboarding - Happy case - APP IO - Onboarding user with criteria - Initiative creation - Generate Portal Token (Ente Admin)', () => {\r",
															"    //verify response HTTP status \r",
															"    pm.response.to.have.status(200);\r",
															"    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
															"});\r",
															"\r",
															"//response time is less than 1s\r",
															"tests[\"Response time is less than 1s\"] = responseTime < 1000;"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "default"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"aud\": \"idpay.welfare.pagopa.it\",\r\n  \"uid\": \"{{uid_Ente}}\",\r\n  \"name\": \"{{name_Ente}}\",\r\n  \"familyName\": \"{{familyName_Ente}}\",\r\n  \"email\": \"{{email_Ente}}\",\r\n  \"orgId\": \"{{orgId_Ente}}\",\r\n  \"orgVAT\": \"{{orgVAT_Ente}}\",\r\n  \"orgName\": \"Ente di test IdPay\",\r\n  \"orgPartyRole\": \"{{orgPartyRole_Ente}}\",\r\n  \"orgRole\": \"{{orgRole_Ente}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlToken}}/welfare/token/test",
													"host": [
														"{{baseUrlToken}}"
													],
													"path": [
														"welfare",
														"token",
														"test"
													]
												}
											},
											"response": []
										},
										{
											"name": "Initiative PUBLISHED",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Onboarding - Happy case - APP IO - Onboarding user with criteria - Ente Admin updates initiative status to PUBLISHED - status 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"/*let body;\r",
															"baseUrlInitiative = pm.variables.get('baseUrlInitiative')\r",
															"if(baseUrlInitiative.includes('localhost')){\r",
															"    body = {\r",
															"        mode: 'raw',\r",
															"        raw: JSON.stringify({\r",
															"            organizationName: 'Comune di Milano',\r",
															"            organizationFiscalCode: '11122233344',\r",
															"            organizationUserId: 'b8986bf2-1f93-4827-ab16-b21eb8aeae2b',\r",
															"            organizationUserRole: 'admin'\r",
															"        })\r",
															"    }\r",
															"    pm.request.headers.add({\r",
															"        key: \"Content-Type\",\r",
															"        value: \"application/json\"\r",
															"    });\r",
															"    pm.variables.set('body', JSON.stringify(body));\r",
															"    pm.request.body.update(body);\r",
															"}\r",
															"*/"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {}
											},
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "{{baseUrlInitiative}}/{{initiativeIdWithCriteria}}/published",
													"host": [
														"{{baseUrlInitiative}}"
													],
													"path": [
														"{{initiativeIdWithCriteria}}",
														"published"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Generate Token IO",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Onboarding - Happy case - APP IO - Onboarding user with criteria - Generate token IO', () => {\r",
													"    //verify response HTTP status \r",
													"    pm.response.to.have.status(200);\r",
													"    pm.collectionVariables.set(\"tokenIO\", pm.response.text());\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"setTimeout(()=> {}, 5000)"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{genericSubscriptionKey}}",
												"type": "default"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "default"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/rtd/mock-io/login?fiscalCode={{CF_fake}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"rtd",
												"mock-io",
												"login"
											],
											"query": [
												{
													"key": "fiscalCode",
													"value": "{{CF_fake}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Accept T&C",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Onboarding - Happy case - APP IO - Onboarding user with criteria - Accept T&C - Status 204\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"setTimeout(()=> {}, 10000)"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tokenIO}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{apimSubscriptionKey}}",
												"type": "text"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"initiativeId\" : \"{{initiativeIdWithCriteria}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/idpay/onboarding/",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"idpay",
												"onboarding",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "Prerequisites Check",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Onboarding - Happy case - APP IO - Onboarding user with criteria - Prerequisites check - Status 200 or 202\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200,202]);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tokenIO}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{apimSubscriptionKey}}",
												"type": "text"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"initiativeId\" : \"{{initiativeIdWithCriteria}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/idpay/onboarding/initiative",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"idpay",
												"onboarding",
												"initiative"
											]
										}
									},
									"response": []
								},
								{
									"name": "PDND + Autocertification",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Onboarding - Happy case - APP IO - Onboarding user with criteria - PDND + Autocertification - Status 202\", function () {\r",
													"    pm.response.to.have.status(202);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tokenIO}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"initiativeId\" : \"{{initiativeIdWithCriteria}}\",\r\n    \"pdndAccept\": true,\r\n    \"selfDeclarationList\": []\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/idpay/onboarding/consent",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"idpay",
												"onboarding",
												"consent"
											]
										}
									},
									"response": []
								},
								{
									"name": "Status Onboarding - ok",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Onboarding - Happy case - APP IO - Onboarding user with criteria - Status Onboarding OK - Status 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"setTimeout(()=>{ \r",
													"\r",
													"pm.test(\"Onboarding status is ONBOARDING_OK or ON_EVALUATION\", function () {\r",
													"    let jsonResponse = pm.response.json()\r",
													"    pm.expect(jsonResponse.status).to.be.oneOf(['ONBOARDING_OK', 'ON_EVALUATION']);\r",
													"});\r",
													" },2000)"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tokenIO}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/idpay/onboarding/{{initiativeIdWithCriteria}}/status",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"idpay",
												"onboarding",
												"{{initiativeIdWithCriteria}}",
												"status"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Onboarding User with manual criteria",
							"item": [
								{
									"name": "ENTE - Initiative creation",
									"item": [
										{
											"name": "Generate Portal Token",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"let textResponse = pm.response.text()\r",
															"\r",
															"pm.test('Onboarding - Happy case - APP IO - Onboarding user with whitelist - Initiative creation - Generate Portal Token (Ente Admin)', () => {\r",
															"    //verify response HTTP status \r",
															"    pm.response.to.have.status(200);\r",
															"    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "default"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"aud\": \"idpay.welfare.pagopa.it\",\r\n  \"uid\": \"{{uid_Ente}}\",\r\n  \"name\": \"{{name_Ente}}\",\r\n  \"familyName\": \"{{familyName_Ente}}\",\r\n  \"email\": \"{{email_Ente}}\",\r\n  \"orgId\": \"{{orgId_Ente}}\",\r\n  \"orgVAT\": \"{{orgVAT_Ente}}\",\r\n  \"orgName\": \"Ente di test IdPay\",\r\n  \"orgPartyRole\": \"{{orgPartyRole_Ente}}\",\r\n  \"orgRole\": \"{{orgRole_Ente}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlToken}}/welfare/token/test",
													"host": [
														"{{baseUrlToken}}"
													],
													"path": [
														"welfare",
														"token",
														"test"
													]
												}
											},
											"response": []
										},
										{
											"name": "STEP1-Insert Initiative (Service Info)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"//pm.collectionVariables.set('serviceId', pm.variables.replaceIn('{{$randomUUID}}'));\r",
															"let moment = require('moment');\r",
															"const now = String(moment().format('DD-MM-YYYY hh:mm'));\r",
															"const serviceName = 'Test funzionali App IO onboarding user criteri manuali ' + now;\r",
															"pm.collectionVariables.set('serviceName', serviceName);\r",
															"\r",
															"pm.collectionVariables.set('serviceName', serviceName);\r",
															"pm.collectionVariables.set('description', pm.variables.replaceIn('{{$randomLoremSentence}}'));\r",
															"\r",
															"pm.collectionVariables.set('channel_type', 'web');\r",
															"pm.collectionVariables.set('channel_contact', 'https://www.google.it');"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = JSON.parse(responseBody);\r",
															"// console.log('jsondata', jsonData);\r",
															"// console.log('jsondata.initiativeId', jsonData.initiativeId);\r",
															"pm.collectionVariables.set('initiativeIdWithManualCriteria', jsonData.initiativeId);\r",
															"\r",
															"pm.test(\"Onboarding - Happy case - APP IO - Onboarding user with manual criteria - Initiative creation - STEP1 - Status test 201\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"});\r",
															"\r",
															"pm.test(\"Onboarding - Happy case - APP IO - Onboarding user with manual criteria - Initiative creation - STEP1 - Verify response body contains initiativeId\", function () {\r",
															"    let jsonResponse = pm.response.json();\r",
															"    pm.expect(jsonResponse).have.property(\"initiativeId\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"serviceIO\": true,\n    \"serviceName\": \"{{serviceName}}\",\n    \"serviceScope\": \"LOCAL\",\n    \"description\": \"{{description}}\",\n    \"privacyLink\": \"https://www.google.it\",\n    \"tcLink\": \"https://www.google.com\",\n    \"channels\": [\n        {\n            \"type\": \"{{channel_type}}\",\n            \"contact\": \"{{channel_contact}}\"\n        }\n    ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlInitiative}}/info",
													"host": [
														"{{baseUrlInitiative}}"
													],
													"path": [
														"info"
													]
												},
												"description": "Save initiative and first subset of data 'general info'"
											},
											"response": []
										},
										{
											"name": "STEP2-Update Initiative (general Info)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"let moment = require('moment');\r",
															"//Format: YYYY-MM-DD\r",
															"let today = String(moment().format('YYYY-MM-DD'));\r",
															"let todayP1 = String(moment().add(1,'months').format('YYYY-MM-DD'));\r",
															"let todayP2 = String(moment().add(2,'months').format('YYYY-MM-DD'));\r",
															"let todayP3 = String(moment().add(3,'months').format('YYYY-MM-DD'));\r",
															"\r",
															"/*\r",
															"var futureDate = pm.variables.replaceIn('{{$$randomDateFuture}}');\r",
															"pm.collectionVariables.set('...', _.random(0, 180));\r",
															"*/\r",
															"//_.floor(_.random(1.0, 100000.0, true),2)\r",
															"pm.collectionVariables.set('budget', _.floor(_.random(10000, 100000, true),2));\r",
															"pm.collectionVariables.set('beneficiaryType', 'PF');\r",
															"//pm.collectionVariables.set('beneficiaryKnown', pm.variables.replaceIn('{{$randomBoolean}}'));\r",
															"pm.collectionVariables.set('beneficiaryKnown', false);\r",
															"pm.collectionVariables.set('rankingEnabled', false);\r",
															"pm.collectionVariables.set('beneficiaryBudget', pm.variables.replaceIn('{{$randomInt}}'));//default max 1000\r",
															"pm.collectionVariables.set('rankingStartDate', today);\r",
															"pm.collectionVariables.set('rankingEndDate', todayP1);\r",
															"pm.collectionVariables.set('startDate', todayP2);\r",
															"pm.collectionVariables.set('endDate', todayP3);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Onboarding - Happy case - APP IO - Onboarding user with manual criteria - Initiative creation - STEP2 - Status 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"budget\": {{budget}},\n    \"beneficiaryType\": \"{{beneficiaryType}}\",\n    \"beneficiaryKnown\": {{beneficiaryKnown}},\n    \"rankingEnabled\": {{rankingEnabled}},\n    \"beneficiaryBudget\": {{beneficiaryBudget}},\n    \"rankingStartDate\": \"{{rankingStartDate}}\",\n    \"rankingEndDate\": \"{{rankingEndDate}}\",\n    \"startDate\": \"{{startDate}}\",\n    \"endDate\": \"{{endDate}}\",\n    \"descriptionMap\": {\n        \"it\": \"it\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlInitiative}}/:initiativeId/general",
													"host": [
														"{{baseUrlInitiative}}"
													],
													"path": [
														":initiativeId",
														"general"
													],
													"variable": [
														{
															"key": "initiativeId",
															"value": "{{initiativeIdWithManualCriteria}}",
															"description": "(Required) The initiative ID"
														}
													]
												},
												"description": "Save initiative and first subset of data 'general info'"
											},
											"response": []
										},
										{
											"name": "STEP3-Update Initiative (criteria)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Onboarding - Happy case - APP IO - Onboarding user with manual criteria - Initiative creation - STEP3 - Status 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"automatedCriteria\": [],\r\n    \"selfDeclarationCriteria\": [\r\n        {\r\n            \"_type\": \"boolean\",\r\n            \"description\": \"test\",\r\n            \"value\": true,\r\n            \"code\": \"1\"\r\n        }\r\n    ]\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlInitiative}}/{{initiativeIdWithManualCriteria}}/beneficiary",
													"host": [
														"{{baseUrlInitiative}}"
													],
													"path": [
														"{{initiativeIdWithManualCriteria}}",
														"beneficiary"
													]
												}
											},
											"response": []
										},
										{
											"name": "STEP4-Update Initiative Trx-Reward rules",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Onboarding - Happy case - APP IO - Onboarding user with manual criteria - Initiative creation - STEP4 - Status 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const d = new Date();\r",
															"dateString = d.toISOString()\r",
															"let endTime = dateString.split('T');\r",
															"endTime = endTime[1].split('Z');\r",
															"\r",
															"pm.collectionVariables.set('rewardRuleType', 'rewardValue');\r",
															"const rewardValueTypes = [\"PERCENTAGE\", \"ABSOLUTE\"];\r",
															"rewardValueTypeRandomIndex = _.random(0, rewardValueTypes.length - 1);\r",
															"const selectedRewardValueType = rewardValueTypes[rewardValueTypeRandomIndex];\r",
															"pm.collectionVariables.set('rewardValueType', selectedRewardValueType);\r",
															"if (selectedRewardValueType == \"PERCENTAGE\") {\r",
															"    pm.collectionVariables.set('rewardRuleValue', 100);\r",
															"    pm.collectionVariables.set('trxThresholdFrom', 10);\r",
															"} else {\r",
															"    pm.collectionVariables.set('rewardRuleValue', 1);\r",
															"    pm.collectionVariables.set('trxThresholdFrom', 1);\r",
															"    \r",
															"}\r",
															"pm.collectionVariables.set('trxThresholdTo', 50);\r",
															"\r",
															"pm.collectionVariables.set('trxDaysOfWeek', pm.variables.replaceIn('{{$randomWeekday}}').toString().toUpperCase());\r",
															"pm.collectionVariables.set('trxDayEndTime', endTime[0]);\r",
															"pm.collectionVariables.set('trxCountFrom', 3);\r",
															"pm.collectionVariables.set('trxCountTo', 11);\r",
															"pm.collectionVariables.set('trxRewardLimitFrequency', 'DAILY');\r",
															"pm.collectionVariables.set('trxRewardLimitValue', 3);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{ \"initiativeRewardType\": \"REFUND\",\n  \"rewardRule\": {\n    \"_type\": \"{{rewardRuleType}}\",\n    \"rewardValue\": {{rewardRuleValue}},\n    \"rewardValueType\": \"{{rewardValueType}}\"\n  },\n  \"trxRule\": {\n    \"daysOfWeek\": [\n      {\n        \"daysOfWeek\": [\n          \"{{trxDaysOfWeek}}\"\n        ],\n        \"intervals\": [\n          {\n            \"startTime\": \"00:00:00.000\",\n            \"endTime\": \"{{trxDayEndTime}}\"\n          }\n        ]\n      }\n    ],\n    \"threshold\": {\n      \"from\": {{trxThresholdFrom}},\n      \"fromIncluded\": true,\n      \"to\": {{trxThresholdTo}},\n      \"toIncluded\": true\n    },\n    \"mccFilter\": {\n      \"allowedList\": true,\n      \"values\": [\n        \"0742\", \"0743\", \"0744\"\n      ]\n    },\n    \"trxCount\": {\n      \"from\": {{trxCountFrom}},\n      \"fromIncluded\": true,\n      \"to\": {{trxCountTo}},\n      \"toIncluded\": true\n    }\n  }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlInitiative}}/:initiativeId/reward",
													"host": [
														"{{baseUrlInitiative}}"
													],
													"path": [
														":initiativeId",
														"reward"
													],
													"variable": [
														{
															"key": "initiativeId",
															"value": "{{initiativeIdWithManualCriteria}}",
															"description": "(Required) The initiative ID"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "STEP5-Update Initiative Refund Rule",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Onboarding - Happy case - APP IO - Onboarding user with manual criteria - Initiative creation - STEP5 - Status 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"/*const timeType = [\"CLOSED\",\"DAILY\",\"WEEKLY\",\"MONTHLY\",\"QUARTERLY\"];\r",
															"timeTypeRandomIndex = _.random(0, timeType.length-1);\r",
															"\r",
															"const accumulatedType = [\"BUDGET_EXHAUSTED\",\"THRESHOLD_REACHED\"];\r",
															"accumulatedTypeRandomIndex = _.random(0, timeType.length-1);\r",
															"\r",
															"pm.collectionVariables.set('timeType', timeType[timeTypeRandomIndex]);\r",
															"pm.collectionVariables.set('accumulatedType', accumulatedType[accumulatedTypeRandomIndex]);\r",
															"pm.collectionVariables.set('identificationCode', pm.variables.replaceIn('{{$randomLoremSentence}}'));\r",
															"*/\r",
															"\r",
															"\r",
															"let refundType = [\"timeParameter\", \"accumulatedAmount\"];\r",
															"refundTypeRandomIndex = _.random(0, refundType.length - 1);\r",
															"\r",
															"const refundTypeSelected = refundType[refundTypeRandomIndex];\r",
															"let body = {};\r",
															"if (refundTypeSelected == \"timeParameter\") {\r",
															"    const timeType = [\"CLOSED\",\"DAILY\",\"WEEKLY\",\"MONTHLY\",\"QUARTERLY\"];\r",
															"    timeTypeRandomIndex = _.random(0, timeType.length-1);\r",
															"    body = {\r",
															"        timeParameter: {\r",
															"            timeType: timeType[timeTypeRandomIndex]\r",
															"        }\r",
															"    };\r",
															"} else {\r",
															"    const accumulatedType = [\"BUDGET_EXHAUSTED\", \"THRESHOLD_REACHED\"];\r",
															"    accumulatedTypeRandomIndex = _.random(0, accumulatedType.length - 1);\r",
															"    const accumulatedTypeSelected = accumulatedType[accumulatedTypeRandomIndex];\r",
															"    if (accumulatedTypeSelected == \"BUDGET_EXHAUSTED\") {\r",
															"        body = {\r",
															"            accumulatedAmount: {\r",
															"                accumulatedType: \"BUDGET_EXHAUSTED\"\r",
															"            }\r",
															"        };\r",
															"    } else {\r",
															"        body = {\r",
															"            accumulatedAmount: {\r",
															"                accumulatedType: \"THRESHOLD_REACHED\",\r",
															"                refundThreshold: 10\r",
															"            }\r",
															"        };\r",
															"    }\r",
															"}\r",
															"\r",
															"pm.collectionVariables.set('body', JSON.stringify(body));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{body}}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlInitiative}}/:initiativeId/refund",
													"host": [
														"{{baseUrlInitiative}}"
													],
													"path": [
														":initiativeId",
														"refund"
													],
													"variable": [
														{
															"key": "initiativeId",
															"value": "{{initiativeIdWithManualCriteria}}",
															"description": "(Required) The initiative ID"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "PAGOPA - Initiative update status APPROVED",
									"item": [
										{
											"name": "Generate Portal Token",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"let textResponse = pm.response.text()\r",
															"\r",
															"pm.test('Onboarding - Happy case - APP IO - Onboarding user with manual criteria - Initiative creation - Generate Portal Token (PagoPA Admin)', () => {\r",
															"    //verify response HTTP status \r",
															"    pm.response.to.have.status(200);\r",
															"    pm.collectionVariables.set(\"identityPortalTokenPagopa\", textResponse);\r",
															"});\r",
															"\r",
															"//response time is less than 1s\r",
															"tests[\"Response time is less than 1s\"] = responseTime < 1000;"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "default"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"aud\": \"idpay.welfare.pagopa.it\",\r\n  \"uid\": \"{{uid_Pagopa}}\",\r\n  \"name\": \"{{name_Pagopa}}\",\r\n  \"familyName\": \"{{familyName_Pagopa}}\",\r\n  \"email\": \"{{email_Pagopa}}\",\r\n  \"orgId\": \"{{orgId_Pagopa}}\",\r\n  \"orgVAT\": \"{{orgVAT_Pagopa}}\",\r\n  \"orgName\": \"Ente di test IdPay\",\r\n  \"orgPartyRole\": \"{{orgPartyRole_Pagopa}}\",\r\n  \"orgRole\": \"{{orgRole_Pagopa}}\"\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlToken}}/welfare/token/test",
													"host": [
														"{{baseUrlToken}}"
													],
													"path": [
														"welfare",
														"token",
														"test"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update initiative into APPROVED status",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Onboarding - Happy case - APP IO - Onboarding user with manual criteria - PagoPA Admin updates initiative status to APPROVED - status 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"//setTimeout(function(){}, 20000); //milliseconds"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalTokenPagopa}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrlInitiative}}/{{initiativeIdWithManualCriteria}}/approved",
													"host": [
														"{{baseUrlInitiative}}"
													],
													"path": [
														"{{initiativeIdWithManualCriteria}}",
														"approved"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "ENTE - Initiative PUBLISHED",
									"item": [
										{
											"name": "Generate Portal Token Copy",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"let textResponse = pm.response.text()\r",
															"\r",
															"pm.test('Onboarding - Happy case - APP IO - Onboarding user with manual criteria - Initiative creation - Generate Portal Token (Ente Admin)', () => {\r",
															"    //verify response HTTP status \r",
															"    pm.response.to.have.status(200);\r",
															"    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
															"});\r",
															"\r",
															"//response time is less than 1s\r",
															"tests[\"Response time is less than 1s\"] = responseTime < 1000;"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "default"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"aud\": \"idpay.welfare.pagopa.it\",\r\n  \"uid\": \"{{uid_Ente}}\",\r\n  \"name\": \"{{name_Ente}}\",\r\n  \"familyName\": \"{{familyName_Ente}}\",\r\n  \"email\": \"{{email_Ente}}\",\r\n  \"orgId\": \"{{orgId_Ente}}\",\r\n  \"orgVAT\": \"{{orgVAT_Ente}}\",\r\n  \"orgName\": \"Ente di test IdPay\",\r\n  \"orgPartyRole\": \"{{orgPartyRole_Ente}}\",\r\n  \"orgRole\": \"{{orgRole_Ente}}\"\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlToken}}/welfare/token/test",
													"host": [
														"{{baseUrlToken}}"
													],
													"path": [
														"welfare",
														"token",
														"test"
													]
												}
											},
											"response": []
										},
										{
											"name": "Initiative PUBLISHED",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Onboarding - Happy case - APP IO - Onboarding user with manual criteria - Ente Admin updates initiative status to PUBLISHED - status 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"/*let body;\r",
															"baseUrlInitiative = pm.variables.get('baseUrlInitiative')\r",
															"if(baseUrlInitiative.includes('localhost')){\r",
															"    body = {\r",
															"        mode: 'raw',\r",
															"        raw: JSON.stringify({\r",
															"            organizationName: 'Comune di Milano',\r",
															"            organizationFiscalCode: '11122233344',\r",
															"            organizationUserId: 'b8986bf2-1f93-4827-ab16-b21eb8aeae2b',\r",
															"            organizationUserRole: 'admin'\r",
															"        })\r",
															"    }\r",
															"    pm.request.headers.add({\r",
															"        key: \"Content-Type\",\r",
															"        value: \"application/json\"\r",
															"    });\r",
															"    pm.variables.set('body', JSON.stringify(body));\r",
															"    pm.request.body.update(body);\r",
															"}\r",
															"*/"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {}
											},
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "{{baseUrlInitiative}}/{{initiativeIdWithManualCriteria}}/published",
													"host": [
														"{{baseUrlInitiative}}"
													],
													"path": [
														"{{initiativeIdWithManualCriteria}}",
														"published"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Generate Token IO",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Onboarding - Happy case - APP IO - Onboarding user with manual criteria - Generate token IO', () => {\r",
													"    //verify response HTTP status \r",
													"    pm.response.to.have.status(200);\r",
													"    pm.collectionVariables.set(\"tokenIO\", pm.response.text());\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"setTimeout(() => {}, 5000);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{genericSubscriptionKey}}",
												"type": "default"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "default"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/rtd/mock-io/login?fiscalCode={{CF_fake}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"rtd",
												"mock-io",
												"login"
											],
											"query": [
												{
													"key": "fiscalCode",
													"value": "{{CF_fake}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Accept T&C",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Onboarding - Happy case - APP IO - Onboarding user with manual criteria - Accept T&C - Status 204\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"setTimeout(() => {}, 10000);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tokenIO}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{apimSubscriptionKey}}",
												"type": "text"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"initiativeId\" : \"{{initiativeIdWithManualCriteria}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/idpay/onboarding/",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"idpay",
												"onboarding",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "Prerequisites Check",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Onboarding - Happy case - APP IO - Onboarding user with manual criteria - Prerequisites check - Status 200 or 202\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200,202]);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tokenIO}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{apimSubscriptionKey}}",
												"type": "text"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"initiativeId\" : \"{{initiativeIdWithManualCriteria}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/idpay/onboarding/initiative",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"idpay",
												"onboarding",
												"initiative"
											]
										}
									},
									"response": []
								},
								{
									"name": "PDND + Autocertification",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Onboarding - Happy case - APP IO - Onboarding user with manual criteria - PDND + Autocertification - Status 202\", function () {\r",
													"    pm.response.to.have.status(202);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tokenIO}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"initiativeId\" : \"{{initiativeIdWithManualCriteria}}\",\r\n    \"pdndAccept\": true,\r\n    \"selfDeclarationList\": [\r\n         {\r\n     \"_type\": \"boolean\",\r\n      \"code\": \"1\",\r\n      \"accepted\": true\r\n    }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/idpay/onboarding/consent",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"idpay",
												"onboarding",
												"consent"
											]
										}
									},
									"response": []
								},
								{
									"name": "Status Onboarding - ok",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Onboarding - Happy case - APP IO - Onboarding user with manual criteria - Status Onboarding OK - Status 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"setTimeout(()=>{ \r",
													"\r",
													"pm.test(\"Onboarding status is ONBOARDING_OK or ON_EVALUATION\", function () {\r",
													"    let jsonResponse = pm.response.json()\r",
													"    pm.expect(jsonResponse.status).to.be.oneOf(['ONBOARDING_OK', 'ON_EVALUATION']);\r",
													"});\r",
													" },2000)"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tokenIO}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/idpay/onboarding/{{initiativeIdWithManualCriteria}}/status",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"idpay",
												"onboarding",
												"{{initiativeIdWithManualCriteria}}",
												"status"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Onboarding User with NF",
							"item": [
								{
									"name": "User ONBOARDING_OK and Family Member DEMANDED",
									"item": [
										{
											"name": "ENTE - Initiative creation",
											"item": [
												{
													"name": "Generate Portal Token",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"let textResponse = pm.response.text()\r",
																	"\r",
																	"pm.test('Onboarding - Happy case - APP IO - Onboarding user with NF - User ONBOARDING_OK and Family member DEMANDED - Initiative creation - Generate Portal Token (Ente Admin)', () => {\r",
																	"    //verify response HTTP status \r",
																	"    pm.response.to.have.status(200);\r",
																	"    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Ocp-Apim-Trace",
																"value": "true",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"aud\": \"idpay.welfare.pagopa.it\",\r\n    \"uid\": \"{{uid_Ente}}\",\r\n    \"name\": \"{{name_Ente}}\",\r\n    \"familyName\": \"{{familyName_Ente}}\",\r\n    \"email\": \"{{email_Ente}}\",\r\n    \"orgId\": \"{{orgId_Ente}}\",\r\n    \"orgVAT\": \"{{orgVAT_Ente}}\",\r\n    \"orgName\": \"Ente di test IdPay\",\r\n    \"orgPartyRole\": \"{{orgPartyRole_Ente}}\",\r\n    \"orgRole\": \"{{orgRole_Ente}}\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrlToken}}/welfare/token/test",
															"host": [
																"{{baseUrlToken}}"
															],
															"path": [
																"welfare",
																"token",
																"test"
															]
														}
													},
													"response": []
												},
												{
													"name": "STEP1-Insert Initiative (Service Info)",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"let moment = require('moment');\r",
																	"const now = String(moment().format('DD-MM-YYYY hh:mm'));\r",
																	"const serviceName = 'Test funzionali App IO Initiative with criteria NF ' + now;\r",
																	"pm.collectionVariables.set('serviceName', serviceName);\r",
																	"pm.collectionVariables.set('description', pm.variables.replaceIn('{{$randomLoremSentence}}'));\r",
																	"\r",
																	"pm.collectionVariables.set('channel_type', 'web');\r",
																	"pm.collectionVariables.set('channel_contact', 'https://www.google.it');"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var jsonData = JSON.parse(responseBody);\r",
																	"// console.log('jsondata', jsonData);\r",
																	"// console.log('jsondata.initiativeId', jsonData.initiativeId);\r",
																	"pm.collectionVariables.set('initiativeId', jsonData.initiativeId);\r",
																	"\r",
																	"pm.test(\"Onboarding - Happy case - APP IO - Onboarding user with NF - User ONBOARDING_OK and Family member DEMANDED - Initiative creation - STEP1 - Status test 201\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Onboarding - Happy case - APP IO - Onboarding user with NF - User ONBOARDING_OK and Family member DEMANDED - Initiative creation - STEP1 - Verify response body contains initiativeId\", function () {\r",
																	"    let jsonResponse = pm.response.json();\r",
																	"    pm.expect(jsonResponse).have.property(\"initiativeId\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{identityPortalToken}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"serviceIO\": true,\n    \"serviceName\": \"{{serviceName}}\",\n    \"serviceScope\": \"LOCAL\",\n    \"description\": \"{{description}}\",\n    \"privacyLink\": \"https://www.google.it\",\n    \"tcLink\": \"https://www.google.com\",\n    \"channels\": [\n        {\n            \"type\": \"{{channel_type}}\",\n            \"contact\": \"{{channel_contact}}\"\n        }\n    ]\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrlInitiative}}/info",
															"host": [
																"{{baseUrlInitiative}}"
															],
															"path": [
																"info"
															]
														},
														"description": "Save initiative and first subset of data 'general info'"
													},
													"response": []
												},
												{
													"name": "STEP2-Update Initiative (general Info)",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"let moment = require('moment');\r",
																	"//Format: YYYY-MM-DD\r",
																	"let today = String(moment().format('YYYY-MM-DD'));\r",
																	"let todayP1 = String(moment().add(1,'months').format('YYYY-MM-DD'));\r",
																	"let todayP2 = String(moment().add(2,'months').format('YYYY-MM-DD'));\r",
																	"let todayP3 = String(moment().add(3,'months').format('YYYY-MM-DD'));\r",
																	"\r",
																	"let yesterday = String(moment().subtract(1, 'days').format('YYYY-MM-DD'));\r",
																	"\r",
																	"\r",
																	"/*\r",
																	"var futureDate = pm.variables.replaceIn('{{$$randomDateFuture}}');\r",
																	"pm.collectionVariables.set('...', _.random(0, 180));\r",
																	"*/\r",
																	"//_.floor(_.random(1.0, 100000.0, true),2)\r",
																	"pm.collectionVariables.set('budget', _.floor(_.random(10000, 100000, true),2));\r",
																	"pm.collectionVariables.set('beneficiaryType', 'NF');\r",
																	"const familyUnitCompositionValue = [\"INPS\", \"ANPR\"];\r",
																	"familyUnitCompositionRandomIndex = _.random(0, familyUnitCompositionValue.length - 1);\r",
																	"const selectedFamilyUnitCompositionValue = familyUnitCompositionValue[familyUnitCompositionRandomIndex];\r",
																	"pm.collectionVariables.set('familyUnitComposition', selectedFamilyUnitCompositionValue);\r",
																	"//pm.collectionVariables.set('familyUnitComposition', 'INPS');\r",
																	"//pm.collectionVariables.set('beneficiaryKnown', pm.variables.replaceIn('{{$randomBoolean}}'));\r",
																	"pm.collectionVariables.set('beneficiaryKnown', false);\r",
																	"pm.collectionVariables.set('rankingEnabled', false);\r",
																	"pm.collectionVariables.set('beneficiaryBudget', pm.variables.replaceIn('{{$randomInt}}'));//default max 1000\r",
																	"pm.collectionVariables.set('rankingStartDate', today);\r",
																	"pm.collectionVariables.set('rankingEndDate', todayP1);\r",
																	"pm.collectionVariables.set('startDate', todayP2);\r",
																	"pm.collectionVariables.set('endDate', todayP3);"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Onboarding - Happy case - APP IO - Onboarding user with NF - User ONBOARDING_OK and Family member DEMANDED - Initiative creation - STEP2 - Status 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{identityPortalToken}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"budget\": {{budget}},\n    \"beneficiaryType\": \"{{beneficiaryType}}\",\n    \"familyUnitComposition\": \"{{familyUnitComposition}}\",\n    \"beneficiaryKnown\": {{beneficiaryKnown}},\n    \"rankingEnabled\": {{rankingEnabled}},\n    \"beneficiaryBudget\": {{beneficiaryBudget}},\n    \"rankingStartDate\": \"{{rankingStartDate}}\",\n    \"rankingEndDate\": \"{{rankingEndDate}}\",\n    \"startDate\": \"{{startDate}}\",\n    \"endDate\": \"{{endDate}}\",\n    \"descriptionMap\": {\n        \"it\": \"it\"\n    }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrlInitiative}}/:initiativeId/general",
															"host": [
																"{{baseUrlInitiative}}"
															],
															"path": [
																":initiativeId",
																"general"
															],
															"variable": [
																{
																	"key": "initiativeId",
																	"value": "{{initiativeId}}",
																	"description": "(Required) The initiative ID"
																}
															]
														},
														"description": "Save initiative and first subset of data 'general info'"
													},
													"response": []
												},
												{
													"name": "STEP3-Update Initiative (criteria)",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Onboarding - Happy case - APP IO - Onboarding user with NF - User ONBOARDING_OK and Family member DEMANDED - Initiative creation - STEP3 - Status 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{identityPortalToken}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"automatedCriteria\": [\r\n        {\r\n            \"authority\": \"INPS\",\r\n            \"code\": \"ISEE\",\r\n            \"operator\": \"GT\",\r\n            \"value\": \"1\",\r\n            \"value2\": \"\",\r\n            \"iseeTypes\": [\r\n                \"ORDINARIO\",\r\n                \"MINORENNE\",\r\n                \"UNIVERSITARIO\",\r\n                \"SOCIOSANITARIO\",\r\n                \"DOTTORATO\",\r\n                \"RESIDENZIALE\",\r\n                \"CORRENTE\"\r\n            ]\r\n        }\r\n    ],\r\n    \"selfDeclarationCriteria\": []\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrlInitiative}}/{{initiativeId}}/beneficiary",
															"host": [
																"{{baseUrlInitiative}}"
															],
															"path": [
																"{{initiativeId}}",
																"beneficiary"
															]
														}
													},
													"response": []
												},
												{
													"name": "STEP4-Update Initiative Trx-Reward rules",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Onboarding - Happy case - APP IO - Onboarding user with NF - User ONBOARDING_OK and Family member DEMANDED - Initiative creation - STEP4 - Status 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"setTimeout(()=> {}, 10000)\r",
																	"const d = new Date();\r",
																	"dateString = d.toISOString()\r",
																	"let endTime = dateString.split('T');\r",
																	"endTime = endTime[1].split('Z');\r",
																	"\r",
																	"pm.collectionVariables.set('rewardRuleType', 'rewardValue');\r",
																	"const rewardValueTypes = [\"PERCENTAGE\", \"ABSOLUTE\"];\r",
																	"rewardValueTypeRandomIndex = _.random(0, rewardValueTypes.length - 1);\r",
																	"const selectedRewardValueType = rewardValueTypes[rewardValueTypeRandomIndex];\r",
																	"pm.collectionVariables.set('rewardValueType', selectedRewardValueType);\r",
																	"if (selectedRewardValueType == \"PERCENTAGE\") {\r",
																	"    pm.collectionVariables.set('rewardRuleValue', 100);\r",
																	"} else {\r",
																	"    pm.collectionVariables.set('rewardRuleValue', 1);\r",
																	"}\r",
																	"\r",
																	"pm.collectionVariables.set('trxDaysOfWeek', pm.variables.replaceIn('{{$randomWeekday}}').toString().toUpperCase());\r",
																	"pm.collectionVariables.set('trxDayEndTime', endTime[0]);\r",
																	"pm.collectionVariables.set('trxThresholdFrom', 10);\r",
																	"pm.collectionVariables.set('trxThresholdTo', 50);\r",
																	"pm.collectionVariables.set('trxCountFrom', 3);\r",
																	"pm.collectionVariables.set('trxCountTo', 11);\r",
																	"pm.collectionVariables.set('trxRewardLimitFrequency', 'DAILY');\r",
																	"pm.collectionVariables.set('trxRewardLimitValue', 3);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{identityPortalToken}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"initiativeRewardType\": \"REFUND\",\n    \"rewardRule\": {\n        \"_type\": \"{{rewardRuleType}}\",\n        \"rewardValue\": {{rewardRuleValue}},\n        \"rewardValueType\": \"{{rewardValueType}}\"\n    },\n    \"trxRule\": {\n        \"daysOfWeek\": [\n            {\n                \"daysOfWeek\": [\n                    \"{{trxDaysOfWeek}}\"\n                ],\n                \"intervals\": [\n                    {\n                        \"startTime\": \"00:00:00.000\",\n                        \"endTime\": \"{{trxDayEndTime}}\"\n                    }\n                ]\n            }\n        ],\n        \"threshold\": {\n            \"from\": {{trxThresholdFrom}},\n            \"fromIncluded\": true,\n            \"to\": {{trxThresholdTo}},\n            \"toIncluded\": true\n        },\n        \"mccFilter\": {\n            \"allowedList\": true,\n            \"values\": [\n                \"0742\",\n                \"0743\",\n                \"0744\"\n            ]\n        },\n        \"trxCount\": {\n            \"from\": {{trxCountFrom}},\n            \"fromIncluded\": true,\n            \"to\": {{trxCountTo}},\n            \"toIncluded\": true\n        }\n    }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrlInitiative}}/:initiativeId/reward",
															"host": [
																"{{baseUrlInitiative}}"
															],
															"path": [
																":initiativeId",
																"reward"
															],
															"variable": [
																{
																	"key": "initiativeId",
																	"value": "{{initiativeId}}",
																	"description": "(Required) The initiative ID"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "STEP5-Update Initiative Refund Rule",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Onboarding - Happy case - APP IO - Onboarding user with NF - User ONBOARDING_OK and Family member DEMANDED - Initiative creation - STEP5 - Status 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"/*const timeType = [\"CLOSED\",\"DAILY\",\"WEEKLY\",\"MONTHLY\",\"QUARTERLY\"];\r",
																	"timeTypeRandomIndex = _.random(0, timeType.length-1);\r",
																	"\r",
																	"const accumulatedType = [\"BUDGET_EXHAUSTED\",\"THRESHOLD_REACHED\"];\r",
																	"accumulatedTypeRandomIndex = _.random(0, timeType.length-1);\r",
																	"\r",
																	"pm.collectionVariables.set('timeType', timeType[timeTypeRandomIndex]);\r",
																	"pm.collectionVariables.set('accumulatedType', accumulatedType[accumulatedTypeRandomIndex]);\r",
																	"pm.collectionVariables.set('identificationCode', pm.variables.replaceIn('{{$randomLoremSentence}}'));\r",
																	"*/\r",
																	"\r",
																	"\r",
																	"let refundType = [\"timeParameter\", \"accumulatedAmount\"];\r",
																	"refundTypeRandomIndex = _.random(0, refundType.length - 1);\r",
																	"\r",
																	"const refundTypeSelected = refundType[refundTypeRandomIndex];\r",
																	"let body = {};\r",
																	"if (refundTypeSelected == \"timeParameter\") {\r",
																	"    const timeType = [\"CLOSED\",\"DAILY\",\"WEEKLY\",\"MONTHLY\",\"QUARTERLY\"];\r",
																	"    timeTypeRandomIndex = _.random(0, timeType.length-1);\r",
																	"    body = {\r",
																	"        timeParameter: {\r",
																	"            timeType: timeType[timeTypeRandomIndex]\r",
																	"        }\r",
																	"    };\r",
																	"} else {\r",
																	"    const accumulatedType = [\"BUDGET_EXHAUSTED\", \"THRESHOLD_REACHED\"];\r",
																	"    accumulatedTypeRandomIndex = _.random(0, accumulatedType.length - 1);\r",
																	"    const accumulatedTypeSelected = accumulatedType[accumulatedTypeRandomIndex];\r",
																	"    if (accumulatedTypeSelected == \"BUDGET_EXHAUSTED\") {\r",
																	"        body = {\r",
																	"            accumulatedAmount: {\r",
																	"                accumulatedType: \"BUDGET_EXHAUSTED\"\r",
																	"            }\r",
																	"        };\r",
																	"    } else {\r",
																	"        body = {\r",
																	"            accumulatedAmount: {\r",
																	"                accumulatedType: \"THRESHOLD_REACHED\",\r",
																	"                refundThreshold: 10\r",
																	"            }\r",
																	"        };\r",
																	"    }\r",
																	"}\r",
																	"\r",
																	"pm.collectionVariables.set('body', JSON.stringify(body));"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{identityPortalToken}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{body}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrlInitiative}}/:initiativeId/refund",
															"host": [
																"{{baseUrlInitiative}}"
															],
															"path": [
																":initiativeId",
																"refund"
															],
															"variable": [
																{
																	"key": "initiativeId",
																	"value": "{{initiativeId}}",
																	"description": "(Required) The initiative ID"
																}
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "PAGOPA - Initiative update status APPROVED",
											"item": [
												{
													"name": "Generate Portal Token",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"let textResponse = pm.response.text()\r",
																	"\r",
																	"pm.test('Onboarding - Happy case - APP IO - Onboarding user with NF - User ONBOARDING_OK and Family member DEMANDED - Initiative creation - Generate Portal Token (PagoPA Admin)', () => {\r",
																	"    //verify response HTTP status \r",
																	"    pm.response.to.have.status(200);\r",
																	"    pm.collectionVariables.set(\"identityPortalTokenPagopa\", textResponse);\r",
																	"});\r",
																	"\r",
																	"//response time is less than 1s\r",
																	"tests[\"Response time is less than 1s\"] = responseTime < 1000;"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Ocp-Apim-Trace",
																"value": "true",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"aud\": \"idpay.welfare.pagopa.it\",\r\n  \"uid\": \"{{uid_Pagopa}}\",\r\n  \"name\": \"{{name_Pagopa}}\",\r\n  \"familyName\": \"{{familyName_Pagopa}}\",\r\n  \"email\": \"{{email_Pagopa}}\",\r\n  \"orgId\": \"{{orgId_Pagopa}}\",\r\n  \"orgVAT\": \"{{orgVAT_Pagopa}}\",\r\n  \"orgName\": \"Ente di test IdPay\",\r\n  \"orgPartyRole\": \"{{orgPartyRole_Pagopa}}\",\r\n  \"orgRole\": \"{{orgRole_Pagopa}}\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrlToken}}/welfare/token/test",
															"host": [
																"{{baseUrlToken}}"
															],
															"path": [
																"welfare",
																"token",
																"test"
															]
														}
													},
													"response": []
												},
												{
													"name": "Update initiative into APPROVED status",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Onboarding - Happy case - APP IO - Onboarding user with NF - User ONBOARDING_OK and Family member DEMANDED - PagoPA Admin updates initiative status to APPROVED - status 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"//setTimeout(function(){}, 20000); //milliseconds"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{identityPortalTokenPagopa}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrlInitiative}}/{{initiativeId}}/approved",
															"host": [
																"{{baseUrlInitiative}}"
															],
															"path": [
																"{{initiativeId}}",
																"approved"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "ENTE - Initiative PUBLISHED",
											"item": [
												{
													"name": "Generate Portal Token",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"let textResponse = pm.response.text()\r",
																	"\r",
																	"pm.test('Onboarding - Happy case - APP IO - Onboarding user with NF - User ONBOARDING_OK and Family member DEMANDED - Initiative pubblication - Generate Portal Token (Ente Admin)', () => {\r",
																	"    //verify response HTTP status \r",
																	"    pm.response.to.have.status(200);\r",
																	"    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
																	"});\r",
																	"\r",
																	"//response time is less than 1s\r",
																	"tests[\"Response time is less than 1s\"] = responseTime < 1000;"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Ocp-Apim-Trace",
																"value": "true",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"aud\": \"idpay.welfare.pagopa.it\",\r\n    \"uid\": \"{{uid_Ente}}\",\r\n    \"name\": \"{{name_Ente}}\",\r\n    \"familyName\": \"{{familyName_Ente}}\",\r\n    \"email\": \"{{email_Ente}}\",\r\n    \"orgId\": \"{{orgId_Ente}}\",\r\n    \"orgVAT\": \"{{orgVAT_Ente}}\",\r\n    \"orgName\": \"Ente di test IdPay\",\r\n    \"orgPartyRole\": \"{{orgPartyRole_Ente}}\",\r\n    \"orgRole\": \"{{orgRole_Ente}}\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrlToken}}/welfare/token/test",
															"host": [
																"{{baseUrlToken}}"
															],
															"path": [
																"welfare",
																"token",
																"test"
															]
														}
													},
													"response": []
												},
												{
													"name": "Initiative PUBLISHED",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Onboarding - Happy case - APP IO - Onboarding user with NF - User ONBOARDING_OK and Family member DEMANDED - Initiative pubblication - Ente Admin updates initiative status into PUBLISHED -(Responses with 204)\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"/*let body;\r",
																	"baseUrlInitiative = pm.variables.get('baseUrlInitiative')\r",
																	"if(baseUrlInitiative.includes('localhost')){\r",
																	"    body = {\r",
																	"        mode: 'raw',\r",
																	"        raw: JSON.stringify({\r",
																	"            organizationName: 'Comune di Milano',\r",
																	"            organizationFiscalCode: '11122233344',\r",
																	"            organizationUserId: 'b8986bf2-1f93-4827-ab16-b21eb8aeae2b',\r",
																	"            organizationUserRole: 'admin'\r",
																	"        })\r",
																	"    }\r",
																	"    pm.request.headers.add({\r",
																	"        key: \"Content-Type\",\r",
																	"        value: \"application/json\"\r",
																	"    });\r",
																	"    pm.variables.set('body', JSON.stringify(body));\r",
																	"    pm.request.body.update(body);\r",
																	"}\r",
																	"*/"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {}
													},
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{identityPortalToken}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [],
														"url": {
															"raw": "{{baseUrlInitiative}}/{{initiativeId}}/published",
															"host": [
																"{{baseUrlInitiative}}"
															],
															"path": [
																"{{initiativeId}}",
																"published"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Generate Token IO",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test('Onboarding - Happy case - APP IO - Onboarding user with NF - User ONBOARDING_OK and Family member DEMANDED - Generate token IO', () => {\r",
															"    //verify response HTTP status \r",
															"    pm.response.to.have.status(200);\r",
															"    pm.collectionVariables.set(\"tokenIO\", pm.response.text());\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"//setTimeout(()=> {}, 30000)"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Ocp-Apim-Subscription-Key",
														"value": "{{genericSubscriptionKey}}",
														"type": "default"
													},
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "default"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/rtd/mock-io/login?fiscalCode={{CF_FAKE_1}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"rtd",
														"mock-io",
														"login"
													],
													"query": [
														{
															"key": "fiscalCode",
															"value": "{{CF_FAKE_1}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Accept T&C",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Onboarding - Happy case - APP IO - Onboarding user with NF - User ONBOARDING_OK and Family member DEMANDED - Accept T&C - Status 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"setTimeout(()=> {}, 10000)"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{tokenIO}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Ocp-Apim-Subscription-Key",
														"value": "{{apimSubscriptionKey}}",
														"type": "text"
													},
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/idpay/onboarding/",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"idpay",
														"onboarding",
														""
													]
												}
											},
											"response": []
										},
										{
											"name": "Prerequisites Check",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Onboarding - Happy case - APP IO - Onboarding user with NF - User ONBOARDING_OK and Family member DEMANDED - Prerequisites check - Status 200 or 202\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200,202]);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{tokenIO}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Ocp-Apim-Subscription-Key",
														"value": "{{apimSubscriptionKey}}",
														"type": "text"
													},
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/idpay/onboarding/initiative",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"idpay",
														"onboarding",
														"initiative"
													]
												}
											},
											"response": []
										},
										{
											"name": "PDND + Autocertification",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Onboarding - Happy case - APP IO - Onboarding user with NF - User ONBOARDING_OK and Family member DEMANDED - PDND + Autocertification - Status 202\", function () {\r",
															"    pm.response.to.have.status(202);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{tokenIO}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\",\r\n    \"pdndAccept\": true,\r\n    \"selfDeclarationList\": []\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/idpay/onboarding/consent",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"idpay",
														"onboarding",
														"consent"
													]
												}
											},
											"response": []
										},
										{
											"name": "Status Onboarding - ok",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Onboarding - Happy case - APP IO - Onboarding user with NF - User ONBOARDING_OK and Family member DEMANDED - Status Onboarding OK - Status 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"setTimeout(()=>{ \r",
															"\r",
															"pm.test(\"Onboarding status is ONBOARDING_OK or ON_EVALUATION\", function () {\r",
															"    let jsonResponse = pm.response.json()\r",
															"    pm.expect(jsonResponse.status).to.be.oneOf(['ONBOARDING_OK', 'ON_EVALUATION']);\r",
															"});\r",
															" },2000)"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{tokenIO}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/idpay/onboarding/{{initiativeId}}/status",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"idpay",
														"onboarding",
														"{{initiativeId}}",
														"status"
													]
												}
											},
											"response": []
										},
										{
											"name": "Generate Portal Token",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"let textResponse = pm.response.text()\r",
															"\r",
															"pm.test('Onboarding - Happy case - APP IO - Onboarding user with NF - User ONBOARDING_OK and Family member DEMANDED - Initiative creation - Generate Portal Token (Ente Admin)', () => {\r",
															"    //verify response HTTP status \r",
															"    pm.response.to.have.status(200);\r",
															"    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "default"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"aud\": \"idpay.welfare.pagopa.it\",\r\n    \"uid\": \"{{uid_Ente}}\",\r\n    \"name\": \"{{name_Ente}}\",\r\n    \"familyName\": \"{{familyName_Ente}}\",\r\n    \"email\": \"{{email_Ente}}\",\r\n    \"orgId\": \"{{orgId_Ente}}\",\r\n    \"orgVAT\": \"{{orgVAT_Ente}}\",\r\n    \"orgName\": \"Ente di test IdPay\",\r\n    \"orgPartyRole\": \"{{orgPartyRole_Ente}}\",\r\n    \"orgRole\": \"{{orgRole_Ente}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlToken}}/welfare/token/test",
													"host": [
														"{{baseUrlToken}}"
													],
													"path": [
														"welfare",
														"token",
														"test"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get family unit composition",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Onboarding - Happy case - APP IO - Onboarding user with NF - User ONBOARDING_OK and Family member DEMANDED - Get family unit composition OK - Status 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Onboarding - Happy case - APP IO - Onboarding user with NF - User ONBOARDING_OK and Family member DEMANDED - Get family unit composition OK -  checking ONBOARDING_OK status is present\", function () {\r",
															"     let jsonResponse = pm.response.json()\r",
															"     const foundStatusOk = jsonResponse.usersList.some((item) =>{\r",
															"         return item.status === \"ONBOARDING_OK\"\r",
															"     });\r",
															"    pm.expect(foundStatusOk).equals(true); \r",
															"});\r",
															"\r",
															"pm.test(\"Onboarding - Happy case - APP IO - Onboarding user with NF - User ONBOARDING_OK and Family member DEMANDED - Get family unit composition OK -  checking DEMANDED status is present\", function () {\r",
															"     let jsonResponse = pm.response.json()\r",
															"     const foundStatusDem = jsonResponse.usersList.some((item) =>{\r",
															"         return item.status === \"DEMANDED\"\r",
															"     });\r",
															"    pm.expect(foundStatusDem).equals(true); \r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"setTimeout(function(){}, 20000);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "Fiscal-Code",
														"value": "{{CF_FAKE_1}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/idpay/initiative/{{initiativeId}}/beneficiary/family",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"idpay",
														"initiative",
														"{{initiativeId}}",
														"beneficiary",
														"family"
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete Initiative",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Onboarding - Happy Case - APP IO - Onboarding user with NF - User ONBOARDING_OK and Family member DEMANDED - Delete Initiative - Status test 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{AKSAPIServerUrlGeneric}}idpayportalwelfarebackendinitiative/idpay/initiative/{{initiativeId}}",
													"host": [
														"{{AKSAPIServerUrlGeneric}}idpayportalwelfarebackendinitiative"
													],
													"path": [
														"idpay",
														"initiative",
														"{{initiativeId}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Single User ONBOARDING_OK and Family Member DEMANDED not present",
									"item": [
										{
											"name": "ENTE - Initiative creation",
											"item": [
												{
													"name": "Generate Portal Token",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"let textResponse = pm.response.text()\r",
																	"\r",
																	"pm.test('Onboarding - Happy case - APP IO - Onboarding user with NF - Single User ONBOARDING_OK and Family member DEMANDED not present - Initiative creation - Generate Portal Token (Ente Admin)', () => {\r",
																	"    //verify response HTTP status \r",
																	"    pm.response.to.have.status(200);\r",
																	"    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Ocp-Apim-Trace",
																"value": "true",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"aud\": \"idpay.welfare.pagopa.it\",\r\n    \"uid\": \"{{uid_Ente}}\",\r\n    \"name\": \"{{name_Ente}}\",\r\n    \"familyName\": \"{{familyName_Ente}}\",\r\n    \"email\": \"{{email_Ente}}\",\r\n    \"orgId\": \"{{orgId_Ente}}\",\r\n    \"orgVAT\": \"{{orgVAT_Ente}}\",\r\n    \"orgName\": \"Ente di test IdPay\",\r\n    \"orgPartyRole\": \"{{orgPartyRole_Ente}}\",\r\n    \"orgRole\": \"{{orgRole_Ente}}\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrlToken}}/welfare/token/test",
															"host": [
																"{{baseUrlToken}}"
															],
															"path": [
																"welfare",
																"token",
																"test"
															]
														}
													},
													"response": []
												},
												{
													"name": "STEP1-Insert Initiative (Service Info)",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"let moment = require('moment');\r",
																	"const now = String(moment().format('DD-MM-YYYY hh:mm'));\r",
																	"const serviceName = 'Test funzionali App IO Initiative with criteria NF ' + now;\r",
																	"pm.collectionVariables.set('serviceName', serviceName);\r",
																	"pm.collectionVariables.set('description', pm.variables.replaceIn('{{$randomLoremSentence}}'));\r",
																	"\r",
																	"pm.collectionVariables.set('channel_type', 'web');\r",
																	"pm.collectionVariables.set('channel_contact', 'https://www.google.it');"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var jsonData = JSON.parse(responseBody);\r",
																	"// console.log('jsondata', jsonData);\r",
																	"// console.log('jsondata.initiativeId', jsonData.initiativeId);\r",
																	"pm.collectionVariables.set('initiativeId', jsonData.initiativeId);\r",
																	"\r",
																	"pm.test(\"Onboarding - Happy case - APP IO - Onboarding user with NF - Single User ONBOARDING_OK and Family member DEMANDED not present - Initiative creation - STEP1 - Status test 201\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Verify response body\", function () {\r",
																	"    let jsonResponse = pm.response.json();\r",
																	"    pm.expect(jsonResponse).have.property(\"initiativeId\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{identityPortalToken}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"serviceIO\": true,\n    \"serviceName\": \"{{serviceName}}\",\n    \"serviceScope\": \"LOCAL\",\n    \"description\": \"{{description}}\",\n    \"privacyLink\": \"https://www.google.it\",\n    \"tcLink\": \"https://www.google.com\",\n    \"channels\": [\n        {\n            \"type\": \"{{channel_type}}\",\n            \"contact\": \"{{channel_contact}}\"\n        }\n    ]\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrlInitiative}}/info",
															"host": [
																"{{baseUrlInitiative}}"
															],
															"path": [
																"info"
															]
														},
														"description": "Save initiative and first subset of data 'general info'"
													},
													"response": []
												},
												{
													"name": "STEP2-Update Initiative (general Info)",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"let moment = require('moment');\r",
																	"//Format: YYYY-MM-DD\r",
																	"let today = String(moment().format('YYYY-MM-DD'));\r",
																	"let todayP1 = String(moment().add(1,'months').format('YYYY-MM-DD'));\r",
																	"let todayP2 = String(moment().add(2,'months').format('YYYY-MM-DD'));\r",
																	"let todayP3 = String(moment().add(3,'months').format('YYYY-MM-DD'));\r",
																	"\r",
																	"let yesterday = String(moment().subtract(1, 'days').format('YYYY-MM-DD'));\r",
																	"\r",
																	"\r",
																	"/*\r",
																	"var futureDate = pm.variables.replaceIn('{{$$randomDateFuture}}');\r",
																	"pm.collectionVariables.set('...', _.random(0, 180));\r",
																	"*/\r",
																	"//_.floor(_.random(1.0, 100000.0, true),2)\r",
																	"pm.collectionVariables.set('budget', _.floor(_.random(10000, 100000, true),2));\r",
																	"pm.collectionVariables.set('beneficiaryType', 'NF');\r",
																	"const familyUnitCompositionValue = [\"INPS\", \"ANPR\"];\r",
																	"familyUnitCompositionRandomIndex = _.random(0, familyUnitCompositionValue.length - 1);\r",
																	"const selectedFamilyUnitCompositionValue = familyUnitCompositionValue[familyUnitCompositionRandomIndex];\r",
																	"pm.collectionVariables.set('familyUnitComposition', selectedFamilyUnitCompositionValue);\r",
																	"//pm.collectionVariables.set('familyUnitComposition', 'INPS');\r",
																	"//pm.collectionVariables.set('beneficiaryKnown', pm.variables.replaceIn('{{$randomBoolean}}'));\r",
																	"pm.collectionVariables.set('beneficiaryKnown', false);\r",
																	"pm.collectionVariables.set('rankingEnabled', false);\r",
																	"pm.collectionVariables.set('beneficiaryBudget', pm.variables.replaceIn('{{$randomInt}}'));//default max 1000\r",
																	"pm.collectionVariables.set('rankingStartDate', today);\r",
																	"pm.collectionVariables.set('rankingEndDate', todayP1);\r",
																	"pm.collectionVariables.set('startDate', todayP2);\r",
																	"pm.collectionVariables.set('endDate', todayP3);"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Onboarding - Happy case - APP IO - Onboarding user with NF - Single User ONBOARDING_OK and Family member DEMANDED not present - Initiative creation - STEP2 - Status 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{identityPortalToken}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"budget\": {{budget}},\n    \"beneficiaryType\": \"{{beneficiaryType}}\",\n    \"familyUnitComposition\": \"{{familyUnitComposition}}\",\n    \"beneficiaryKnown\": {{beneficiaryKnown}},\n    \"rankingEnabled\": {{rankingEnabled}},\n    \"beneficiaryBudget\": {{beneficiaryBudget}},\n    \"rankingStartDate\": \"{{rankingStartDate}}\",\n    \"rankingEndDate\": \"{{rankingEndDate}}\",\n    \"startDate\": \"{{startDate}}\",\n    \"endDate\": \"{{endDate}}\",\n    \"descriptionMap\": {\n        \"it\": \"it\"\n    }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrlInitiative}}/:initiativeId/general",
															"host": [
																"{{baseUrlInitiative}}"
															],
															"path": [
																":initiativeId",
																"general"
															],
															"variable": [
																{
																	"key": "initiativeId",
																	"value": "{{initiativeId}}",
																	"description": "(Required) The initiative ID"
																}
															]
														},
														"description": "Save initiative and first subset of data 'general info'"
													},
													"response": []
												},
												{
													"name": "STEP3-Update Initiative (criteria)",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Onboarding - Happy case - APP IO - Onboarding user with NF - Single User ONBOARDING_OK and Family member DEMANDED not present - Initiative creation - STEP3 - Status 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{identityPortalToken}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"automatedCriteria\": [\r\n        {\r\n            \"authority\": \"INPS\",\r\n            \"code\": \"ISEE\",\r\n            \"operator\": \"GT\",\r\n            \"value\": \"1\",\r\n            \"value2\": \"\",\r\n            \"iseeTypes\": [\r\n                \"ORDINARIO\",\r\n                \"MINORENNE\",\r\n                \"UNIVERSITARIO\",\r\n                \"SOCIOSANITARIO\",\r\n                \"DOTTORATO\",\r\n                \"RESIDENZIALE\",\r\n                \"CORRENTE\"\r\n            ]\r\n        }\r\n    ],\r\n    \"selfDeclarationCriteria\": []\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrlInitiative}}/{{initiativeId}}/beneficiary",
															"host": [
																"{{baseUrlInitiative}}"
															],
															"path": [
																"{{initiativeId}}",
																"beneficiary"
															]
														}
													},
													"response": []
												},
												{
													"name": "STEP4-Update Initiative Trx-Reward rules",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Onboarding - Happy case - APP IO - Onboarding user with NF - Single User ONBOARDING_OK and Family member DEMANDED not present - Initiative creation - STEP4 - Status 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"setTimeout(()=> {}, 10000)\r",
																	"const d = new Date();\r",
																	"dateString = d.toISOString()\r",
																	"let endTime = dateString.split('T');\r",
																	"endTime = endTime[1].split('Z');\r",
																	"\r",
																	"pm.collectionVariables.set('rewardRuleType', 'rewardValue');\r",
																	"const rewardValueTypes = [\"PERCENTAGE\", \"ABSOLUTE\"];\r",
																	"rewardValueTypeRandomIndex = _.random(0, rewardValueTypes.length - 1);\r",
																	"const selectedRewardValueType = rewardValueTypes[rewardValueTypeRandomIndex];\r",
																	"pm.collectionVariables.set('rewardValueType', selectedRewardValueType);\r",
																	"if (selectedRewardValueType == \"PERCENTAGE\") {\r",
																	"    pm.collectionVariables.set('rewardRuleValue', 100);\r",
																	"} else {\r",
																	"    pm.collectionVariables.set('rewardRuleValue', 1);\r",
																	"}\r",
																	"\r",
																	"pm.collectionVariables.set('trxDaysOfWeek', pm.variables.replaceIn('{{$randomWeekday}}').toString().toUpperCase());\r",
																	"pm.collectionVariables.set('trxDayEndTime', endTime[0]);\r",
																	"pm.collectionVariables.set('trxThresholdFrom', 10);\r",
																	"pm.collectionVariables.set('trxThresholdTo', 50);\r",
																	"pm.collectionVariables.set('trxCountFrom', 3);\r",
																	"pm.collectionVariables.set('trxCountTo', 11);\r",
																	"pm.collectionVariables.set('trxRewardLimitFrequency', 'DAILY');\r",
																	"pm.collectionVariables.set('trxRewardLimitValue', 3);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{identityPortalToken}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"initiativeRewardType\": \"REFUND\",\n    \"rewardRule\": {\n        \"_type\": \"{{rewardRuleType}}\",\n        \"rewardValue\": {{rewardRuleValue}},\n        \"rewardValueType\": \"{{rewardValueType}}\"\n    },\n    \"trxRule\": {\n        \"daysOfWeek\": [\n            {\n                \"daysOfWeek\": [\n                    \"{{trxDaysOfWeek}}\"\n                ],\n                \"intervals\": [\n                    {\n                        \"startTime\": \"00:00:00.000\",\n                        \"endTime\": \"{{trxDayEndTime}}\"\n                    }\n                ]\n            }\n        ],\n        \"threshold\": {\n            \"from\": {{trxThresholdFrom}},\n            \"fromIncluded\": true,\n            \"to\": {{trxThresholdTo}},\n            \"toIncluded\": true\n        },\n        \"mccFilter\": {\n            \"allowedList\": true,\n            \"values\": [\n                \"0742\",\n                \"0743\",\n                \"0744\"\n            ]\n        },\n        \"trxCount\": {\n            \"from\": {{trxCountFrom}},\n            \"fromIncluded\": true,\n            \"to\": {{trxCountTo}},\n            \"toIncluded\": true\n        }\n    }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrlInitiative}}/:initiativeId/reward",
															"host": [
																"{{baseUrlInitiative}}"
															],
															"path": [
																":initiativeId",
																"reward"
															],
															"variable": [
																{
																	"key": "initiativeId",
																	"value": "{{initiativeId}}",
																	"description": "(Required) The initiative ID"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "STEP5-Update Initiative Refund Rule",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Onboarding - Happy case - APP IO - Onboarding user with NF - Single User ONBOARDING_OK and Family member DEMANDED not present - Initiative creation - STEP5 - Status 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"/*const timeType = [\"CLOSED\",\"DAILY\",\"WEEKLY\",\"MONTHLY\",\"QUARTERLY\"];\r",
																	"timeTypeRandomIndex = _.random(0, timeType.length-1);\r",
																	"\r",
																	"const accumulatedType = [\"BUDGET_EXHAUSTED\",\"THRESHOLD_REACHED\"];\r",
																	"accumulatedTypeRandomIndex = _.random(0, timeType.length-1);\r",
																	"\r",
																	"pm.collectionVariables.set('timeType', timeType[timeTypeRandomIndex]);\r",
																	"pm.collectionVariables.set('accumulatedType', accumulatedType[accumulatedTypeRandomIndex]);\r",
																	"pm.collectionVariables.set('identificationCode', pm.variables.replaceIn('{{$randomLoremSentence}}'));\r",
																	"*/\r",
																	"\r",
																	"\r",
																	"let refundType = [\"timeParameter\", \"accumulatedAmount\"];\r",
																	"refundTypeRandomIndex = _.random(0, refundType.length - 1);\r",
																	"\r",
																	"const refundTypeSelected = refundType[refundTypeRandomIndex];\r",
																	"let body = {};\r",
																	"if (refundTypeSelected == \"timeParameter\") {\r",
																	"    const timeType = [\"CLOSED\",\"DAILY\",\"WEEKLY\",\"MONTHLY\",\"QUARTERLY\"];\r",
																	"    timeTypeRandomIndex = _.random(0, timeType.length-1);\r",
																	"    body = {\r",
																	"        timeParameter: {\r",
																	"            timeType: timeType[timeTypeRandomIndex]\r",
																	"        }\r",
																	"    };\r",
																	"} else {\r",
																	"    const accumulatedType = [\"BUDGET_EXHAUSTED\", \"THRESHOLD_REACHED\"];\r",
																	"    accumulatedTypeRandomIndex = _.random(0, accumulatedType.length - 1);\r",
																	"    const accumulatedTypeSelected = accumulatedType[accumulatedTypeRandomIndex];\r",
																	"    if (accumulatedTypeSelected == \"BUDGET_EXHAUSTED\") {\r",
																	"        body = {\r",
																	"            accumulatedAmount: {\r",
																	"                accumulatedType: \"BUDGET_EXHAUSTED\"\r",
																	"            }\r",
																	"        };\r",
																	"    } else {\r",
																	"        body = {\r",
																	"            accumulatedAmount: {\r",
																	"                accumulatedType: \"THRESHOLD_REACHED\",\r",
																	"                refundThreshold: 10\r",
																	"            }\r",
																	"        };\r",
																	"    }\r",
																	"}\r",
																	"\r",
																	"pm.collectionVariables.set('body', JSON.stringify(body));"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{identityPortalToken}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{body}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrlInitiative}}/:initiativeId/refund",
															"host": [
																"{{baseUrlInitiative}}"
															],
															"path": [
																":initiativeId",
																"refund"
															],
															"variable": [
																{
																	"key": "initiativeId",
																	"value": "{{initiativeId}}",
																	"description": "(Required) The initiative ID"
																}
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "PAGOPA - Initiative update status APPROVED",
											"item": [
												{
													"name": "Generate Portal Token",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"let textResponse = pm.response.text()\r",
																	"\r",
																	"pm.test('Onboarding - Happy case - APP IO - Onboarding user with NF - Single User ONBOARDING_OK and Family member DEMANDED not present - Initiative creation - Generate Portal Token (PagoPA Admin)', () => {\r",
																	"    //verify response HTTP status \r",
																	"    pm.response.to.have.status(200);\r",
																	"    pm.collectionVariables.set(\"identityPortalTokenPagopa\", textResponse);\r",
																	"});\r",
																	"\r",
																	"//response time is less than 1s\r",
																	"tests[\"Response time is less than 1s\"] = responseTime < 1000;"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Ocp-Apim-Trace",
																"value": "true",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"aud\": \"idpay.welfare.pagopa.it\",\r\n  \"uid\": \"{{uid_Pagopa}}\",\r\n  \"name\": \"{{name_Pagopa}}\",\r\n  \"familyName\": \"{{familyName_Pagopa}}\",\r\n  \"email\": \"{{email_Pagopa}}\",\r\n  \"orgId\": \"{{orgId_Pagopa}}\",\r\n  \"orgVAT\": \"{{orgVAT_Pagopa}}\",\r\n  \"orgName\": \"Ente di test IdPay\",\r\n  \"orgPartyRole\": \"{{orgPartyRole_Pagopa}}\",\r\n  \"orgRole\": \"{{orgRole_Pagopa}}\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrlToken}}/welfare/token/test",
															"host": [
																"{{baseUrlToken}}"
															],
															"path": [
																"welfare",
																"token",
																"test"
															]
														}
													},
													"response": []
												},
												{
													"name": "Update initiative into APPROVED status",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Onboarding - Happy case - APP IO - Onboarding user with NF - Single User ONBOARDING_OK and Family member DEMANDED not present - PagoPA Admin updates initiative status to APPROVED - status 204)\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"//setTimeout(function(){}, 20000); //milliseconds"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{identityPortalTokenPagopa}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrlInitiative}}/{{initiativeId}}/approved",
															"host": [
																"{{baseUrlInitiative}}"
															],
															"path": [
																"{{initiativeId}}",
																"approved"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "ENTE - Initiative PUBLISHED",
											"item": [
												{
													"name": "Generate Portal Token",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"let textResponse = pm.response.text()\r",
																	"\r",
																	"pm.test('Onboarding - Happy case - APP IO - Onboarding user with NF - Single User ONBOARDING_OK and Family member DEMANDED not present - Initiative pubblication - Generate Portal Token (Ente Admin)', () => {\r",
																	"    //verify response HTTP status \r",
																	"    pm.response.to.have.status(200);\r",
																	"    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
																	"});\r",
																	"\r",
																	"//response time is less than 1s\r",
																	"tests[\"Response time is less than 1s\"] = responseTime < 1000;"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Ocp-Apim-Trace",
																"value": "true",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"aud\": \"idpay.welfare.pagopa.it\",\r\n    \"uid\": \"{{uid_Ente}}\",\r\n    \"name\": \"{{name_Ente}}\",\r\n    \"familyName\": \"{{familyName_Ente}}\",\r\n    \"email\": \"{{email_Ente}}\",\r\n    \"orgId\": \"{{orgId_Ente}}\",\r\n    \"orgVAT\": \"{{orgVAT_Ente}}\",\r\n    \"orgName\": \"Ente di test IdPay\",\r\n    \"orgPartyRole\": \"{{orgPartyRole_Ente}}\",\r\n    \"orgRole\": \"{{orgRole_Ente}}\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrlToken}}/welfare/token/test",
															"host": [
																"{{baseUrlToken}}"
															],
															"path": [
																"welfare",
																"token",
																"test"
															]
														}
													},
													"response": []
												},
												{
													"name": "Initiative PUBLISHED",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Onboarding - Happy case - APP IO - Onboarding user with NF - Single User ONBOARDING_OK and Family member DEMANDED not present - Initiative pubblication - Ente Admin updates initiative status into PUBLISHED -(Responses with 204)\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"/*let body;\r",
																	"baseUrlInitiative = pm.variables.get('baseUrlInitiative')\r",
																	"if(baseUrlInitiative.includes('localhost')){\r",
																	"    body = {\r",
																	"        mode: 'raw',\r",
																	"        raw: JSON.stringify({\r",
																	"            organizationName: 'Comune di Milano',\r",
																	"            organizationFiscalCode: '11122233344',\r",
																	"            organizationUserId: 'b8986bf2-1f93-4827-ab16-b21eb8aeae2b',\r",
																	"            organizationUserRole: 'admin'\r",
																	"        })\r",
																	"    }\r",
																	"    pm.request.headers.add({\r",
																	"        key: \"Content-Type\",\r",
																	"        value: \"application/json\"\r",
																	"    });\r",
																	"    pm.variables.set('body', JSON.stringify(body));\r",
																	"    pm.request.body.update(body);\r",
																	"}\r",
																	"*/"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {}
													},
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{identityPortalToken}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [],
														"url": {
															"raw": "{{baseUrlInitiative}}/{{initiativeId}}/published",
															"host": [
																"{{baseUrlInitiative}}"
															],
															"path": [
																"{{initiativeId}}",
																"published"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Generate Token IO",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test('Onboarding - Happy case - APP IO - Onboarding user with NF - Single User ONBOARDING_OK and Family member DEMANDED not present - Generate token IO', () => {\r",
															"    //verify response HTTP status \r",
															"    pm.response.to.have.status(200);\r",
															"    pm.collectionVariables.set(\"tokenIO\", pm.response.text());\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"setTimeout(()=> {}, 5000)"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Ocp-Apim-Subscription-Key",
														"value": "{{genericSubscriptionKey}}",
														"type": "default"
													},
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "default"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/rtd/mock-io/login?fiscalCode={{CF_fake}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"rtd",
														"mock-io",
														"login"
													],
													"query": [
														{
															"key": "fiscalCode",
															"value": "{{CF_fake}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Accept T&C",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Onboarding - Happy case - APP IO - Onboarding user with NF - Single User ONBOARDING_OK and Family member DEMANDED not present - Accept T&C - Status 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"setTimeout(()=> {}, 10000)"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{tokenIO}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Ocp-Apim-Subscription-Key",
														"value": "{{apimSubscriptionKey}}",
														"type": "text"
													},
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/idpay/onboarding/",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"idpay",
														"onboarding",
														""
													]
												}
											},
											"response": []
										},
										{
											"name": "Prerequisites Check",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Onboarding - Happy case - APP IO - Onboarding user with NF - Single User ONBOARDING_OK and Family member DEMANDED not present - Prerequisites check - Status 200 or 202\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200,202]);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{tokenIO}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Ocp-Apim-Subscription-Key",
														"value": "{{apimSubscriptionKey}}",
														"type": "text"
													},
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/idpay/onboarding/initiative",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"idpay",
														"onboarding",
														"initiative"
													]
												}
											},
											"response": []
										},
										{
											"name": "PDND + Autocertification",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Onboarding - Happy case - APP IO - Onboarding user with NF - Single User ONBOARDING_OK and Family member DEMANDED not present - PDND + Autocertification - Status 202\", function () {\r",
															"    pm.response.to.have.status(202);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{tokenIO}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\",\r\n    \"pdndAccept\": true,\r\n    \"selfDeclarationList\": []\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/idpay/onboarding/consent",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"idpay",
														"onboarding",
														"consent"
													]
												}
											},
											"response": []
										},
										{
											"name": "Status Onboarding - ok",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Onboarding - Happy case - APP IO - Onboarding user with NF - Single User ONBOARDING_OK and Family member DEMANDED not present - Status Onboarding OK - Status 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"setTimeout(()=>{ \r",
															"\r",
															"pm.test(\"Onboarding status is ONBOARDING_OK or ON_EVALUATION\", function () {\r",
															"    let jsonResponse = pm.response.json()\r",
															"    pm.expect(jsonResponse.status).to.be.oneOf(['ONBOARDING_OK', 'ON_EVALUATION']);\r",
															"});\r",
															" },2000)"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{tokenIO}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/idpay/onboarding/{{initiativeId}}/status",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"idpay",
														"onboarding",
														"{{initiativeId}}",
														"status"
													]
												}
											},
											"response": []
										},
										{
											"name": "Generate Portal Token",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"let textResponse = pm.response.text()\r",
															"\r",
															"pm.test('Onboarding - Happy case - APP IO - Onboarding user with NF - Single User ONBOARDING_OK and Family member DEMANDED not present - Initiative creation - Generate Portal Token (Ente Admin)', () => {\r",
															"    //verify response HTTP status \r",
															"    pm.response.to.have.status(200);\r",
															"    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "default"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"aud\": \"idpay.welfare.pagopa.it\",\r\n    \"uid\": \"{{uid_Ente}}\",\r\n    \"name\": \"{{name_Ente}}\",\r\n    \"familyName\": \"{{familyName_Ente}}\",\r\n    \"email\": \"{{email_Ente}}\",\r\n    \"orgId\": \"{{orgId_Ente}}\",\r\n    \"orgVAT\": \"{{orgVAT_Ente}}\",\r\n    \"orgName\": \"Ente di test IdPay\",\r\n    \"orgPartyRole\": \"{{orgPartyRole_Ente}}\",\r\n    \"orgRole\": \"{{orgRole_Ente}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlToken}}/welfare/token/test",
													"host": [
														"{{baseUrlToken}}"
													],
													"path": [
														"welfare",
														"token",
														"test"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get family unit composition",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Onboarding - Happy case - APP IO - Onboarding user with NF - Single User ONBOARDING_OK and Family member DEMANDED not present - Get family unit composition OK - Status 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Onboarding - Happy case - APP IO - Onboarding user with NF - Single User ONBOARDING_OK and Family member DEMANDED not present - Get family unit composition OK -  checking ONBOARDING_OK status is present\", function () {\r",
															"     let jsonResponse = pm.response.json()\r",
															"     const foundStatusOk = jsonResponse.usersList.some((item) =>{\r",
															"         return item.status === \"ONBOARDING_OK\"\r",
															"     });\r",
															"    pm.expect(foundStatusOk).equals(true); \r",
															"});\r",
															"\r",
															"pm.test(\"Onboarding - Happy case - APP IO - Onboarding user with NF - Single User ONBOARDING_OK and Family member DEMANDED not present - Get family unit composition OK -  checking DEMANDED status is present\", function () {\r",
															"     let jsonResponse = pm.response.json()\r",
															"     const foundStatusDem = jsonResponse.usersList.some((item) =>{\r",
															"         return item.status === \"DEMANDED\"\r",
															"     });\r",
															"    pm.expect(foundStatusDem).equals(false); \r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"setTimeout(function(){}, 20000);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "Fiscal-Code",
														"value": "{{CF_fake}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/idpay/initiative/{{initiativeId}}/beneficiary/family",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"idpay",
														"initiative",
														"{{initiativeId}}",
														"beneficiary",
														"family"
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete Initiative",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Onboarding - Happy case - APP IO - Onboarding user with NF - Single User ONBOARDING_OK and Family member DEMANDED not present - Delete Initiative - Status test 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{AKSAPIServerUrlGeneric}}idpayportalwelfarebackendinitiative/idpay/initiative/{{initiativeId}}",
													"host": [
														"{{AKSAPIServerUrlGeneric}}idpayportalwelfarebackendinitiative"
													],
													"path": [
														"idpay",
														"initiative",
														"{{initiativeId}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "User ONBOARDING_KO and Family Member not created",
									"item": [
										{
											"name": "ENTE - Initiative creation",
											"item": [
												{
													"name": "Generate Portal Token",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"let textResponse = pm.response.text()\r",
																	"\r",
																	"pm.test('Onboarding - Happy case - APP IO - Onboarding user with NF - User ONBOARDING_KO and Family Member not created - Initiative creation - Generate Portal Token (Ente Admin)', () => {\r",
																	"    //verify response HTTP status \r",
																	"    pm.response.to.have.status(200);\r",
																	"    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Ocp-Apim-Trace",
																"value": "true",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"aud\": \"idpay.welfare.pagopa.it\",\r\n    \"uid\": \"{{uid_Ente}}\",\r\n    \"name\": \"{{name_Ente}}\",\r\n    \"familyName\": \"{{familyName_Ente}}\",\r\n    \"email\": \"{{email_Ente}}\",\r\n    \"orgId\": \"{{orgId_Ente}}\",\r\n    \"orgVAT\": \"{{orgVAT_Ente}}\",\r\n    \"orgName\": \"Ente di test IdPay\",\r\n    \"orgPartyRole\": \"{{orgPartyRole_Ente}}\",\r\n    \"orgRole\": \"{{orgRole_Ente}}\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrlToken}}/welfare/token/test",
															"host": [
																"{{baseUrlToken}}"
															],
															"path": [
																"welfare",
																"token",
																"test"
															]
														}
													},
													"response": []
												},
												{
													"name": "STEP1-Insert Initiative (Service Info)",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"let moment = require('moment');\r",
																	"const now = String(moment().format('DD-MM-YYYY hh:mm'));\r",
																	"const serviceName = 'Test funzionali App IO Initiative with criteria NF ' + now;\r",
																	"pm.collectionVariables.set('serviceName', serviceName);\r",
																	"pm.collectionVariables.set('description', pm.variables.replaceIn('{{$randomLoremSentence}}'));\r",
																	"\r",
																	"pm.collectionVariables.set('channel_type', 'web');\r",
																	"pm.collectionVariables.set('channel_contact', 'https://www.google.it');"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var jsonData = JSON.parse(responseBody);\r",
																	"// console.log('jsondata', jsonData);\r",
																	"// console.log('jsondata.initiativeId', jsonData.initiativeId);\r",
																	"pm.collectionVariables.set('initiativeId', jsonData.initiativeId);\r",
																	"\r",
																	"pm.test(\"Onboarding - Happy case - APP IO - Onboarding user with NF - User ONBOARDING_KO and Family Member not created - Initiative creation - STEP1 - Status test 201\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Verify response body\", function () {\r",
																	"    let jsonResponse = pm.response.json();\r",
																	"    pm.expect(jsonResponse).have.property(\"initiativeId\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{identityPortalToken}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"serviceIO\": true,\n    \"serviceName\": \"{{serviceName}}\",\n    \"serviceScope\": \"LOCAL\",\n    \"description\": \"{{description}}\",\n    \"privacyLink\": \"https://www.google.it\",\n    \"tcLink\": \"https://www.google.com\",\n    \"channels\": [\n        {\n            \"type\": \"{{channel_type}}\",\n            \"contact\": \"{{channel_contact}}\"\n        }\n    ]\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrlInitiative}}/info",
															"host": [
																"{{baseUrlInitiative}}"
															],
															"path": [
																"info"
															]
														},
														"description": "Save initiative and first subset of data 'general info'"
													},
													"response": []
												},
												{
													"name": "STEP2-Update Initiative (general Info)",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"let moment = require('moment');\r",
																	"//Format: YYYY-MM-DD\r",
																	"let today = String(moment().format('YYYY-MM-DD'));\r",
																	"let todayP1 = String(moment().add(1,'months').format('YYYY-MM-DD'));\r",
																	"let todayP2 = String(moment().add(2,'months').format('YYYY-MM-DD'));\r",
																	"let todayP3 = String(moment().add(3,'months').format('YYYY-MM-DD'));\r",
																	"\r",
																	"let yesterday = String(moment().subtract(1, 'days').format('YYYY-MM-DD'));\r",
																	"\r",
																	"\r",
																	"/*\r",
																	"var futureDate = pm.variables.replaceIn('{{$$randomDateFuture}}');\r",
																	"pm.collectionVariables.set('...', _.random(0, 180));\r",
																	"*/\r",
																	"//_.floor(_.random(1.0, 100000.0, true),2)\r",
																	"pm.collectionVariables.set('budget', _.floor(_.random(10000, 100000, true),2));\r",
																	"pm.collectionVariables.set('beneficiaryType', 'NF');\r",
																	"const familyUnitCompositionValue = [\"INPS\", \"ANPR\"];\r",
																	"familyUnitCompositionRandomIndex = _.random(0, familyUnitCompositionValue.length - 1);\r",
																	"const selectedFamilyUnitCompositionValue = familyUnitCompositionValue[familyUnitCompositionRandomIndex];\r",
																	"pm.collectionVariables.set('familyUnitComposition', selectedFamilyUnitCompositionValue);\r",
																	"//pm.collectionVariables.set('familyUnitComposition', 'INPS');\r",
																	"//pm.collectionVariables.set('beneficiaryKnown', pm.variables.replaceIn('{{$randomBoolean}}'));\r",
																	"pm.collectionVariables.set('beneficiaryKnown', false);\r",
																	"pm.collectionVariables.set('rankingEnabled', false);\r",
																	"pm.collectionVariables.set('beneficiaryBudget', pm.variables.replaceIn('{{$randomInt}}'));//default max 1000\r",
																	"pm.collectionVariables.set('rankingStartDate', today);\r",
																	"pm.collectionVariables.set('rankingEndDate', todayP1);\r",
																	"pm.collectionVariables.set('startDate', todayP2);\r",
																	"pm.collectionVariables.set('endDate', todayP3);"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Onboarding - Happy case - APP IO - Onboarding user with NF - User ONBOARDING_KO and Family Member not created - Initiative creation - STEP2 - Status 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{identityPortalToken}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"budget\": {{budget}},\n    \"beneficiaryType\": \"{{beneficiaryType}}\",\n    \"familyUnitComposition\": \"{{familyUnitComposition}}\",\n    \"beneficiaryKnown\": {{beneficiaryKnown}},\n    \"rankingEnabled\": {{rankingEnabled}},\n    \"beneficiaryBudget\": {{beneficiaryBudget}},\n    \"rankingStartDate\": \"{{rankingStartDate}}\",\n    \"rankingEndDate\": \"{{rankingEndDate}}\",\n    \"startDate\": \"{{startDate}}\",\n    \"endDate\": \"{{endDate}}\",\n    \"descriptionMap\": {\n        \"it\": \"it\"\n    }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrlInitiative}}/:initiativeId/general",
															"host": [
																"{{baseUrlInitiative}}"
															],
															"path": [
																":initiativeId",
																"general"
															],
															"variable": [
																{
																	"key": "initiativeId",
																	"value": "{{initiativeId}}",
																	"description": "(Required) The initiative ID"
																}
															]
														},
														"description": "Save initiative and first subset of data 'general info'"
													},
													"response": []
												},
												{
													"name": "STEP3-Update Initiative (criteria)",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Onboarding - Happy case - APP IO - Onboarding user with NF - User ONBOARDING_KO and Family Member not created - Initiative creation - STEP3 - Status 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{identityPortalToken}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"automatedCriteria\": [\r\n        {\r\n            \"authority\": \"INPS\",\r\n            \"code\": \"ISEE\",\r\n            \"operator\": \"LT\",\r\n            \"value\": \"1\",\r\n            \"value2\": \"\",\r\n            \"iseeTypes\": [\r\n                \"ORDINARIO\",\r\n                \"MINORENNE\",\r\n                \"UNIVERSITARIO\",\r\n                \"SOCIOSANITARIO\",\r\n                \"DOTTORATO\",\r\n                \"RESIDENZIALE\",\r\n                \"CORRENTE\"\r\n            ]\r\n        }\r\n    ],\r\n    \"selfDeclarationCriteria\": []\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrlInitiative}}/{{initiativeId}}/beneficiary",
															"host": [
																"{{baseUrlInitiative}}"
															],
															"path": [
																"{{initiativeId}}",
																"beneficiary"
															]
														}
													},
													"response": []
												},
												{
													"name": "STEP4-Update Initiative Trx-Reward rules",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Onboarding - Happy case - APP IO - Onboarding user with NF - User ONBOARDING_KO and Family Member not created - Initiative creation - STEP4 - Status 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"setTimeout(()=> {}, 10000)\r",
																	"const d = new Date();\r",
																	"dateString = d.toISOString()\r",
																	"let endTime = dateString.split('T');\r",
																	"endTime = endTime[1].split('Z');\r",
																	"\r",
																	"pm.collectionVariables.set('rewardRuleType', 'rewardValue');\r",
																	"const rewardValueTypes = [\"PERCENTAGE\", \"ABSOLUTE\"];\r",
																	"rewardValueTypeRandomIndex = _.random(0, rewardValueTypes.length - 1);\r",
																	"const selectedRewardValueType = rewardValueTypes[rewardValueTypeRandomIndex];\r",
																	"pm.collectionVariables.set('rewardValueType', selectedRewardValueType);\r",
																	"if (selectedRewardValueType == \"PERCENTAGE\") {\r",
																	"    pm.collectionVariables.set('rewardRuleValue', 100);\r",
																	"} else {\r",
																	"    pm.collectionVariables.set('rewardRuleValue', 1);\r",
																	"}\r",
																	"\r",
																	"pm.collectionVariables.set('trxDaysOfWeek', pm.variables.replaceIn('{{$randomWeekday}}').toString().toUpperCase());\r",
																	"pm.collectionVariables.set('trxDayEndTime', endTime[0]);\r",
																	"pm.collectionVariables.set('trxThresholdFrom', 10);\r",
																	"pm.collectionVariables.set('trxThresholdTo', 50);\r",
																	"pm.collectionVariables.set('trxCountFrom', 3);\r",
																	"pm.collectionVariables.set('trxCountTo', 11);\r",
																	"pm.collectionVariables.set('trxRewardLimitFrequency', 'DAILY');\r",
																	"pm.collectionVariables.set('trxRewardLimitValue', 3);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{identityPortalToken}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"initiativeRewardType\": \"REFUND\",\n    \"rewardRule\": {\n        \"_type\": \"{{rewardRuleType}}\",\n        \"rewardValue\": {{rewardRuleValue}},\n        \"rewardValueType\": \"{{rewardValueType}}\"\n    },\n    \"trxRule\": {\n        \"daysOfWeek\": [\n            {\n                \"daysOfWeek\": [\n                    \"{{trxDaysOfWeek}}\"\n                ],\n                \"intervals\": [\n                    {\n                        \"startTime\": \"00:00:00.000\",\n                        \"endTime\": \"{{trxDayEndTime}}\"\n                    }\n                ]\n            }\n        ],\n        \"threshold\": {\n            \"from\": {{trxThresholdFrom}},\n            \"fromIncluded\": true,\n            \"to\": {{trxThresholdTo}},\n            \"toIncluded\": true\n        },\n        \"mccFilter\": {\n            \"allowedList\": true,\n            \"values\": [\n                \"0742\",\n                \"0743\",\n                \"0744\"\n            ]\n        },\n        \"trxCount\": {\n            \"from\": {{trxCountFrom}},\n            \"fromIncluded\": true,\n            \"to\": {{trxCountTo}},\n            \"toIncluded\": true\n        }\n    }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrlInitiative}}/:initiativeId/reward",
															"host": [
																"{{baseUrlInitiative}}"
															],
															"path": [
																":initiativeId",
																"reward"
															],
															"variable": [
																{
																	"key": "initiativeId",
																	"value": "{{initiativeId}}",
																	"description": "(Required) The initiative ID"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "STEP5-Update Initiative Refund Rule",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Onboarding - Happy case - APP IO - Onboarding user with NF - User ONBOARDING_KO and Family Member not created - Initiative creation - STEP5 - Status 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"/*const timeType = [\"CLOSED\",\"DAILY\",\"WEEKLY\",\"MONTHLY\",\"QUARTERLY\"];\r",
																	"timeTypeRandomIndex = _.random(0, timeType.length-1);\r",
																	"\r",
																	"const accumulatedType = [\"BUDGET_EXHAUSTED\",\"THRESHOLD_REACHED\"];\r",
																	"accumulatedTypeRandomIndex = _.random(0, timeType.length-1);\r",
																	"\r",
																	"pm.collectionVariables.set('timeType', timeType[timeTypeRandomIndex]);\r",
																	"pm.collectionVariables.set('accumulatedType', accumulatedType[accumulatedTypeRandomIndex]);\r",
																	"pm.collectionVariables.set('identificationCode', pm.variables.replaceIn('{{$randomLoremSentence}}'));\r",
																	"*/\r",
																	"\r",
																	"\r",
																	"let refundType = [\"timeParameter\", \"accumulatedAmount\"];\r",
																	"refundTypeRandomIndex = _.random(0, refundType.length - 1);\r",
																	"\r",
																	"const refundTypeSelected = refundType[refundTypeRandomIndex];\r",
																	"let body = {};\r",
																	"if (refundTypeSelected == \"timeParameter\") {\r",
																	"    const timeType = [\"CLOSED\",\"DAILY\",\"WEEKLY\",\"MONTHLY\",\"QUARTERLY\"];\r",
																	"    timeTypeRandomIndex = _.random(0, timeType.length-1);\r",
																	"    body = {\r",
																	"        timeParameter: {\r",
																	"            timeType: timeType[timeTypeRandomIndex]\r",
																	"        }\r",
																	"    };\r",
																	"} else {\r",
																	"    const accumulatedType = [\"BUDGET_EXHAUSTED\", \"THRESHOLD_REACHED\"];\r",
																	"    accumulatedTypeRandomIndex = _.random(0, accumulatedType.length - 1);\r",
																	"    const accumulatedTypeSelected = accumulatedType[accumulatedTypeRandomIndex];\r",
																	"    if (accumulatedTypeSelected == \"BUDGET_EXHAUSTED\") {\r",
																	"        body = {\r",
																	"            accumulatedAmount: {\r",
																	"                accumulatedType: \"BUDGET_EXHAUSTED\"\r",
																	"            }\r",
																	"        };\r",
																	"    } else {\r",
																	"        body = {\r",
																	"            accumulatedAmount: {\r",
																	"                accumulatedType: \"THRESHOLD_REACHED\",\r",
																	"                refundThreshold: 10\r",
																	"            }\r",
																	"        };\r",
																	"    }\r",
																	"}\r",
																	"\r",
																	"pm.collectionVariables.set('body', JSON.stringify(body));"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{identityPortalToken}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{body}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrlInitiative}}/:initiativeId/refund",
															"host": [
																"{{baseUrlInitiative}}"
															],
															"path": [
																":initiativeId",
																"refund"
															],
															"variable": [
																{
																	"key": "initiativeId",
																	"value": "{{initiativeId}}",
																	"description": "(Required) The initiative ID"
																}
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "PAGOPA - Initiative update status APPROVED",
											"item": [
												{
													"name": "Generate Portal Token",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"let textResponse = pm.response.text()\r",
																	"\r",
																	"pm.test('Onboarding - Happy case - APP IO - Onboarding user with NF - User ONBOARDING_KO and Family Member not created - Initiative creation - Generate Portal Token (PagoPA Admin)', () => {\r",
																	"    //verify response HTTP status \r",
																	"    pm.response.to.have.status(200);\r",
																	"    pm.collectionVariables.set(\"identityPortalTokenPagopa\", textResponse);\r",
																	"});\r",
																	"\r",
																	"//response time is less than 1s\r",
																	"tests[\"Response time is less than 1s\"] = responseTime < 1000;"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Ocp-Apim-Trace",
																"value": "true",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"aud\": \"idpay.welfare.pagopa.it\",\r\n  \"uid\": \"{{uid_Pagopa}}\",\r\n  \"name\": \"{{name_Pagopa}}\",\r\n  \"familyName\": \"{{familyName_Pagopa}}\",\r\n  \"email\": \"{{email_Pagopa}}\",\r\n  \"orgId\": \"{{orgId_Pagopa}}\",\r\n  \"orgVAT\": \"{{orgVAT_Pagopa}}\",\r\n  \"orgName\": \"Ente di test IdPay\",\r\n  \"orgPartyRole\": \"{{orgPartyRole_Pagopa}}\",\r\n  \"orgRole\": \"{{orgRole_Pagopa}}\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrlToken}}/welfare/token/test",
															"host": [
																"{{baseUrlToken}}"
															],
															"path": [
																"welfare",
																"token",
																"test"
															]
														}
													},
													"response": []
												},
												{
													"name": "Update initiative into APPROVED status",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Onboarding - Happy case - APP IO - Onboarding user with NF - User ONBOARDING_KO and Family Member not created - PagoPA Admin updates initiative status to APPROVED - status 204)\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"//setTimeout(function(){}, 20000); //milliseconds"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{identityPortalTokenPagopa}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrlInitiative}}/{{initiativeId}}/approved",
															"host": [
																"{{baseUrlInitiative}}"
															],
															"path": [
																"{{initiativeId}}",
																"approved"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "ENTE - Initiative PUBLISHED",
											"item": [
												{
													"name": "Generate Portal Token",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"let textResponse = pm.response.text()\r",
																	"\r",
																	"pm.test('Onboarding - Happy case - APP IO - Onboarding user with NF - User ONBOARDING_KO and Family Member not created - Initiative pubblication - Generate Portal Token (Ente Admin)', () => {\r",
																	"    //verify response HTTP status \r",
																	"    pm.response.to.have.status(200);\r",
																	"    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
																	"});\r",
																	"\r",
																	"//response time is less than 1s\r",
																	"tests[\"Response time is less than 1s\"] = responseTime < 1000;"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Ocp-Apim-Trace",
																"value": "true",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"aud\": \"idpay.welfare.pagopa.it\",\r\n    \"uid\": \"{{uid_Ente}}\",\r\n    \"name\": \"{{name_Ente}}\",\r\n    \"familyName\": \"{{familyName_Ente}}\",\r\n    \"email\": \"{{email_Ente}}\",\r\n    \"orgId\": \"{{orgId_Ente}}\",\r\n    \"orgVAT\": \"{{orgVAT_Ente}}\",\r\n    \"orgName\": \"Ente di test IdPay\",\r\n    \"orgPartyRole\": \"{{orgPartyRole_Ente}}\",\r\n    \"orgRole\": \"{{orgRole_Ente}}\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrlToken}}/welfare/token/test",
															"host": [
																"{{baseUrlToken}}"
															],
															"path": [
																"welfare",
																"token",
																"test"
															]
														}
													},
													"response": []
												},
												{
													"name": "Initiative PUBLISHED",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Onboarding - Happy case - APP IO - Onboarding user with NF - User ONBOARDING_KO and Family Member not created - Initiative pubblication - Ente Admin updates initiative status into PUBLISHED -(Responses with 204)\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"/*let body;\r",
																	"baseUrlInitiative = pm.variables.get('baseUrlInitiative')\r",
																	"if(baseUrlInitiative.includes('localhost')){\r",
																	"    body = {\r",
																	"        mode: 'raw',\r",
																	"        raw: JSON.stringify({\r",
																	"            organizationName: 'Comune di Milano',\r",
																	"            organizationFiscalCode: '11122233344',\r",
																	"            organizationUserId: 'b8986bf2-1f93-4827-ab16-b21eb8aeae2b',\r",
																	"            organizationUserRole: 'admin'\r",
																	"        })\r",
																	"    }\r",
																	"    pm.request.headers.add({\r",
																	"        key: \"Content-Type\",\r",
																	"        value: \"application/json\"\r",
																	"    });\r",
																	"    pm.variables.set('body', JSON.stringify(body));\r",
																	"    pm.request.body.update(body);\r",
																	"}\r",
																	"*/"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {}
													},
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{identityPortalToken}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [],
														"url": {
															"raw": "{{baseUrlInitiative}}/{{initiativeId}}/published",
															"host": [
																"{{baseUrlInitiative}}"
															],
															"path": [
																"{{initiativeId}}",
																"published"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Generate Token IO",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test('Onboarding - Happy case - APP IO - Onboarding user with NF - User ONBOARDING_KO and Family Member not created - Generate token IO', () => {\r",
															"    //verify response HTTP status \r",
															"    pm.response.to.have.status(200);\r",
															"    pm.collectionVariables.set(\"tokenIO\", pm.response.text());\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"setTimeout(()=> {}, 90000)"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Ocp-Apim-Subscription-Key",
														"value": "{{genericSubscriptionKey}}",
														"type": "default"
													},
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "default"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/rtd/mock-io/login?fiscalCode={{CF_FAKE_1}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"rtd",
														"mock-io",
														"login"
													],
													"query": [
														{
															"key": "fiscalCode",
															"value": "{{CF_FAKE_1}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Accept T&C",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Onboarding - Happy case - APP IO - Onboarding user with NF - User ONBOARDING_KO and Family Member not created - Accept T&C - Status 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"setTimeout(()=> {}, 20000)"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{tokenIO}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Ocp-Apim-Subscription-Key",
														"value": "{{apimSubscriptionKey}}",
														"type": "text"
													},
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/idpay/onboarding/",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"idpay",
														"onboarding",
														""
													]
												}
											},
											"response": []
										},
										{
											"name": "Prerequisites Check",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Onboarding - Happy case - APP IO - Onboarding user with NF - User ONBOARDING_KO and Family Member not created - Prerequisites check - Status 200 or 202\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200,202]);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{tokenIO}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Ocp-Apim-Subscription-Key",
														"value": "{{apimSubscriptionKey}}",
														"type": "text"
													},
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/idpay/onboarding/initiative",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"idpay",
														"onboarding",
														"initiative"
													]
												}
											},
											"response": []
										},
										{
											"name": "PDND + Autocertification",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Onboarding - Happy case - APP IO - Onboarding user with NF - User ONBOARDING_KO and Family Member not created - PDND + Autocertification - Status 202\", function () {\r",
															"    pm.response.to.have.status(202);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{tokenIO}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\",\r\n    \"pdndAccept\": true,\r\n    \"selfDeclarationList\": []\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/idpay/onboarding/consent",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"idpay",
														"onboarding",
														"consent"
													]
												}
											},
											"response": []
										},
										{
											"name": "Status Onboarding - ok",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Onboarding - Happy case - APP IO - Onboarding user with NF - User ONBOARDING_KO and Family Member not created - Status Onboarding KO - Status 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"setTimeout(()=>{ \r",
															"\r",
															"pm.test(\"Onboarding status is ONBOARDING_KO or ON_EVALUATION\", function () {\r",
															"    let jsonResponse = pm.response.json()\r",
															"    pm.expect(jsonResponse.status).to.be.oneOf(['ONBOARDING_KO', 'ON_EVALUATION']);\r",
															"});\r",
															" },7000)"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"setTimeout(()=> {}, 10000)"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{tokenIO}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/idpay/onboarding/{{initiativeId}}/status",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"idpay",
														"onboarding",
														"{{initiativeId}}",
														"status"
													]
												}
											},
											"response": []
										},
										{
											"name": "Generate Portal Token",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"setTimeout(()=> {}, 5000)"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"let textResponse = pm.response.text()\r",
															"\r",
															"pm.test('Onboarding - Happy case - APP IO - Onboarding user with NF - User ONBOARDING_KO and Family Member not created - Initiative creation - Generate Portal Token (Ente Admin)', () => {\r",
															"    //verify response HTTP status \r",
															"    pm.response.to.have.status(200);\r",
															"    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "default"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"aud\": \"idpay.welfare.pagopa.it\",\r\n    \"uid\": \"{{uid_Ente}}\",\r\n    \"name\": \"{{name_Ente}}\",\r\n    \"familyName\": \"{{familyName_Ente}}\",\r\n    \"email\": \"{{email_Ente}}\",\r\n    \"orgId\": \"{{orgId_Ente}}\",\r\n    \"orgVAT\": \"{{orgVAT_Ente}}\",\r\n    \"orgName\": \"Ente di test IdPay\",\r\n    \"orgPartyRole\": \"{{orgPartyRole_Ente}}\",\r\n    \"orgRole\": \"{{orgRole_Ente}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlToken}}/welfare/token/test",
													"host": [
														"{{baseUrlToken}}"
													],
													"path": [
														"welfare",
														"token",
														"test"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get family unit composition",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Onboarding - Happy case - APP IO - Onboarding user with NF - User ONBOARDING_KO and Family Member not created - Get family unit composition OK - Status 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Onboarding - Happy case - APP IO - Onboarding user with NF - User ONBOARDING_KO and Family Member not created - Get family unit composition OK -  checking ONBOARDING_KO status is present\", function () {\r",
															"     let jsonResponse = pm.response.json()\r",
															"     const foundStatusOk = jsonResponse.usersList.some((item) =>{\r",
															"         return item.status === \"ONBOARDING_KO\"\r",
															"     });\r",
															"    pm.expect(foundStatusOk).equals(true); \r",
															"});\r",
															"\r",
															"pm.test(\"Onboarding - Happy case - APP IO - Onboarding user with NF - User ONBOARDING_KO and Family Member not created - Get family unit composition OK -  checking DEMANDED status is not present\", function () {\r",
															"     let jsonResponse = pm.response.json()\r",
															"     const foundStatusDem = jsonResponse.usersList.some((item) =>{\r",
															"         return item.status === \"DEMANDED\"\r",
															"     });\r",
															"    pm.expect(foundStatusDem).equals(false); \r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"setTimeout(()=> {}, 30000)"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "Fiscal-Code",
														"value": "{{CF_FAKE_1}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/idpay/initiative/{{initiativeId}}/beneficiary/family",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"idpay",
														"initiative",
														"{{initiativeId}}",
														"beneficiary",
														"family"
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete Initiative",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Onboarding - Happy case - APP IO - Onboarding user with NF - User ONBOARDING_KO and Family Member not created - Delete Initiative - Status test 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{AKSAPIServerUrlGeneric}}idpayportalwelfarebackendinitiative/idpay/initiative/{{initiativeId}}",
													"host": [
														"{{AKSAPIServerUrlGeneric}}idpayportalwelfarebackendinitiative"
													],
													"path": [
														"idpay",
														"initiative",
														"{{initiativeId}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "User ONBOARDING_OK on initiative not NF and users list is empty",
									"item": [
										{
											"name": "ENTE - Initiative creation",
											"item": [
												{
													"name": "Generate Portal Token",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"let textResponse = pm.response.text()\r",
																	"\r",
																	"pm.test('Onboarding - Happy case - APP IO - Onboarding user with NF - User ONBOARDING_OK on initiative not NF and users list is empty - Initiative creation - Generate Portal Token (Ente Admin)', () => {\r",
																	"    //verify response HTTP status \r",
																	"    pm.response.to.have.status(200);\r",
																	"    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Ocp-Apim-Trace",
																"value": "true",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"aud\": \"idpay.welfare.pagopa.it\",\r\n    \"uid\": \"{{uid_Ente}}\",\r\n    \"name\": \"{{name_Ente}}\",\r\n    \"familyName\": \"{{familyName_Ente}}\",\r\n    \"email\": \"{{email_Ente}}\",\r\n    \"orgId\": \"{{orgId_Ente}}\",\r\n    \"orgVAT\": \"{{orgVAT_Ente}}\",\r\n    \"orgName\": \"Ente di test IdPay\",\r\n    \"orgPartyRole\": \"{{orgPartyRole_Ente}}\",\r\n    \"orgRole\": \"{{orgRole_Ente}}\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrlToken}}/welfare/token/test",
															"host": [
																"{{baseUrlToken}}"
															],
															"path": [
																"welfare",
																"token",
																"test"
															]
														}
													},
													"response": []
												},
												{
													"name": "STEP1-Insert Initiative (Service Info)",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"let moment = require('moment');\r",
																	"const now = String(moment().format('DD-MM-YYYY hh:mm'));\r",
																	"const serviceName = 'Test funzionali App IO Initiative with criteria NF ' + now;\r",
																	"pm.collectionVariables.set('serviceName', serviceName);\r",
																	"pm.collectionVariables.set('description', pm.variables.replaceIn('{{$randomLoremSentence}}'));\r",
																	"\r",
																	"pm.collectionVariables.set('channel_type', 'web');\r",
																	"pm.collectionVariables.set('channel_contact', 'https://www.google.it');"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var jsonData = JSON.parse(responseBody);\r",
																	"// console.log('jsondata', jsonData);\r",
																	"// console.log('jsondata.initiativeId', jsonData.initiativeId);\r",
																	"pm.collectionVariables.set('initiativeId', jsonData.initiativeId);\r",
																	"\r",
																	"pm.test(\"Onboarding - Happy case - APP IO - Onboarding user with NF - User ONBOARDING_OK on initiative not NF and users list is empty - Initiative creation - STEP1 - Status test 201\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Verify response body\", function () {\r",
																	"    let jsonResponse = pm.response.json();\r",
																	"    pm.expect(jsonResponse).have.property(\"initiativeId\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{identityPortalToken}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"serviceIO\": true,\n    \"serviceName\": \"{{serviceName}}\",\n    \"serviceScope\": \"LOCAL\",\n    \"description\": \"{{description}}\",\n    \"privacyLink\": \"https://www.google.it\",\n    \"tcLink\": \"https://www.google.com\",\n    \"channels\": [\n        {\n            \"type\": \"{{channel_type}}\",\n            \"contact\": \"{{channel_contact}}\"\n        }\n    ]\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrlInitiative}}/info",
															"host": [
																"{{baseUrlInitiative}}"
															],
															"path": [
																"info"
															]
														},
														"description": "Save initiative and first subset of data 'general info'"
													},
													"response": []
												},
												{
													"name": "STEP2-Update Initiative (general Info)",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"let moment = require('moment');\r",
																	"//Format: YYYY-MM-DD\r",
																	"let today = String(moment().format('YYYY-MM-DD'));\r",
																	"let todayP1 = String(moment().add(1,'months').format('YYYY-MM-DD'));\r",
																	"let todayP2 = String(moment().add(2,'months').format('YYYY-MM-DD'));\r",
																	"let todayP3 = String(moment().add(3,'months').format('YYYY-MM-DD'));\r",
																	"\r",
																	"let yesterday = String(moment().subtract(1, 'days').format('YYYY-MM-DD'));\r",
																	"\r",
																	"\r",
																	"/*\r",
																	"var futureDate = pm.variables.replaceIn('{{$$randomDateFuture}}');\r",
																	"pm.collectionVariables.set('...', _.random(0, 180));\r",
																	"*/\r",
																	"//_.floor(_.random(1.0, 100000.0, true),2)\r",
																	"pm.collectionVariables.set('budget', _.floor(_.random(10000, 100000, true),2));\r",
																	"pm.collectionVariables.set('beneficiaryType', 'PF');\r",
																	"//const familyUnitCompositionValue = [\"INPS\", \"ANPR\"];\r",
																	"//familyUnitCompositionRandomIndex = _.random(0, familyUnitCompositionValue.length - 1);\r",
																	"//const selectedFamilyUnitCompositionValue = familyUnitCompositionValue[familyUnitCompositionRandomIndex];\r",
																	"//pm.collectionVariables.set('familyUnitComposition', selectedFamilyUnitCompositionValue);\r",
																	"//pm.collectionVariables.set('familyUnitComposition', 'INPS');\r",
																	"//pm.collectionVariables.set('beneficiaryKnown', pm.variables.replaceIn('{{$randomBoolean}}'));\r",
																	"pm.collectionVariables.set('beneficiaryKnown', false);\r",
																	"pm.collectionVariables.set('rankingEnabled', false);\r",
																	"pm.collectionVariables.set('beneficiaryBudget', pm.variables.replaceIn('{{$randomInt}}'));//default max 1000\r",
																	"pm.collectionVariables.set('rankingStartDate', today);\r",
																	"pm.collectionVariables.set('rankingEndDate', todayP1);\r",
																	"pm.collectionVariables.set('startDate', todayP2);\r",
																	"pm.collectionVariables.set('endDate', todayP3);"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Onboarding - Happy case - APP IO - Onboarding user with NF - User ONBOARDING_OK on initiative not NF and users list is empty - Initiative creation - STEP2 - Status 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{identityPortalToken}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"budget\": {{budget}},\n    \"beneficiaryType\": \"{{beneficiaryType}}\",\n    //\"familyUnitComposition\": \"{{familyUnitComposition}}\",\n    \"beneficiaryKnown\": {{beneficiaryKnown}},\n    \"rankingEnabled\": {{rankingEnabled}},\n    \"beneficiaryBudget\": {{beneficiaryBudget}},\n    \"rankingStartDate\": \"{{rankingStartDate}}\",\n    \"rankingEndDate\": \"{{rankingEndDate}}\",\n    \"startDate\": \"{{startDate}}\",\n    \"endDate\": \"{{endDate}}\",\n    \"descriptionMap\": {\n        \"it\": \"it\"\n    }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrlInitiative}}/:initiativeId/general",
															"host": [
																"{{baseUrlInitiative}}"
															],
															"path": [
																":initiativeId",
																"general"
															],
															"variable": [
																{
																	"key": "initiativeId",
																	"value": "{{initiativeId}}",
																	"description": "(Required) The initiative ID"
																}
															]
														},
														"description": "Save initiative and first subset of data 'general info'"
													},
													"response": []
												},
												{
													"name": "STEP3-Update Initiative (criteria)",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Onboarding - Happy case - APP IO - Onboarding user with NF - User ONBOARDING_OK on initiative not NF and users list is empty - Initiative creation - STEP3 - Status 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{identityPortalToken}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"automatedCriteria\": [\r\n        {\r\n            \"authority\": \"INPS\",\r\n            \"code\": \"ISEE\",\r\n            \"operator\": \"GT\",\r\n            \"value\": \"1\",\r\n            \"value2\": \"\",\r\n            \"iseeTypes\": [\r\n                \"ORDINARIO\",\r\n                \"MINORENNE\",\r\n                \"UNIVERSITARIO\",\r\n                \"SOCIOSANITARIO\",\r\n                \"DOTTORATO\",\r\n                \"RESIDENZIALE\",\r\n                \"CORRENTE\"\r\n            ]\r\n        }\r\n    ],\r\n    \"selfDeclarationCriteria\": []\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrlInitiative}}/{{initiativeId}}/beneficiary",
															"host": [
																"{{baseUrlInitiative}}"
															],
															"path": [
																"{{initiativeId}}",
																"beneficiary"
															]
														}
													},
													"response": []
												},
												{
													"name": "STEP4-Update Initiative Trx-Reward rules",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Onboarding - Happy case - APP IO - Onboarding user with NF - User ONBOARDING_OK on initiative not NF and users list is empty - Initiative creation - STEP4 - Status 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"setTimeout(()=> {}, 10000)\r",
																	"const d = new Date();\r",
																	"dateString = d.toISOString()\r",
																	"let endTime = dateString.split('T');\r",
																	"endTime = endTime[1].split('Z');\r",
																	"\r",
																	"pm.collectionVariables.set('rewardRuleType', 'rewardValue');\r",
																	"const rewardValueTypes = [\"PERCENTAGE\", \"ABSOLUTE\"];\r",
																	"rewardValueTypeRandomIndex = _.random(0, rewardValueTypes.length - 1);\r",
																	"const selectedRewardValueType = rewardValueTypes[rewardValueTypeRandomIndex];\r",
																	"pm.collectionVariables.set('rewardValueType', selectedRewardValueType);\r",
																	"if (selectedRewardValueType == \"PERCENTAGE\") {\r",
																	"    pm.collectionVariables.set('rewardRuleValue', 100);\r",
																	"} else {\r",
																	"    pm.collectionVariables.set('rewardRuleValue', 1);\r",
																	"}\r",
																	"\r",
																	"pm.collectionVariables.set('trxDaysOfWeek', pm.variables.replaceIn('{{$randomWeekday}}').toString().toUpperCase());\r",
																	"pm.collectionVariables.set('trxDayEndTime', endTime[0]);\r",
																	"pm.collectionVariables.set('trxThresholdFrom', 10);\r",
																	"pm.collectionVariables.set('trxThresholdTo', 50);\r",
																	"pm.collectionVariables.set('trxCountFrom', 3);\r",
																	"pm.collectionVariables.set('trxCountTo', 11);\r",
																	"pm.collectionVariables.set('trxRewardLimitFrequency', 'DAILY');\r",
																	"pm.collectionVariables.set('trxRewardLimitValue', 3);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{identityPortalToken}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"initiativeRewardType\": \"REFUND\",\n    \"rewardRule\": {\n        \"_type\": \"{{rewardRuleType}}\",\n        \"rewardValue\": {{rewardRuleValue}},\n        \"rewardValueType\": \"{{rewardValueType}}\"\n    },\n    \"trxRule\": {\n        \"daysOfWeek\": [\n            {\n                \"daysOfWeek\": [\n                    \"{{trxDaysOfWeek}}\"\n                ],\n                \"intervals\": [\n                    {\n                        \"startTime\": \"00:00:00.000\",\n                        \"endTime\": \"{{trxDayEndTime}}\"\n                    }\n                ]\n            }\n        ],\n        \"threshold\": {\n            \"from\": {{trxThresholdFrom}},\n            \"fromIncluded\": true,\n            \"to\": {{trxThresholdTo}},\n            \"toIncluded\": true\n        },\n        \"mccFilter\": {\n            \"allowedList\": true,\n            \"values\": [\n                \"0742\",\n                \"0743\",\n                \"0744\"\n            ]\n        },\n        \"trxCount\": {\n            \"from\": {{trxCountFrom}},\n            \"fromIncluded\": true,\n            \"to\": {{trxCountTo}},\n            \"toIncluded\": true\n        }\n    }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrlInitiative}}/:initiativeId/reward",
															"host": [
																"{{baseUrlInitiative}}"
															],
															"path": [
																":initiativeId",
																"reward"
															],
															"variable": [
																{
																	"key": "initiativeId",
																	"value": "{{initiativeId}}",
																	"description": "(Required) The initiative ID"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "STEP5-Update Initiative Refund Rule",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Onboarding - Happy case - APP IO - Onboarding user with NF - User ONBOARDING_OK on initiative not NF and users list is empty - Initiative creation - STEP5 - Status 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"/*const timeType = [\"CLOSED\",\"DAILY\",\"WEEKLY\",\"MONTHLY\",\"QUARTERLY\"];\r",
																	"timeTypeRandomIndex = _.random(0, timeType.length-1);\r",
																	"\r",
																	"const accumulatedType = [\"BUDGET_EXHAUSTED\",\"THRESHOLD_REACHED\"];\r",
																	"accumulatedTypeRandomIndex = _.random(0, timeType.length-1);\r",
																	"\r",
																	"pm.collectionVariables.set('timeType', timeType[timeTypeRandomIndex]);\r",
																	"pm.collectionVariables.set('accumulatedType', accumulatedType[accumulatedTypeRandomIndex]);\r",
																	"pm.collectionVariables.set('identificationCode', pm.variables.replaceIn('{{$randomLoremSentence}}'));\r",
																	"*/\r",
																	"\r",
																	"\r",
																	"let refundType = [\"timeParameter\", \"accumulatedAmount\"];\r",
																	"refundTypeRandomIndex = _.random(0, refundType.length - 1);\r",
																	"\r",
																	"const refundTypeSelected = refundType[refundTypeRandomIndex];\r",
																	"let body = {};\r",
																	"if (refundTypeSelected == \"timeParameter\") {\r",
																	"    const timeType = [\"CLOSED\",\"DAILY\",\"WEEKLY\",\"MONTHLY\",\"QUARTERLY\"];\r",
																	"    timeTypeRandomIndex = _.random(0, timeType.length-1);\r",
																	"    body = {\r",
																	"        timeParameter: {\r",
																	"            timeType: timeType[timeTypeRandomIndex]\r",
																	"        }\r",
																	"    };\r",
																	"} else {\r",
																	"    const accumulatedType = [\"BUDGET_EXHAUSTED\", \"THRESHOLD_REACHED\"];\r",
																	"    accumulatedTypeRandomIndex = _.random(0, accumulatedType.length - 1);\r",
																	"    const accumulatedTypeSelected = accumulatedType[accumulatedTypeRandomIndex];\r",
																	"    if (accumulatedTypeSelected == \"BUDGET_EXHAUSTED\") {\r",
																	"        body = {\r",
																	"            accumulatedAmount: {\r",
																	"                accumulatedType: \"BUDGET_EXHAUSTED\"\r",
																	"            }\r",
																	"        };\r",
																	"    } else {\r",
																	"        body = {\r",
																	"            accumulatedAmount: {\r",
																	"                accumulatedType: \"THRESHOLD_REACHED\",\r",
																	"                refundThreshold: 10\r",
																	"            }\r",
																	"        };\r",
																	"    }\r",
																	"}\r",
																	"\r",
																	"pm.collectionVariables.set('body', JSON.stringify(body));"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{identityPortalToken}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{body}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrlInitiative}}/:initiativeId/refund",
															"host": [
																"{{baseUrlInitiative}}"
															],
															"path": [
																":initiativeId",
																"refund"
															],
															"variable": [
																{
																	"key": "initiativeId",
																	"value": "{{initiativeId}}",
																	"description": "(Required) The initiative ID"
																}
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "PAGOPA - Initiative update status APPROVED",
											"item": [
												{
													"name": "Generate Portal Token",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"let textResponse = pm.response.text()\r",
																	"\r",
																	"pm.test('Onboarding - Happy case - APP IO - Onboarding user with NF - User ONBOARDING_OK on initiative not NF and users list is empty - Initiative creation - Generate Portal Token (PagoPA Admin)', () => {\r",
																	"    //verify response HTTP status \r",
																	"    pm.response.to.have.status(200);\r",
																	"    pm.collectionVariables.set(\"identityPortalTokenPagopa\", textResponse);\r",
																	"});\r",
																	"\r",
																	"//response time is less than 1s\r",
																	"tests[\"Response time is less than 1s\"] = responseTime < 1000;"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Ocp-Apim-Trace",
																"value": "true",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"aud\": \"idpay.welfare.pagopa.it\",\r\n  \"uid\": \"{{uid_Pagopa}}\",\r\n  \"name\": \"{{name_Pagopa}}\",\r\n  \"familyName\": \"{{familyName_Pagopa}}\",\r\n  \"email\": \"{{email_Pagopa}}\",\r\n  \"orgId\": \"{{orgId_Pagopa}}\",\r\n  \"orgVAT\": \"{{orgVAT_Pagopa}}\",\r\n  \"orgName\": \"Ente di test IdPay\",\r\n  \"orgPartyRole\": \"{{orgPartyRole_Pagopa}}\",\r\n  \"orgRole\": \"{{orgRole_Pagopa}}\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrlToken}}/welfare/token/test",
															"host": [
																"{{baseUrlToken}}"
															],
															"path": [
																"welfare",
																"token",
																"test"
															]
														}
													},
													"response": []
												},
												{
													"name": "Update initiative into APPROVED status",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Onboarding - Happy case - APP IO - Onboarding user with NF - User ONBOARDING_OK on initiative not NF and users list is empty - PagoPA Admin updates initiative status to APPROVED - status 204)\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"//setTimeout(function(){}, 20000); //milliseconds"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{identityPortalTokenPagopa}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrlInitiative}}/{{initiativeId}}/approved",
															"host": [
																"{{baseUrlInitiative}}"
															],
															"path": [
																"{{initiativeId}}",
																"approved"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "ENTE - Initiative PUBLISHED",
											"item": [
												{
													"name": "Generate Portal Token",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"let textResponse = pm.response.text()\r",
																	"\r",
																	"pm.test('Onboarding - Happy case - APP IO - Onboarding user with NF - User ONBOARDING_OK on initiative not NF and users list is empty - Initiative pubblication - Generate Portal Token (Ente Admin)', () => {\r",
																	"    //verify response HTTP status \r",
																	"    pm.response.to.have.status(200);\r",
																	"    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
																	"});\r",
																	"\r",
																	"//response time is less than 1s\r",
																	"tests[\"Response time is less than 1s\"] = responseTime < 1000;"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Ocp-Apim-Trace",
																"value": "true",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"aud\": \"idpay.welfare.pagopa.it\",\r\n    \"uid\": \"{{uid_Ente}}\",\r\n    \"name\": \"{{name_Ente}}\",\r\n    \"familyName\": \"{{familyName_Ente}}\",\r\n    \"email\": \"{{email_Ente}}\",\r\n    \"orgId\": \"{{orgId_Ente}}\",\r\n    \"orgVAT\": \"{{orgVAT_Ente}}\",\r\n    \"orgName\": \"Ente di test IdPay\",\r\n    \"orgPartyRole\": \"{{orgPartyRole_Ente}}\",\r\n    \"orgRole\": \"{{orgRole_Ente}}\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrlToken}}/welfare/token/test",
															"host": [
																"{{baseUrlToken}}"
															],
															"path": [
																"welfare",
																"token",
																"test"
															]
														}
													},
													"response": []
												},
												{
													"name": "Initiative PUBLISHED",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Onboarding - Happy case - APP IO - Onboarding user with NF - User ONBOARDING_OK on initiative not NF and users list is empty - Initiative pubblication - Ente Admin updates initiative status into PUBLISHED -(Responses with 204)\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"/*let body;\r",
																	"baseUrlInitiative = pm.variables.get('baseUrlInitiative')\r",
																	"if(baseUrlInitiative.includes('localhost')){\r",
																	"    body = {\r",
																	"        mode: 'raw',\r",
																	"        raw: JSON.stringify({\r",
																	"            organizationName: 'Comune di Milano',\r",
																	"            organizationFiscalCode: '11122233344',\r",
																	"            organizationUserId: 'b8986bf2-1f93-4827-ab16-b21eb8aeae2b',\r",
																	"            organizationUserRole: 'admin'\r",
																	"        })\r",
																	"    }\r",
																	"    pm.request.headers.add({\r",
																	"        key: \"Content-Type\",\r",
																	"        value: \"application/json\"\r",
																	"    });\r",
																	"    pm.variables.set('body', JSON.stringify(body));\r",
																	"    pm.request.body.update(body);\r",
																	"}\r",
																	"*/"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {}
													},
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{identityPortalToken}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [],
														"url": {
															"raw": "{{baseUrlInitiative}}/{{initiativeId}}/published",
															"host": [
																"{{baseUrlInitiative}}"
															],
															"path": [
																"{{initiativeId}}",
																"published"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Generate Token IO",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test('Onboarding - Happy case - APP IO - Onboarding user with NF - User ONBOARDING_OK on initiative not NF and users list is empty - Generate token IO', () => {\r",
															"    //verify response HTTP status \r",
															"    pm.response.to.have.status(200);\r",
															"    pm.collectionVariables.set(\"tokenIO\", pm.response.text());\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"setTimeout(()=> {}, 5000)"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Ocp-Apim-Subscription-Key",
														"value": "{{genericSubscriptionKey}}",
														"type": "default"
													},
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "default"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/rtd/mock-io/login?fiscalCode={{CF_FAKE_2}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"rtd",
														"mock-io",
														"login"
													],
													"query": [
														{
															"key": "fiscalCode",
															"value": "{{CF_FAKE_2}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Accept T&C",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Onboarding - Happy case - APP IO - Onboarding user with NF - User ONBOARDING_OK on initiative not NF and users list is empty - Accept T&C - Status 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"setTimeout(()=> {}, 15000)"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{tokenIO}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Ocp-Apim-Subscription-Key",
														"value": "{{apimSubscriptionKey}}",
														"type": "text"
													},
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/idpay/onboarding/",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"idpay",
														"onboarding",
														""
													]
												}
											},
											"response": []
										},
										{
											"name": "Prerequisites Check",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Onboarding - Happy case - APP IO - Onboarding user with NF - User ONBOARDING_OK on initiative not NF and users list is empty - Prerequisites check - Status 200 or 202\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200,202]);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{tokenIO}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Ocp-Apim-Subscription-Key",
														"value": "{{apimSubscriptionKey}}",
														"type": "text"
													},
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/idpay/onboarding/initiative",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"idpay",
														"onboarding",
														"initiative"
													]
												}
											},
											"response": []
										},
										{
											"name": "PDND + Autocertification",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Onboarding - Happy case - APP IO - Onboarding user with NF - User ONBOARDING_OK on initiative not NF and users list is empty - PDND + Autocertification - Status 202\", function () {\r",
															"    pm.response.to.have.status(202);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{tokenIO}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\",\r\n    \"pdndAccept\": true,\r\n    \"selfDeclarationList\": []\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/idpay/onboarding/consent",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"idpay",
														"onboarding",
														"consent"
													]
												}
											},
											"response": []
										},
										{
											"name": "Status Onboarding - ok",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Onboarding - Happy case - APP IO - Onboarding user with NF - User ONBOARDING_OK on initiative not NF and users list is empty - Status Onboarding OK - Status 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"setTimeout(()=>{ \r",
															"\r",
															"pm.test(\"Onboarding status is ONBOARDING_OK or ON_EVALUATION\", function () {\r",
															"    let jsonResponse = pm.response.json()\r",
															"    pm.expect(jsonResponse.status).to.be.oneOf(['ONBOARDING_OK', 'ON_EVALUATION']);\r",
															"});\r",
															" },2000)"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{tokenIO}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/idpay/onboarding/{{initiativeId}}/status",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"idpay",
														"onboarding",
														"{{initiativeId}}",
														"status"
													]
												}
											},
											"response": []
										},
										{
											"name": "Generate Portal Token",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"let textResponse = pm.response.text()\r",
															"\r",
															"pm.test('Onboarding - Happy case - APP IO - Onboarding user with NF - User ONBOARDING_OK on initiative not NF and users list is empty - Initiative creation - Generate Portal Token (Ente Admin)', () => {\r",
															"    //verify response HTTP status \r",
															"    pm.response.to.have.status(200);\r",
															"    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "default"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"aud\": \"idpay.welfare.pagopa.it\",\r\n    \"uid\": \"{{uid_Ente}}\",\r\n    \"name\": \"{{name_Ente}}\",\r\n    \"familyName\": \"{{familyName_Ente}}\",\r\n    \"email\": \"{{email_Ente}}\",\r\n    \"orgId\": \"{{orgId_Ente}}\",\r\n    \"orgVAT\": \"{{orgVAT_Ente}}\",\r\n    \"orgName\": \"Ente di test IdPay\",\r\n    \"orgPartyRole\": \"{{orgPartyRole_Ente}}\",\r\n    \"orgRole\": \"{{orgRole_Ente}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlToken}}/welfare/token/test",
													"host": [
														"{{baseUrlToken}}"
													],
													"path": [
														"welfare",
														"token",
														"test"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get family unit composition",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Onboarding - Happy case - APP IO - Onboarding user with NF - User ONBOARDING_OK on initiative not NF and users list is empty - Get family unit composition OK - Status 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Onboarding - Happy case - APP IO - Onboarding user with NF - User ONBOARDING_OK on initiative not NF and users list is empty - Get family unit composition OK - getting the users list - checking the response is an empty list\", function () {\r",
															"     let jsonResponse = pm.response.json()\r",
															"    pm.expect(jsonResponse.usersList.length).equals(0);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "Fiscal-Code",
														"value": "{{CF_FAKE_2}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/idpay/initiative/{{initiativeId}}/beneficiary/family",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"idpay",
														"initiative",
														"{{initiativeId}}",
														"beneficiary",
														"family"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "ISSUER",
					"item": [
						{
							"name": "ISSUER Onboarding User with Whitelist",
							"item": [
								{
									"name": "Accept T&C",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Onboarding - Happy case - ISSUER - Onboarding user with whitelist - Accept T&C - Status 204\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "PUT",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{issuerSubscriptionKey}}",
												"type": "text"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											},
											{
												"key": "Accept-Language",
												"value": "it_IT",
												"type": "text"
											},
											{
												"key": "Fiscal-Code",
												"value": "{{CF_fake}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"initiativeId\" : \"{{initiativeIdWithWhitelist}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/idpay/hb/onboarding/",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"idpay",
												"hb",
												"onboarding",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "Prerequisites Check",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Onboarding - Happy case - ISSUER - Onboarding user with whitelist - Prerequisites check - Status 202\", function () {\r",
													"    pm.response.to.have.status(202);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "PUT",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{issuerSubscriptionKey}}",
												"type": "text"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											},
											{
												"key": "Accept-Language",
												"value": "it_IT",
												"type": "text"
											},
											{
												"key": "Fiscal-Code",
												"value": "{{CF_fake}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"initiativeId\" : \"{{initiativeIdWithWhitelist}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/idpay/hb/onboarding/initiative",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"idpay",
												"hb",
												"onboarding",
												"initiative"
											]
										}
									},
									"response": []
								},
								{
									"name": "Status Onboarding",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Onboarding - Happy case - ISSUER - Onboarding user with whitelist - Status Onboarding OK - Status 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Onboarding status is ONBOARDING_OK\", function () {\r",
													"    let jsonResponse = pm.response.json()\r",
													"    pm.expect(jsonResponse.status).equals('ONBOARDING_OK');\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Fiscal-Code",
												"value": "{{CF_fake}}",
												"type": "text"
											},
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{issuerSubscriptionKey}}",
												"type": "text"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											},
											{
												"key": "Accept-Language",
												"value": "it_IT",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/idpay/hb/onboarding/{{initiativeIdWithWhitelist}}/status",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"idpay",
												"hb",
												"onboarding",
												"{{initiativeIdWithWhitelist}}",
												"status"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "MIL",
					"item": [
						{
							"name": "MIL Onboarding User",
							"item": [
								{
									"name": "MIL Token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = JSON.parse(responseBody);\r",
													"pm.collectionVariables.set('milCitizenToken', jsonData.access_token);\r",
													"\r",
													"pm.test(\"Initiative with whitelist - Happy case - Mil Token - Response status is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var randomNum = Math.floor(10000000 + Math.random() * 90000000);\r",
													"pm.collectionVariables.set('terminalId', randomNum);\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "RequestId",
												"value": "{{$guid}}"
											},
											{
												"key": "AcquirerId",
												"value": "{{acquirer_id_mil}}"
											},
											{
												"key": "Channel",
												"value": "ATM"
											},
											{
												"key": "TerminalId",
												"value": "{{terminalId}}"
											},
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "client_secret",
													"value": "{{client_secret_mil}}",
													"type": "text"
												},
												{
													"key": "client_id",
													"value": "{{client_id_mil}}",
													"type": "text"
												},
												{
													"key": "grant_type",
													"value": "client_credentials",
													"type": "text"
												},
												{
													"key": "fiscal_code",
													"value": "{{CF_FAKE_4}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "https://mil-u-apim.azure-api.net/mil-auth/token",
											"protocol": "https",
											"host": [
												"mil-u-apim",
												"azure-api",
												"net"
											],
											"path": [
												"mil-auth",
												"token"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Initiatives List MIL",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Onboarding - Happy case - MIL - Get Initiatives List MIL - response status is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Onboarding - Happy case - Get Initiatives List MIL - checking Initiatives list contains initiativeId\", function () {\r",
													"    let responseJson = pm.response.json()\r",
													"    let isInitiative = false;\r",
													"    for (let i = 0; i < responseJson.length; i++) {\r",
													"        if (responseJson[i].initiativeId === pm.collectionVariables.get('initiativeIdWithCriteria')) {\r",
													"            isInitiative = true;\r",
													"            break;\r",
													"        }\r",
													"    }\r",
													"    pm.expect(isInitiative).to.be.eql(true);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//setTimeout(()=> {}, 20000)"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{milCitizenToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{milCitizenSubscriptionKey}}",
												"type": "text"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											},
											{
												"key": "Accept-Language",
												"value": "it_IT",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/idpay/mil/onboarding/initiatives",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"idpay",
												"mil",
												"onboarding",
												"initiatives"
											]
										}
									},
									"response": []
								},
								{
									"name": "Accept T&C MIL",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Onboarding - Happy case - MIL - Accept T&C - Status 204\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{milCitizenToken}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{milCitizenSubscriptionKey}}",
												"type": "text"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											},
											{
												"key": "Accept-Language",
												"value": "it_IT",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"initiativeId\" : \"{{initiativeIdWithCriteria}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/idpay/mil/onboarding/",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"idpay",
												"mil",
												"onboarding",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "Prerequisites Check MIL",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Onboarding - Happy case - MIL - Prerequisites check - Status 200 or 202\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200,202]);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{milCitizenToken}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{milCitizenSubscriptionKey}}",
												"type": "text"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											},
											{
												"key": "Accept-Language",
												"value": "it_IT",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"initiativeId\" : \"{{initiativeIdWithCriteria}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/idpay/mil/onboarding/initiative",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"idpay",
												"mil",
												"onboarding",
												"initiative"
											]
										}
									},
									"response": []
								},
								{
									"name": "PDND + Autocertification MIL",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Onboarding - Happy case - MIL - PDND + Autocertification - Status 202\", function () {\r",
													"    pm.response.to.have.status(202);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{milCitizenToken}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{milCitizenSubscriptionKey}}",
												"type": "text"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											},
											{
												"key": "Accept-Language",
												"value": "it_IT",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"initiativeId\" : \"{{initiativeIdWithCriteria}}\",\r\n    \"pdndAccept\": true,\r\n    \"selfDeclarationList\": []\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/idpay/mil/onboarding/consent",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"idpay",
												"mil",
												"onboarding",
												"consent"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Onboarding Status MIL",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Onboarding - Happy case - MIL - Onboarding user with criteria - Status Onboarding OK - Status 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Onboarding - Happy case - MIL - Onboarding status is ONBOARDING_OK or ON_EVALUATION\", function () {\r",
													"    let jsonResponse = pm.response.json()\r",
													"    pm.expect(jsonResponse.status).to.be.oneOf(['ONBOARDING_OK', 'ON_EVALUATION']);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"setTimeout(()=> {}, 5000)"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{milCitizenToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{milCitizenSubscriptionKey}}",
												"type": "text"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											},
											{
												"key": "Accept-Language",
												"value": "it_IT",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/idpay/mil/onboarding/{{initiativeIdWithCriteria}}/status",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"idpay",
												"mil",
												"onboarding",
												"{{initiativeIdWithCriteria}}",
												"status"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "Unhappy Case",
			"item": [
				{
					"name": "APP_IO",
					"item": [
						{
							"name": "Onboarding User with manual criteria - self declaration denied - 400",
							"item": [
								{
									"name": "Generate Token IO",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Onboarding - Unhappy case - APP IO - Onboarding user with manual criteria - Generate token IO', () => {\r",
													"    //verify response HTTP status \r",
													"    pm.response.to.have.status(200);\r",
													"    pm.collectionVariables.set(\"tokenIO\", pm.response.text());\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{genericSubscriptionKey}}",
												"type": "default"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "default"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/rtd/mock-io/login?fiscalCode={{CF_FAKE_1}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"rtd",
												"mock-io",
												"login"
											],
											"query": [
												{
													"key": "fiscalCode",
													"value": "{{CF_FAKE_1}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Accept T&C",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Onboarding - Unhappy case - APP IO - Onboarding user with manual criteria - Accept T&C - Status 204\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tokenIO}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{apimSubscriptionKey}}",
												"type": "text"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"initiativeId\" : \"{{initiativeIdWithManualCriteria}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/idpay/onboarding/",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"idpay",
												"onboarding",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "Prerequisites Check",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Onboarding - Unhappy case - APP IO - Onboarding user with manual criteria - Prerequisites check - Status 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tokenIO}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{apimSubscriptionKey}}",
												"type": "text"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"initiativeId\" : \"{{initiativeIdWithManualCriteria}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/idpay/onboarding/initiative",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"idpay",
												"onboarding",
												"initiative"
											]
										}
									},
									"response": []
								},
								{
									"name": "PDND + Autocertification",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Onboarding - Unhappy case - APP IO - Onboarding user with manual criteria - PDND + Autocertification - Status 403\", function () {\r",
													"    pm.response.to.have.status(403);\r",
													"});\r",
													"\r",
													"pm.test(\"Onboarding - Unhappy case - APP IO - Onboarding user with manual criteria - PDND + Autocertification - Message contains info about the KO status\", function () {\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.code).to.eql(\"ONBOARDING_SELF_DECLARATION_NOT_VALID\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tokenIO}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"initiativeId\" : \"{{initiativeIdWithManualCriteria}}\",\r\n    \"pdndAccept\": true,\r\n    \"selfDeclarationList\": [\r\n    {\r\n     \"_type\": \"boolean\",\r\n      \"code\": \"1\",\r\n      \"accepted\": false\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/idpay/onboarding/consent",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"idpay",
												"onboarding",
												"consent"
											]
										}
									},
									"response": []
								},
								{
									"name": "Status Onboarding",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Onboarding - Unhappy case - APP IO - Onboarding user with manual criteria - Status Onboarding OK - Status 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Onboarding status is ACCEPTED_TC\", function () {\r",
													"    let jsonResponse = pm.response.json()\r",
													"    pm.expect(jsonResponse.status).equals('ACCEPTED_TC');\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tokenIO}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/idpay/onboarding/{{initiativeIdWithManualCriteria}}/status",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"idpay",
												"onboarding",
												"{{initiativeIdWithManualCriteria}}",
												"status"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Onboarding User T&C not accepted - 404",
							"item": [
								{
									"name": "Generate Token IO",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Onboarding - Unhappy case - APP IO - Onboarding user with manual criteria - Generate token IO', () => {\r",
													"    //verify response HTTP status \r",
													"    pm.response.to.have.status(200);\r",
													"    pm.collectionVariables.set(\"tokenIO\", pm.response.text());\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{genericSubscriptionKey}}",
												"type": "default"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "default"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/rtd/mock-io/login?fiscalCode={{CF_FAKE_1}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"rtd",
												"mock-io",
												"login"
											],
											"query": [
												{
													"key": "fiscalCode",
													"value": "{{CF_FAKE_1}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Prerequisites Check",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Onboarding - Unhappy case - APP IO - Onboarding user with manual criteria - Prerequisites check - Status 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"pm.test(\"Message contains info  about KO status\", function () {\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.code).to.eql(\"ONBOARDING_USER_NOT_ONBOARDED\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tokenIO}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{apimSubscriptionKey}}",
												"type": "text"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"initiativeId\" : \"{{initiativeIdWithCriteria}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/idpay/onboarding/initiative",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"idpay",
												"onboarding",
												"initiative"
											]
										}
									},
									"response": []
								},
								{
									"name": "PDND + Autocertification",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Onboarding - Unhappy case - APP IO - Onboarding user with manual criteria - PDND + Autocertification - Status 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"pm.test(\"Onboarding - Unhappy case - APP IO - Onboarding user with manual criteria - PDND + Autocertification - Message contains info about the KO status\", function () {\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.code).to.eql(\"ONBOARDING_USER_NOT_ONBOARDED\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tokenIO}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"initiativeId\" : \"{{initiativeIdWithCriteria}}\",\r\n    \"pdndAccept\": true,\r\n    \"selfDeclarationList\": []\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/idpay/onboarding/consent",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"idpay",
												"onboarding",
												"consent"
											]
										}
									},
									"response": []
								},
								{
									"name": "Status Onboarding",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Onboarding - Unhappy case - APP IO - Onboarding user with manual criteria - Status Onboarding - Status 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"pm.test(\"Onboarding - Unhappy case - APP IO - Onboarding user with manual criteria - Status Onboarding - Message contains info about the KO status\", function () {\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.code).to.eql(\"ONBOARDING_USER_NOT_ONBOARDED\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tokenIO}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/idpay/onboarding/{{initiativeIdWithCriteria}}/status",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"idpay",
												"onboarding",
												"{{initiativeIdWithCriteria}}",
												"status"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Onboarding User with criteria - PDND denied - 400",
							"item": [
								{
									"name": "Generate Token IO",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Onboarding - Unhappy case - APP IO - Onboarding user with criteria - Generate token IO', () => {\r",
													"    //verify response HTTP status \r",
													"    pm.response.to.have.status(200);\r",
													"    pm.collectionVariables.set(\"tokenIO\", pm.response.text());\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{genericSubscriptionKey}}",
												"type": "default"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "default"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/rtd/mock-io/login?fiscalCode={{CF_FAKE_1}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"rtd",
												"mock-io",
												"login"
											],
											"query": [
												{
													"key": "fiscalCode",
													"value": "{{CF_FAKE_1}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Accept T&C",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Onboarding - Unhappy case - APP IO - Onboarding user with criteria - Accept T&C - Status 204\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tokenIO}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{apimSubscriptionKey}}",
												"type": "text"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"initiativeId\" : \"{{initiativeIdWithCriteria}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/idpay/onboarding/",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"idpay",
												"onboarding",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "Prerequisites Check",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Onboarding - Unhappy case - APP IO - Onboarding user with criteria - Prerequisites check - Status 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tokenIO}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{apimSubscriptionKey}}",
												"type": "text"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"initiativeId\" : \"{{initiativeIdWithCriteria}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/idpay/onboarding/initiative",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"idpay",
												"onboarding",
												"initiative"
											]
										}
									},
									"response": []
								},
								{
									"name": "PDND + Autocertification",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Onboarding - Unhappy case - APP IO - Onboarding user with criteria - PDND + Autocertification - Status 403\", function () {\r",
													"    pm.response.to.have.status(403);\r",
													"});\r",
													"\r",
													"pm.test(\"Onboarding - Unhappy case - APP IO - Onboarding user with criteria - PDND + Autocertification - Message contains info about the KO status\", function () {\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.code).to.eql(\"ONBOARDING_PDND_CONSENT_DENIED\")\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tokenIO}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"initiativeId\" : \"{{initiativeIdWithCriteria}}\",\r\n    \"pdndAccept\": false,\r\n    \"selfDeclarationList\": []\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/idpay/onboarding/consent",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"idpay",
												"onboarding",
												"consent"
											]
										}
									},
									"response": []
								},
								{
									"name": "Status Onboarding",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Onboarding - Unhappy case - APP IO - Onboarding user with criteria - Status Onboarding OK - Status 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Onboarding status is ACCEPTED_TC\", function () {\r",
													"    let jsonResponse = pm.response.json()\r",
													"    pm.expect(jsonResponse.status).equals('ONBOARDING_KO');\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tokenIO}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/idpay/onboarding/{{initiativeIdWithCriteria}}/status",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"idpay",
												"onboarding",
												"{{initiativeIdWithCriteria}}",
												"status"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Onboarding User with criteria - CF format not valid - 400",
							"item": [
								{
									"name": "Generate Token IO",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Onboarding - Unhappy case - APP IO - Onboarding user with criteria - Generate token IO', () => {\r",
													"    //verify response HTTP status \r",
													"    pm.response.to.have.status(200);\r",
													"    pm.collectionVariables.set(\"tokenIO\", pm.response.text());\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{genericSubscriptionKey}}",
												"type": "default"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "default"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/rtd/mock-io/login?fiscalCode={{$randomPassword}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"rtd",
												"mock-io",
												"login"
											],
											"query": [
												{
													"key": "fiscalCode",
													"value": "{{$randomPassword}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Accept T&C",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Onboarding - Unhappy case - APP IO - Onboarding user with criteria CF format not valid - Accept T&C - Status 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Onboarding - Unhappy case - APP IO - Onboarding user with criteria CF format not valid - Accept T&C - message is Fiscal code not valid!\", function () {\r",
													"    let jsonResponse = pm.response.json()\r",
													"    pm.expect(jsonResponse.code).to.eql(\"FISCAL_CODE_NOT_VALID\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tokenIO}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{apimSubscriptionKey}}",
												"type": "text"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"initiativeId\" : \"{{initiativeIdWithCriteria}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/idpay/onboarding/",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"idpay",
												"onboarding",
												""
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Onboarding User with criteria - VAT number format not valid - 400",
							"item": [
								{
									"name": "Generate Token IO",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Onboarding - Unhappy case - APP IO - Onboarding user with criteria - Generate token IO', () => {\r",
													"    //verify response HTTP status \r",
													"    pm.response.to.have.status(200);\r",
													"    pm.collectionVariables.set(\"tokenIO\", pm.response.text());\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let vat = getRndInteger(100000000,999999999);\r",
													"\r",
													"function getRndInteger(min, max) {\r",
													"\r",
													"  return Math.floor(Math.random() * (max - min)) + min;\r",
													"\r",
													"}\r",
													"\r",
													"pm.collectionVariables.set('vatNumberWrong', vat);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{genericSubscriptionKey}}",
												"type": "default"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "default"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/rtd/mock-io/login?fiscalCode={{vatNumberWrong}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"rtd",
												"mock-io",
												"login"
											],
											"query": [
												{
													"key": "fiscalCode",
													"value": "{{vatNumberWrong}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Accept T&C",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Onboarding - Unhappy case - APP IO - Onboarding user with criteria VAT number format not valid - Accept T&C - Status 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Onboarding - Unhappy case - APP IO - Onboarding user with criteria VAT number format not valid - Accept T&C - message is Fiscal code not valid!\", function () {\r",
													"    let jsonResponse = pm.response.json()\r",
													"    pm.expect(jsonResponse.code).to.eql(\"FISCAL_CODE_NOT_VALID\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tokenIO}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{apimSubscriptionKey}}",
												"type": "text"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"initiativeId\" : \"{{initiativeIdWithCriteria}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/idpay/onboarding/",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"idpay",
												"onboarding",
												""
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Onboarding User with manual criteria - different amount of flags - 400",
							"item": [
								{
									"name": "Generate Token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Onboarding - Unhappy case - APP IO - Onboarding user with manual criteria - Generate token IO', () => {\r",
													"    //verify response HTTP status \r",
													"    pm.response.to.have.status(200);\r",
													"    pm.collectionVariables.set(\"tokenIO\", pm.response.text());\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{genericSubscriptionKey}}",
												"type": "default"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "default"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/rtd/mock-io/login?fiscalCode={{CF_FAKE_1}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"rtd",
												"mock-io",
												"login"
											],
											"query": [
												{
													"key": "fiscalCode",
													"value": "{{CF_FAKE_1}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Accept T&C",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Onboarding - Unhappy case - APP IO - Onboarding user with manual criteria - Accept T&C - Status 204\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tokenIO}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{apimSubscriptionKey}}",
												"type": "text"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"initiativeId\" : \"{{initiativeIdWithManualCriteria}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/idpay/onboarding/",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"idpay",
												"onboarding",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "Prerequisites Check",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Onboarding - Unhappy case - APP IO - Onboarding user with manual criteria - Prerequisites check - Status 200\",\r",
													" function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tokenIO}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{apimSubscriptionKey}}",
												"type": "text"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"initiativeId\" : \"{{initiativeIdWithManualCriteria}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/idpay/onboarding/initiative",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"idpay",
												"onboarding",
												"initiative"
											]
										}
									},
									"response": []
								},
								{
									"name": "PDND + Autocertification",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Onboarding - Unhappy case - APP IO - Onboarding user with manual criteria - PDND + Autocertification - Status 403\", function () {\r",
													"    pm.response.to.have.status(403);\r",
													"});\r",
													"\r",
													"pm.test(\"Onboarding - Unhappy case - APP IO - Onboarding user with manual criteria - PDND + Autocertification - Message contains info about the KO status\", function () {\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.code).to.eql(\"ONBOARDING_SELF_DECLARATION_NOT_VALID\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tokenIO}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"initiativeId\" : \"{{initiativeIdWithManualCriteria}}\",\r\n    \"pdndAccept\": true,\r\n    \"selfDeclarationList\": [\r\n    {\r\n     \"_type\": \"boolean\",\r\n      \"code\": \"1\",\r\n      \"accepted\": true\r\n    },\r\n        {\r\n     \"_type\": \"boolean\",\r\n      \"code\": \"2\",\r\n      \"accepted\": true\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/idpay/onboarding/consent",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"idpay",
												"onboarding",
												"consent"
											]
										}
									},
									"response": []
								},
								{
									"name": "Status Onboarding",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Onboarding - Unhappy case - APP IO - Onboarding user with manual criteria - Status Onboarding - Status 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Onboarding status is ACCEPTED_TC\", function () {\r",
													"    let jsonResponse = pm.response.json()\r",
													"    pm.expect(jsonResponse.status).equals('ACCEPTED_TC');\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tokenIO}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/idpay/onboarding/{{initiativeIdWithManualCriteria}}/status",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"idpay",
												"onboarding",
												"{{initiativeIdWithManualCriteria}}",
												"status"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Onboarding User not in Whitelist - 403",
							"item": [
								{
									"name": "Generate Token IO",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Onboarding - Unhappy case - APP IO - Onboarding user not in whitelist - Generate token IO', () => {\r",
													"    //verify response HTTP status \r",
													"    pm.response.to.have.status(200);\r",
													"    pm.collectionVariables.set(\"tokenIO\", pm.response.text());\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{genericSubscriptionKey}}",
												"type": "default"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "default"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/rtd/mock-io/login?fiscalCode={{CF_FAKE_1}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"rtd",
												"mock-io",
												"login"
											],
											"query": [
												{
													"key": "fiscalCode",
													"value": "{{CF_FAKE_1}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Accept T&C",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Onboarding - Unhappy case - APP IO - Onboarding user not in whitelist - Accept T&C - Status 204\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tokenIO}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{apimSubscriptionKey}}",
												"type": "text"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"initiativeId\" : \"{{initiativeIdWithWhitelist}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/idpay/onboarding/",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"idpay",
												"onboarding",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "Prerequisites Check",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Onboarding - Unhappy case - APP IO - Onboarding user not in whitelist - Prerequisites check - Status 403\", function () {\r",
													"    pm.response.to.have.status(403);\r",
													"});\r",
													"\r",
													"pm.test(\"Onboarding - Unhappy case - APP IO - Onboarding user not in whitelist - Prerequisites check - Message contains info about KO status\", function () {\r",
													"    const responseJson = pm.response.json();\r",
													"        pm.expect(responseJson.code).to.eql(\"ONBOARDING_USER_NOT_IN_WHITELIST\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tokenIO}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{apimSubscriptionKey}}",
												"type": "text"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"initiativeId\" : \"{{initiativeIdWithWhitelist}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/idpay/onboarding/initiative",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"idpay",
												"onboarding",
												"initiative"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Onboarding User no criteria - 200 - STATUS KO",
							"item": [
								{
									"name": "ENTE - Initiative creation",
									"item": [
										{
											"name": "Generate Portal Token",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"let textResponse = pm.response.text()\r",
															"\r",
															"pm.test('Onboarding - Happy case - APP IO - Onboarding user with no criteria - Initiative creation - Generate Portal Token (Ente Admin)', () => {\r",
															"    //verify response HTTP status \r",
															"    pm.response.to.have.status(200);\r",
															"    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "default"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"aud\": \"idpay.welfare.pagopa.it\",\r\n  \"uid\": \"{{uid_Ente}}\",\r\n  \"name\": \"{{name_Ente}}\",\r\n  \"familyName\": \"{{familyName_Ente}}\",\r\n  \"email\": \"{{email_Ente}}\",\r\n  \"orgId\": \"{{orgId_Ente}}\",\r\n  \"orgVAT\": \"{{orgVAT_Ente}}\",\r\n  \"orgName\": \"Ente di test IdPay\",\r\n  \"orgPartyRole\": \"{{orgPartyRole_Ente}}\",\r\n  \"orgRole\": \"{{orgRole_Ente}}\"\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlToken}}/welfare/token/test",
													"host": [
														"{{baseUrlToken}}"
													],
													"path": [
														"welfare",
														"token",
														"test"
													]
												}
											},
											"response": []
										},
										{
											"name": "STEP1-Insert Initiative (Service Info)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = JSON.parse(responseBody);\r",
															"// console.log('jsondata', jsonData);\r",
															"// console.log('jsondata.initiativeId', jsonData.initiativeId);\r",
															"pm.collectionVariables.set('NoCriteriaInitiativeId', jsonData.initiativeId);\r",
															"\r",
															"pm.test(\"Onboarding - Unhappy case - APP IO - Onboarding user with no criteria - Initiative creation - STEP1 - Status test 201\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"});\r",
															"\r",
															"pm.test(\"Onboarding - Unhappy case - APP IO - Onboarding user with no criteria - Initiative creation - STEP1 - Verify response body contains initiativeId\", function () {\r",
															"    let jsonResponse = pm.response.json();\r",
															"    pm.expect(jsonResponse).have.property(\"initiativeId\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"//pm.collectionVariables.set('serviceId', pm.variables.replaceIn('{{$randomUUID}}'));\r",
															"let moment = require('moment');\r",
															"const now = String(moment().format('DD-MM-YYYY hh:mm'));\r",
															"const serviceName = 'Test funzionali App IO onboarding user criteri automatici ' + now;\r",
															"pm.collectionVariables.set('serviceName', serviceName);\r",
															"pm.collectionVariables.set('description', pm.variables.replaceIn('{{$randomLoremSentence}}'));\r",
															"\r",
															"pm.collectionVariables.set('channel_type', 'web');\r",
															"pm.collectionVariables.set('channel_contact', 'https://www.google.it');"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"serviceIO\": true,\n    \"serviceName\": \"{{serviceName}}\",\n    \"serviceScope\": \"LOCAL\",\n    \"description\": \"{{description}}\",\n    \"privacyLink\": \"https://www.google.it\",\n    \"tcLink\": \"https://www.google.com\",\n    \"channels\": [\n        {\n            \"type\": \"{{channel_type}}\",\n            \"contact\": \"{{channel_contact}}\"\n        }\n    ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlInitiative}}/info",
													"host": [
														"{{baseUrlInitiative}}"
													],
													"path": [
														"info"
													]
												},
												"description": "Save initiative and first subset of data 'general info'"
											},
											"response": []
										},
										{
											"name": "STEP2-Update Initiative (general Info)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"let moment = require('moment');\r",
															"//Format: YYYY-MM-DD\r",
															"let today = String(moment().format('YYYY-MM-DD'));\r",
															"let todayP1 = String(moment().add(1,'months').format('YYYY-MM-DD'));\r",
															"let todayP2 = String(moment().add(2,'months').format('YYYY-MM-DD'));\r",
															"let todayP3 = String(moment().add(3,'months').format('YYYY-MM-DD'));\r",
															"\r",
															"/*\r",
															"var futureDate = pm.variables.replaceIn('{{$$randomDateFuture}}');\r",
															"pm.collectionVariables.set('...', _.random(0, 180));\r",
															"*/\r",
															"//_.floor(_.random(1.0, 100000.0, true),2)\r",
															"pm.collectionVariables.set('budget', _.floor(_.random(10000, 100000, true),2));\r",
															"pm.collectionVariables.set('beneficiaryType', 'PF');\r",
															"//pm.collectionVariables.set('beneficiaryKnown', pm.variables.replaceIn('{{$randomBoolean}}'));\r",
															"pm.collectionVariables.set('beneficiaryKnown', false);\r",
															"pm.collectionVariables.set('rankingEnabled', false);\r",
															"pm.collectionVariables.set('beneficiaryBudget', pm.variables.replaceIn('{{$randomInt}}'));//default max 1000\r",
															"pm.collectionVariables.set('rankingStartDate', today);\r",
															"pm.collectionVariables.set('rankingEndDate', todayP1);\r",
															"pm.collectionVariables.set('startDate', todayP2);\r",
															"pm.collectionVariables.set('endDate', todayP3);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Onboarding - Unhappy case - APP IO - Onboarding user with no criteria - Initiative creation - STEP2 - Status test 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"budget\": {{budget}},\n    \"beneficiaryType\": \"{{beneficiaryType}}\",\n    \"beneficiaryKnown\": {{beneficiaryKnown}},\n    \"rankingEnabled\": {{rankingEnabled}},\n    \"beneficiaryBudget\": {{beneficiaryBudget}},\n    \"rankingStartDate\": \"{{rankingStartDate}}\",\n    \"rankingEndDate\": \"{{rankingEndDate}}\",\n    \"startDate\": \"{{startDate}}\",\n    \"endDate\": \"{{endDate}}\",\n    \"descriptionMap\": {\n        \"it\": \"it\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlInitiative}}/:initiativeId/general",
													"host": [
														"{{baseUrlInitiative}}"
													],
													"path": [
														":initiativeId",
														"general"
													],
													"variable": [
														{
															"key": "initiativeId",
															"value": "{{NoCriteriaInitiativeId}}",
															"description": "(Required) The initiative ID"
														}
													]
												},
												"description": "Save initiative and first subset of data 'general info'"
											},
											"response": []
										},
										{
											"name": "STEP3-Update Initiative (criteria)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Onboarding - Unhappy case - APP IO - Onboarding user with no criteria - Initiative creation - STEP3 - Status test 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"automatedCriteria\": [\r\n        {\r\n            \"authority\": \"INPS\",\r\n            \"code\": \"ISEE\",\r\n            \"operator\": \"LT\",\r\n            \"value\": \"1\",\r\n            \"value2\": \"\",\r\n            \"iseeTypes\": [\r\n                \"ORDINARIO\",\r\n                \"MINORENNE\",\r\n                \"UNIVERSITARIO\",\r\n                \"SOCIOSANITARIO\",\r\n                \"DOTTORATO\",\r\n                \"RESIDENZIALE\",\r\n                \"CORRENTE\"\r\n            ]\r\n        },\r\n        {\r\n            \"authority\": \"AUTH1\",\r\n            \"code\": \"BIRTHDATE\",\r\n            \"field\": \"year\",\r\n            \"operator\": \"EQ\",\r\n            \"value\": \"1960\",\r\n            \"value2\": \"\"\r\n        }\r\n    ],\r\n    \"selfDeclarationCriteria\": []\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlInitiative}}/:initiativeId/beneficiary",
													"host": [
														"{{baseUrlInitiative}}"
													],
													"path": [
														":initiativeId",
														"beneficiary"
													],
													"variable": [
														{
															"key": "initiativeId",
															"value": "{{NoCriteriaInitiativeId}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "STEP4-Update Initiative Trx-Reward rules",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Onboarding - Unhappy case - APP IO - Onboarding user with no criteria - Initiative creation - STEP4 - Status test 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const d = new Date();\r",
															"dateString = d.toISOString()\r",
															"let endTime = dateString.split('T');\r",
															"endTime = endTime[1].split('Z');\r",
															"\r",
															"pm.collectionVariables.set('rewardRuleType', 'rewardValue');\r",
															"const rewardValueTypes = [\"PERCENTAGE\", \"ABSOLUTE\"];\r",
															"rewardValueTypeRandomIndex = _.random(0, rewardValueTypes.length - 1);\r",
															"const selectedRewardValueType = rewardValueTypes[rewardValueTypeRandomIndex];\r",
															"pm.collectionVariables.set('rewardValueType', selectedRewardValueType);\r",
															"if (selectedRewardValueType == \"PERCENTAGE\") {\r",
															"    pm.collectionVariables.set('rewardRuleValue', 100);\r",
															"    pm.collectionVariables.set('trxThresholdFrom', 10);\r",
															"} else {\r",
															"    pm.collectionVariables.set('rewardRuleValue', 1);\r",
															"    pm.collectionVariables.set('trxThresholdFrom', 1);\r",
															"    \r",
															"}\r",
															"pm.collectionVariables.set('trxThresholdTo', 50);\r",
															"\r",
															"pm.collectionVariables.set('trxDaysOfWeek', pm.variables.replaceIn('{{$randomWeekday}}').toString().toUpperCase());\r",
															"pm.collectionVariables.set('trxDayEndTime', endTime[0]);\r",
															"pm.collectionVariables.set('trxCountFrom', 3);\r",
															"pm.collectionVariables.set('trxCountTo', 11);\r",
															"pm.collectionVariables.set('trxRewardLimitFrequency', 'DAILY');\r",
															"pm.collectionVariables.set('trxRewardLimitValue', 3);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{ \"initiativeRewardType\": \"REFUND\",\n  \"rewardRule\": {\n    \"_type\": \"{{rewardRuleType}}\",\n    \"rewardValue\": {{rewardRuleValue}},\n    \"rewardValueType\": \"{{rewardValueType}}\"\n  },\n  \"trxRule\": {\n    \"daysOfWeek\": [\n      {\n        \"daysOfWeek\": [\n          \"{{trxDaysOfWeek}}\"\n        ],\n        \"intervals\": [\n          {\n            \"startTime\": \"00:00:00.000\",\n            \"endTime\": \"{{trxDayEndTime}}\"\n          }\n        ]\n      }\n    ],\n    \"threshold\": {\n      \"from\": {{trxThresholdFrom}},\n      \"fromIncluded\": true,\n      \"to\": {{trxThresholdTo}},\n      \"toIncluded\": true\n    },\n    \"mccFilter\": {\n      \"allowedList\": true,\n      \"values\": [\n        \"0742\", \"0743\", \"0744\"\n      ]\n    },\n    \"trxCount\": {\n      \"from\": {{trxCountFrom}},\n      \"fromIncluded\": true,\n      \"to\": {{trxCountTo}},\n      \"toIncluded\": true\n    }\n  }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlInitiative}}/:initiativeId/reward",
													"host": [
														"{{baseUrlInitiative}}"
													],
													"path": [
														":initiativeId",
														"reward"
													],
													"variable": [
														{
															"key": "initiativeId",
															"value": "{{NoCriteriaInitiativeId}}",
															"description": "(Required) The initiative ID"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "STEP5-Update Initiative Refund Rule",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Onboarding - Unhappy case - APP IO - Onboarding user with no criteria - Initiative creation - STEP5 - Status test 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"/*const timeType = [\"CLOSED\",\"DAILY\",\"WEEKLY\",\"MONTHLY\",\"QUARTERLY\"];\r",
															"timeTypeRandomIndex = _.random(0, timeType.length-1);\r",
															"\r",
															"const accumulatedType = [\"BUDGET_EXHAUSTED\",\"THRESHOLD_REACHED\"];\r",
															"accumulatedTypeRandomIndex = _.random(0, timeType.length-1);\r",
															"\r",
															"pm.collectionVariables.set('timeType', timeType[timeTypeRandomIndex]);\r",
															"pm.collectionVariables.set('accumulatedType', accumulatedType[accumulatedTypeRandomIndex]);\r",
															"pm.collectionVariables.set('identificationCode', pm.variables.replaceIn('{{$randomLoremSentence}}'));\r",
															"*/\r",
															"\r",
															"\r",
															"let refundType = [\"timeParameter\", \"accumulatedAmount\"];\r",
															"refundTypeRandomIndex = _.random(0, refundType.length - 1);\r",
															"\r",
															"const refundTypeSelected = refundType[refundTypeRandomIndex];\r",
															"let body = {};\r",
															"if (refundTypeSelected == \"timeParameter\") {\r",
															"    const timeType = [\"CLOSED\",\"DAILY\",\"WEEKLY\",\"MONTHLY\",\"QUARTERLY\"];\r",
															"    timeTypeRandomIndex = _.random(0, timeType.length-1);\r",
															"    body = {\r",
															"        timeParameter: {\r",
															"            timeType: timeType[timeTypeRandomIndex]\r",
															"        }\r",
															"    };\r",
															"} else {\r",
															"    const accumulatedType = [\"BUDGET_EXHAUSTED\", \"THRESHOLD_REACHED\"];\r",
															"    accumulatedTypeRandomIndex = _.random(0, accumulatedType.length - 1);\r",
															"    const accumulatedTypeSelected = accumulatedType[accumulatedTypeRandomIndex];\r",
															"    if (accumulatedTypeSelected == \"BUDGET_EXHAUSTED\") {\r",
															"        body = {\r",
															"            accumulatedAmount: {\r",
															"                accumulatedType: \"BUDGET_EXHAUSTED\"\r",
															"            }\r",
															"        };\r",
															"    } else {\r",
															"        body = {\r",
															"            accumulatedAmount: {\r",
															"                accumulatedType: \"THRESHOLD_REACHED\",\r",
															"                refundThreshold: 10\r",
															"            }\r",
															"        };\r",
															"    }\r",
															"}\r",
															"\r",
															"pm.collectionVariables.set('body', JSON.stringify(body));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{body}}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlInitiative}}/:initiativeId/refund",
													"host": [
														"{{baseUrlInitiative}}"
													],
													"path": [
														":initiativeId",
														"refund"
													],
													"variable": [
														{
															"key": "initiativeId",
															"value": "{{NoCriteriaInitiativeId}}",
															"description": "(Required) The initiative ID"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "PAGOPA - Initiative update status APPROVED",
									"item": [
										{
											"name": "Generate Portal Token",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"let textResponse = pm.response.text()\r",
															"\r",
															"pm.test('Onboarding - Unhappy case - APP IO - Onboarding user with no criteria - Initiative creation - Generate Portal Token (PagoPA Admin)', () => {\r",
															"    //verify response HTTP status \r",
															"    pm.response.to.have.status(200);\r",
															"    pm.collectionVariables.set(\"identityPortalTokenPagopa\", textResponse);\r",
															"});\r",
															"\r",
															"//response time is less than 1s\r",
															"tests[\"Response time is less than 1s\"] = responseTime < 1000;"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "default"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"aud\": \"idpay.welfare.pagopa.it\",\r\n  \"uid\": \"{{uid_Pagopa}}\",\r\n  \"name\": \"{{name_Pagopa}}\",\r\n  \"familyName\": \"{{familyName_Pagopa}}\",\r\n  \"email\": \"{{email_Pagopa}}\",\r\n  \"orgId\": \"{{orgId_Pagopa}}\",\r\n  \"orgVAT\": \"{{orgVAT_Pagopa}}\",\r\n  \"orgName\": \"Ente di test IdPay\",\r\n  \"orgPartyRole\": \"{{orgPartyRole_Pagopa}}\",\r\n  \"orgRole\": \"{{orgRole_Pagopa}}\"\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlToken}}/welfare/token/test",
													"host": [
														"{{baseUrlToken}}"
													],
													"path": [
														"welfare",
														"token",
														"test"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update initiative into APPROVED status",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Onboarding - Unhappy case - APP IO - Onboarding user with no criteria - PagoPA Admin updates initiative status to APPROVED - status 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"//setTimeout(function(){}, 20000); //milliseconds"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalTokenPagopa}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrlInitiative}}/{{NoCriteriaInitiativeId}}/approved",
													"host": [
														"{{baseUrlInitiative}}"
													],
													"path": [
														"{{NoCriteriaInitiativeId}}",
														"approved"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "ENTE - Initiative PUBLISHED",
									"item": [
										{
											"name": "Generate Portal Token",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"let textResponse = pm.response.text()\r",
															"\r",
															"pm.test('Onboarding - Unhappy case - APP IO - Onboarding user with no criteria - Initiative creation - Generate Portal Token (Ente Admin)', () => {\r",
															"    //verify response HTTP status \r",
															"    pm.response.to.have.status(200);\r",
															"    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
															"});\r",
															"\r",
															"//response time is less than 1s\r",
															"tests[\"Response time is less than 1s\"] = responseTime < 1000;"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "default"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"aud\": \"idpay.welfare.pagopa.it\",\r\n  \"uid\": \"{{uid_Ente}}\",\r\n  \"name\": \"{{name_Ente}}\",\r\n  \"familyName\": \"{{familyName_Ente}}\",\r\n  \"email\": \"{{email_Ente}}\",\r\n  \"orgId\": \"{{orgId_Ente}}\",\r\n  \"orgVAT\": \"{{orgVAT_Ente}}\",\r\n  \"orgName\": \"Ente di test IdPay\",\r\n  \"orgPartyRole\": \"{{orgPartyRole_Ente}}\",\r\n  \"orgRole\": \"{{orgRole_Ente}}\"\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlToken}}/welfare/token/test",
													"host": [
														"{{baseUrlToken}}"
													],
													"path": [
														"welfare",
														"token",
														"test"
													]
												}
											},
											"response": []
										},
										{
											"name": "Initiative PUBLISHED",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Onboarding - Unhappy case - APP IO - Onboarding user with no criteria - Ente Admin updates initiative status to PUBLISHED - status 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"/*let body;\r",
															"baseUrlInitiative = pm.variables.get('baseUrlInitiative')\r",
															"if(baseUrlInitiative.includes('localhost')){\r",
															"    body = {\r",
															"        mode: 'raw',\r",
															"        raw: JSON.stringify({\r",
															"            organizationName: 'Comune di Milano',\r",
															"            organizationFiscalCode: '11122233344',\r",
															"            organizationUserId: 'b8986bf2-1f93-4827-ab16-b21eb8aeae2b',\r",
															"            organizationUserRole: 'admin'\r",
															"        })\r",
															"    }\r",
															"    pm.request.headers.add({\r",
															"        key: \"Content-Type\",\r",
															"        value: \"application/json\"\r",
															"    });\r",
															"    pm.variables.set('body', JSON.stringify(body));\r",
															"    pm.request.body.update(body);\r",
															"}\r",
															"*/"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {}
											},
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "{{baseUrlInitiative}}/{{NoCriteriaInitiativeId}}/published",
													"host": [
														"{{baseUrlInitiative}}"
													],
													"path": [
														"{{NoCriteriaInitiativeId}}",
														"published"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Generate Token IO",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Onboarding - Unhappy case - APP IO - Onboarding user with no criteria - Generate token IO', () => {\r",
													"    //verify response HTTP status \r",
													"    pm.response.to.have.status(200);\r",
													"    pm.collectionVariables.set(\"tokenIO\", pm.response.text());\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"setTimeout(() => {}, 90000);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{genericSubscriptionKey}}",
												"type": "default"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "default"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/rtd/mock-io/login?fiscalCode={{CF_3}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"rtd",
												"mock-io",
												"login"
											],
											"query": [
												{
													"key": "fiscalCode",
													"value": "{{CF_3}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Accept T&C",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Onboarding - Unhappy case - APP IO - Onboarding user with no criteria - Accept T&C - Status 204\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tokenIO}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{apimSubscriptionKey}}",
												"type": "text"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"initiativeId\" : \"{{NoCriteriaInitiativeId}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/idpay/onboarding/",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"idpay",
												"onboarding",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "Prerequisites Check",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Onboarding - Unhappy case - APP IO - Onboarding user with no criteria - Prerequisites check - Status 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tokenIO}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{apimSubscriptionKey}}",
												"type": "text"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"initiativeId\" : \"{{NoCriteriaInitiativeId}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/idpay/onboarding/initiative",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"idpay",
												"onboarding",
												"initiative"
											]
										}
									},
									"response": []
								},
								{
									"name": "PDND + Autocertification",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Onboarding - Unhappy case - APP IO - Onboarding user with no criteria - PDND + Autocertification - Status 202\", function () {\r",
													"    pm.response.to.have.status(202);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tokenIO}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"initiativeId\" : \"{{NoCriteriaInitiativeId}}\",\r\n    \"pdndAccept\": true,\r\n    \"selfDeclarationList\": []\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/idpay/onboarding/consent/",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"idpay",
												"onboarding",
												"consent",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "Status Onboarding - KO",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Onboarding - Unhappy case - APP IO - Onboarding user with no criteria - PDND + Autocertification - Status 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"setTimeout(()=>{ \r",
													"\r",
													"pm.test(\"Onboarding status is ONBOARDING_KO or ON_EVALUATION\", function () {\r",
													"    let jsonResponse = pm.response.json()\r",
													"    pm.expect(jsonResponse.status).to.be.oneOf(['ONBOARDING_KO', 'ON_EVALUATION']);\r",
													"});\r",
													" },6000)"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//setTimeout(() => {}, 15000);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tokenIO}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/idpay/onboarding/{{NoCriteriaInitiativeId}}/status",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"idpay",
												"onboarding",
												"{{NoCriteriaInitiativeId}}",
												"status"
											]
										}
									},
									"response": []
								},
								{
									"name": "Accept T&C Retry",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Onboarding - Unhappy case - APP IO - Onboarding user with no criteria - Accept T&C - Status 403\", function () {\r",
													"    pm.response.to.have.status(403);\r",
													"});\r",
													"\r",
													"pm.test(\"Onboarding - Unhappy case - APP IO - Onboarding user with no criteria - Accept T&C - Message contains info about KO status\", function () {\r",
													"    const responseJson = pm.response.json();\r",
													"        pm.expect(responseJson.code).to.eql(\"ONBOARDING_UNSATISFIED_REQUIREMENTS\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tokenIO}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{apimSubscriptionKey}}",
												"type": "text"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"initiativeId\" : \"{{NoCriteriaInitiativeId}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/idpay/onboarding/",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"idpay",
												"onboarding",
												""
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Onboarding User initiative onboarding not started - 403",
							"item": [
								{
									"name": "ENTE - Initiative creation",
									"item": [
										{
											"name": "Generate Portal Token",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"let textResponse = pm.response.text()\r",
															"\r",
															"pm.test('Onboarding - Happy case - APP IO - Onboarding user initiative onboarding not started - Initiative creation - Generate Portal Token (Ente Admin)', () => {\r",
															"    //verify response HTTP status \r",
															"    pm.response.to.have.status(200);\r",
															"    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "default"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"aud\": \"idpay.welfare.pagopa.it\",\r\n  \"uid\": \"{{uid_Ente}}\",\r\n  \"name\": \"{{name_Ente}}\",\r\n  \"familyName\": \"{{familyName_Ente}}\",\r\n  \"email\": \"{{email_Ente}}\",\r\n  \"orgId\": \"{{orgId_Ente}}\",\r\n  \"orgVAT\": \"{{orgVAT_Ente}}\",\r\n  \"orgName\": \"Ente di test IdPay\",\r\n  \"orgPartyRole\": \"{{orgPartyRole_Ente}}\",\r\n  \"orgRole\": \"{{orgRole_Ente}}\"\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlToken}}/welfare/token/test",
													"host": [
														"{{baseUrlToken}}"
													],
													"path": [
														"welfare",
														"token",
														"test"
													]
												}
											},
											"response": []
										},
										{
											"name": "STEP1-Insert Initiative (Service Info)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = JSON.parse(responseBody);\r",
															"// console.log('jsondata', jsonData);\r",
															"// console.log('jsondata.initiativeId', jsonData.initiativeId);\r",
															"pm.collectionVariables.set('initiativeIdNotStarted', jsonData.initiativeId);\r",
															"\r",
															"pm.test(\"Onboarding - Unhappy case - APP IO - Onboarding user initiative onboarding not started - Initiative creation - STEP1 - Status test 201\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"});\r",
															"\r",
															"pm.test(\"Onboarding - Unhappy case - APP IO - Onboarding user initiative onboarding not started - Initiative creation - STEP1 - Verify response body contains initiativeId\", function () {\r",
															"    let jsonResponse = pm.response.json();\r",
															"    pm.expect(jsonResponse).have.property(\"initiativeId\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"//pm.collectionVariables.set('serviceId', pm.variables.replaceIn('{{$randomUUID}}'));\r",
															"let moment = require('moment');\r",
															"const now = String(moment().format('DD-MM-YYYY hh:mm'));\r",
															"const serviceName = 'Test funzionali App IO onboarding user criteri automatici ' + now;\r",
															"pm.collectionVariables.set('serviceName', serviceName);\r",
															"pm.collectionVariables.set('description', pm.variables.replaceIn('{{$randomLoremSentence}}'));\r",
															"\r",
															"pm.collectionVariables.set('channel_type', 'web');\r",
															"pm.collectionVariables.set('channel_contact', 'https://www.google.it');"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"serviceIO\": true,\n    \"serviceName\": \"{{serviceName}}\",\n    \"serviceScope\": \"LOCAL\",\n    \"description\": \"{{description}}\",\n    \"privacyLink\": \"https://www.google.it\",\n    \"tcLink\": \"https://www.google.com\",\n    \"channels\": [\n        {\n            \"type\": \"{{channel_type}}\",\n            \"contact\": \"{{channel_contact}}\"\n        }\n    ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlInitiative}}/info",
													"host": [
														"{{baseUrlInitiative}}"
													],
													"path": [
														"info"
													]
												},
												"description": "Save initiative and first subset of data 'general info'"
											},
											"response": []
										},
										{
											"name": "STEP2-Update Initiative (general Info)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"let moment = require('moment');\r",
															"//Format: YYYY-MM-DD\r",
															"let today = String(moment().format('YYYY-MM-DD'));\r",
															"let todayP1 = String(moment().add(1,'months').format('YYYY-MM-DD'));\r",
															"let todayP2 = String(moment().add(2,'months').format('YYYY-MM-DD'));\r",
															"let todayP3 = String(moment().add(3,'months').format('YYYY-MM-DD'));\r",
															"let todayP4 = String(moment().add(4,'months').format('YYYY-MM-DD'));\r",
															"/*\r",
															"var futureDate = pm.variables.replaceIn('{{$$randomDateFuture}}');\r",
															"pm.collectionVariables.set('...', _.random(0, 180));\r",
															"*/\r",
															"//_.floor(_.random(1.0, 100000.0, true),2)\r",
															"pm.collectionVariables.set('budget', _.floor(_.random(10000, 100000, true),2));\r",
															"pm.collectionVariables.set('beneficiaryType', 'PF');\r",
															"//pm.collectionVariables.set('beneficiaryKnown', pm.variables.replaceIn('{{$randomBoolean}}'));\r",
															"pm.collectionVariables.set('beneficiaryKnown', false);\r",
															"pm.collectionVariables.set('rankingEnabled', false);\r",
															"pm.collectionVariables.set('beneficiaryBudget', pm.variables.replaceIn('{{$randomInt}}'));//default max 1000\r",
															"pm.collectionVariables.set('rankingStartDate', todayP1);\r",
															"pm.collectionVariables.set('rankingEndDate', todayP2);\r",
															"pm.collectionVariables.set('startDate', todayP3);\r",
															"pm.collectionVariables.set('endDate', todayP4);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Onboarding - Unhappy case - APP IO - Onboarding user initiative onboarding not started - Initiative creation - STEP2 - Status test 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"budget\": {{budget}},\n    \"beneficiaryType\": \"{{beneficiaryType}}\",\n    \"beneficiaryKnown\": {{beneficiaryKnown}},\n    \"rankingEnabled\": {{rankingEnabled}},\n    \"beneficiaryBudget\": {{beneficiaryBudget}},\n    \"rankingStartDate\": \"{{rankingStartDate}}\",\n    \"rankingEndDate\": \"{{rankingEndDate}}\",\n    \"startDate\": \"{{startDate}}\",\n    \"endDate\": \"{{endDate}}\",\n    \"descriptionMap\": {\n        \"it\": \"it\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlInitiative}}/:initiativeId/general",
													"host": [
														"{{baseUrlInitiative}}"
													],
													"path": [
														":initiativeId",
														"general"
													],
													"variable": [
														{
															"key": "initiativeId",
															"value": "{{initiativeIdNotStarted}}",
															"description": "(Required) The initiative ID"
														}
													]
												},
												"description": "Save initiative and first subset of data 'general info'"
											},
											"response": []
										},
										{
											"name": "STEP3-Update Initiative (criteria)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Onboarding - Unhappy case - APP IO - Onboarding user initiative onboarding not started - Initiative creation - STEP3 - Status test 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"automatedCriteria\": [\r\n        {\r\n            \"authority\": \"INPS\",\r\n            \"code\": \"ISEE\",\r\n            \"operator\": \"GE\",\r\n            \"value\": \"1\",\r\n            \"value2\": \"\",\r\n            \"iseeTypes\": [\r\n                \"ORDINARIO\",\r\n                \"MINORENNE\",\r\n                \"UNIVERSITARIO\",\r\n                \"SOCIOSANITARIO\",\r\n                \"DOTTORATO\",\r\n                \"RESIDENZIALE\",\r\n                \"CORRENTE\"\r\n            ]\r\n        }\r\n    ],\r\n    \"selfDeclarationCriteria\": []\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlInitiative}}/:initiativeId/beneficiary",
													"host": [
														"{{baseUrlInitiative}}"
													],
													"path": [
														":initiativeId",
														"beneficiary"
													],
													"variable": [
														{
															"key": "initiativeId",
															"value": "{{initiativeIdNotStarted}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "STEP4-Update Initiative Trx-Reward rules",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Onboarding - Unhappy case - APP IO - Onboarding user initiative onboarding not started - Initiative creation - STEP4 - Status test 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const d = new Date();\r",
															"dateString = d.toISOString()\r",
															"let endTime = dateString.split('T');\r",
															"endTime = endTime[1].split('Z');\r",
															"\r",
															"pm.collectionVariables.set('rewardRuleType', 'rewardValue');\r",
															"const rewardValueTypes = [\"PERCENTAGE\", \"ABSOLUTE\"];\r",
															"rewardValueTypeRandomIndex = _.random(0, rewardValueTypes.length - 1);\r",
															"const selectedRewardValueType = rewardValueTypes[rewardValueTypeRandomIndex];\r",
															"pm.collectionVariables.set('rewardValueType', selectedRewardValueType);\r",
															"if (selectedRewardValueType == \"PERCENTAGE\") {\r",
															"    pm.collectionVariables.set('rewardRuleValue', 100);\r",
															"    pm.collectionVariables.set('trxThresholdFrom', 10);\r",
															"} else {\r",
															"    pm.collectionVariables.set('rewardRuleValue', 1);\r",
															"    pm.collectionVariables.set('trxThresholdFrom', 1);\r",
															"    \r",
															"}\r",
															"pm.collectionVariables.set('trxThresholdTo', 50);\r",
															"\r",
															"pm.collectionVariables.set('trxDaysOfWeek', pm.variables.replaceIn('{{$randomWeekday}}').toString().toUpperCase());\r",
															"pm.collectionVariables.set('trxDayEndTime', endTime[0]);\r",
															"pm.collectionVariables.set('trxCountFrom', 3);\r",
															"pm.collectionVariables.set('trxCountTo', 11);\r",
															"pm.collectionVariables.set('trxRewardLimitFrequency', 'DAILY');\r",
															"pm.collectionVariables.set('trxRewardLimitValue', 3);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{ \"initiativeRewardType\": \"REFUND\",\n  \"rewardRule\": {\n    \"_type\": \"{{rewardRuleType}}\",\n    \"rewardValue\": {{rewardRuleValue}},\n    \"rewardValueType\": \"{{rewardValueType}}\"\n  },\n  \"trxRule\": {\n    \"daysOfWeek\": [\n      {\n        \"daysOfWeek\": [\n          \"{{trxDaysOfWeek}}\"\n        ],\n        \"intervals\": [\n          {\n            \"startTime\": \"00:00:00.000\",\n            \"endTime\": \"{{trxDayEndTime}}\"\n          }\n        ]\n      }\n    ],\n    \"threshold\": {\n      \"from\": {{trxThresholdFrom}},\n      \"fromIncluded\": true,\n      \"to\": {{trxThresholdTo}},\n      \"toIncluded\": true\n    },\n    \"mccFilter\": {\n      \"allowedList\": true,\n      \"values\": [\n        \"0742\", \"0743\", \"0744\"\n      ]\n    },\n    \"trxCount\": {\n      \"from\": {{trxCountFrom}},\n      \"fromIncluded\": true,\n      \"to\": {{trxCountTo}},\n      \"toIncluded\": true\n    }\n  }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlInitiative}}/:initiativeId/reward",
													"host": [
														"{{baseUrlInitiative}}"
													],
													"path": [
														":initiativeId",
														"reward"
													],
													"variable": [
														{
															"key": "initiativeId",
															"value": "{{initiativeIdNotStarted}}",
															"description": "(Required) The initiative ID"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "STEP5-Update Initiative Refund Rule",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Onboarding - Unhappy case - APP IO - Onboarding user initiative onboarding not started - Initiative creation - STEP5 - Status test 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"/*const timeType = [\"CLOSED\",\"DAILY\",\"WEEKLY\",\"MONTHLY\",\"QUARTERLY\"];\r",
															"timeTypeRandomIndex = _.random(0, timeType.length-1);\r",
															"\r",
															"const accumulatedType = [\"BUDGET_EXHAUSTED\",\"THRESHOLD_REACHED\"];\r",
															"accumulatedTypeRandomIndex = _.random(0, timeType.length-1);\r",
															"\r",
															"pm.collectionVariables.set('timeType', timeType[timeTypeRandomIndex]);\r",
															"pm.collectionVariables.set('accumulatedType', accumulatedType[accumulatedTypeRandomIndex]);\r",
															"pm.collectionVariables.set('identificationCode', pm.variables.replaceIn('{{$randomLoremSentence}}'));\r",
															"*/\r",
															"\r",
															"\r",
															"let refundType = [\"timeParameter\", \"accumulatedAmount\"];\r",
															"refundTypeRandomIndex = _.random(0, refundType.length - 1);\r",
															"\r",
															"const refundTypeSelected = refundType[refundTypeRandomIndex];\r",
															"let body = {};\r",
															"if (refundTypeSelected == \"timeParameter\") {\r",
															"    const timeType = [\"CLOSED\",\"DAILY\",\"WEEKLY\",\"MONTHLY\",\"QUARTERLY\"];\r",
															"    timeTypeRandomIndex = _.random(0, timeType.length-1);\r",
															"    body = {\r",
															"        timeParameter: {\r",
															"            timeType: timeType[timeTypeRandomIndex]\r",
															"        }\r",
															"    };\r",
															"} else {\r",
															"    const accumulatedType = [\"BUDGET_EXHAUSTED\", \"THRESHOLD_REACHED\"];\r",
															"    accumulatedTypeRandomIndex = _.random(0, accumulatedType.length - 1);\r",
															"    const accumulatedTypeSelected = accumulatedType[accumulatedTypeRandomIndex];\r",
															"    if (accumulatedTypeSelected == \"BUDGET_EXHAUSTED\") {\r",
															"        body = {\r",
															"            accumulatedAmount: {\r",
															"                accumulatedType: \"BUDGET_EXHAUSTED\"\r",
															"            }\r",
															"        };\r",
															"    } else {\r",
															"        body = {\r",
															"            accumulatedAmount: {\r",
															"                accumulatedType: \"THRESHOLD_REACHED\",\r",
															"                refundThreshold: 10\r",
															"            }\r",
															"        };\r",
															"    }\r",
															"}\r",
															"\r",
															"pm.collectionVariables.set('body', JSON.stringify(body));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{body}}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlInitiative}}/:initiativeId/refund",
													"host": [
														"{{baseUrlInitiative}}"
													],
													"path": [
														":initiativeId",
														"refund"
													],
													"variable": [
														{
															"key": "initiativeId",
															"value": "{{initiativeIdNotStarted}}",
															"description": "(Required) The initiative ID"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "PAGOPA - Initiative update status APPROVED",
									"item": [
										{
											"name": "Generate Portal Token",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"let textResponse = pm.response.text()\r",
															"\r",
															"pm.test('Onboarding - Unhappy case - APP IO - Onboarding user initiative onboarding not started - Initiative creation - Generate Portal Token (PagoPA Admin)', () => {\r",
															"    //verify response HTTP status \r",
															"    pm.response.to.have.status(200);\r",
															"    pm.collectionVariables.set(\"identityPortalTokenPagopa\", textResponse);\r",
															"});\r",
															"\r",
															"//response time is less than 1s\r",
															"tests[\"Response time is less than 1s\"] = responseTime < 1000;"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "default"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"aud\": \"idpay.welfare.pagopa.it\",\r\n  \"uid\": \"{{uid_Pagopa}}\",\r\n  \"name\": \"{{name_Pagopa}}\",\r\n  \"familyName\": \"{{familyName_Pagopa}}\",\r\n  \"email\": \"{{email_Pagopa}}\",\r\n  \"orgId\": \"{{orgId_Pagopa}}\",\r\n  \"orgVAT\": \"{{orgVAT_Pagopa}}\",\r\n  \"orgName\": \"Ente di test IdPay\",\r\n  \"orgPartyRole\": \"{{orgPartyRole_Pagopa}}\",\r\n  \"orgRole\": \"{{orgRole_Pagopa}}\"\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlToken}}/welfare/token/test",
													"host": [
														"{{baseUrlToken}}"
													],
													"path": [
														"welfare",
														"token",
														"test"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update initiative into APPROVED status",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Onboarding - Unhappy case - APP IO - Onboarding user initiative onboarding not started - PagoPA Admin updates initiative status to APPROVED - status 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"//setTimeout(function(){}, 20000); //milliseconds"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalTokenPagopa}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrlInitiative}}/{{initiativeIdNotStarted}}/approved",
													"host": [
														"{{baseUrlInitiative}}"
													],
													"path": [
														"{{initiativeIdNotStarted}}",
														"approved"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "ENTE - Initiative PUBLISHED",
									"item": [
										{
											"name": "Generate Portal Token Copy",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"let textResponse = pm.response.text()\r",
															"\r",
															"pm.test('Onboarding - Unhappy case - APP IO - Onboarding user initiative onboarding not started - Initiative creation - Generate Portal Token (Ente Admin)', () => {\r",
															"    //verify response HTTP status \r",
															"    pm.response.to.have.status(200);\r",
															"    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
															"});\r",
															"\r",
															"//response time is less than 1s\r",
															"tests[\"Response time is less than 1s\"] = responseTime < 1000;"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "default"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"aud\": \"idpay.welfare.pagopa.it\",\r\n  \"uid\": \"{{uid_Ente}}\",\r\n  \"name\": \"{{name_Ente}}\",\r\n  \"familyName\": \"{{familyName_Ente}}\",\r\n  \"email\": \"{{email_Ente}}\",\r\n  \"orgId\": \"{{orgId_Ente}}\",\r\n  \"orgVAT\": \"{{orgVAT_Ente}}\",\r\n  \"orgName\": \"Ente di test IdPay\",\r\n  \"orgPartyRole\": \"{{orgPartyRole_Ente}}\",\r\n  \"orgRole\": \"{{orgRole_Ente}}\"\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlToken}}/welfare/token/test",
													"host": [
														"{{baseUrlToken}}"
													],
													"path": [
														"welfare",
														"token",
														"test"
													]
												}
											},
											"response": []
										},
										{
											"name": "Initiative PUBLISHED",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Onboarding - Unhappy case - APP IO - Onboarding user initiative onboarding not started - PagoPA Admin updates initiative status to PUBLISHED - status 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"/*let body;\r",
															"baseUrlInitiative = pm.variables.get('baseUrlInitiative')\r",
															"if(baseUrlInitiative.includes('localhost')){\r",
															"    body = {\r",
															"        mode: 'raw',\r",
															"        raw: JSON.stringify({\r",
															"            organizationName: 'Comune di Milano',\r",
															"            organizationFiscalCode: '11122233344',\r",
															"            organizationUserId: 'b8986bf2-1f93-4827-ab16-b21eb8aeae2b',\r",
															"            organizationUserRole: 'admin'\r",
															"        })\r",
															"    }\r",
															"    pm.request.headers.add({\r",
															"        key: \"Content-Type\",\r",
															"        value: \"application/json\"\r",
															"    });\r",
															"    pm.variables.set('body', JSON.stringify(body));\r",
															"    pm.request.body.update(body);\r",
															"}\r",
															"*/"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {}
											},
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "{{baseUrlInitiative}}/{{initiativeIdNotStarted}}/published",
													"host": [
														"{{baseUrlInitiative}}"
													],
													"path": [
														"{{initiativeIdNotStarted}}",
														"published"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Generate Token IO",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Onboarding - Unhappy case - APP IO - Onboarding user initiative onboarding not started- Generate token IO', () => {\r",
													"    //verify response HTTP status \r",
													"    pm.response.to.have.status(200);\r",
													"    pm.collectionVariables.set(\"tokenIO\", pm.response.text());\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{genericSubscriptionKey}}",
												"type": "default"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "default"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/rtd/mock-io/login?fiscalCode={{CF_fake}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"rtd",
												"mock-io",
												"login"
											],
											"query": [
												{
													"key": "fiscalCode",
													"value": "{{CF_fake}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Accept T&C",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Onboarding - Unhappy case - APP IO - Onboarding user initiative onboarding not started - Accept T&C - status 403\", function () {\r",
													"    pm.response.to.have.status(403);\r",
													"});\r",
													"\r",
													"pm.test(\"Onboarding - Unhappy case - APP IO - Onboarding user initiative onboarding not started - Accept T&C - Message contains info about KO status\", function () {\r",
													"    let jsonResponse = pm.response.json()\r",
													"    pm.expect(jsonResponse.code).to.be.equal('ONBOARDING_INITIATIVE_NOT_STARTED');\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tokenIO}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{apimSubscriptionKey}}",
												"type": "text"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"initiativeId\" : \"{{initiativeIdNotStarted}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/idpay/onboarding/",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"idpay",
												"onboarding",
												""
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Onboarding User initiative onboarding no budget - 403",
							"item": [
								{
									"name": "ENTE - Initiative creation",
									"item": [
										{
											"name": "Generate Portal Token",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"let textResponse = pm.response.text()\r",
															"\r",
															"pm.test('Onboarding - Happy case - APP IO - Onboarding user initiative onboarding no budget - Initiative creation - Generate Portal Token (Ente Admin)', () => {\r",
															"    //verify response HTTP status \r",
															"    pm.response.to.have.status(200);\r",
															"    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "default"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"aud\": \"idpay.welfare.pagopa.it\",\r\n  \"uid\": \"{{uid_Ente}}\",\r\n  \"name\": \"{{name_Ente}}\",\r\n  \"familyName\": \"{{familyName_Ente}}\",\r\n  \"email\": \"{{email_Ente}}\",\r\n  \"orgId\": \"{{orgId_Ente}}\",\r\n  \"orgVAT\": \"{{orgVAT_Ente}}\",\r\n  \"orgName\": \"Ente di test IdPay\",\r\n  \"orgPartyRole\": \"{{orgPartyRole_Ente}}\",\r\n  \"orgRole\": \"{{orgRole_Ente}}\"\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlToken}}/welfare/token/test",
													"host": [
														"{{baseUrlToken}}"
													],
													"path": [
														"welfare",
														"token",
														"test"
													]
												}
											},
											"response": []
										},
										{
											"name": "STEP1-Insert Initiative (Service Info)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = JSON.parse(responseBody);\r",
															"// console.log('jsondata', jsonData);\r",
															"// console.log('jsondata.initiativeId', jsonData.initiativeId);\r",
															"pm.collectionVariables.set('initiativeIdNoBudget', jsonData.initiativeId);\r",
															"\r",
															"pm.test(\"Onboarding - Unhappy case - APP IO - Onboarding user initiative onboarding no budget - Initiative creation - STEP1 - Status test 201\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"});\r",
															"\r",
															"pm.test(\"Onboarding - Unhappy case - APP IO - Onboarding user initiative onboarding no budget - Initiative creation - STEP1 - Verify response body contains initiativeId\", function () {\r",
															"    let jsonResponse = pm.response.json();\r",
															"    pm.expect(jsonResponse).have.property(\"initiativeId\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"//pm.collectionVariables.set('serviceId', pm.variables.replaceIn('{{$randomUUID}}'));\r",
															"let moment = require('moment');\r",
															"const now = String(moment().format('DD-MM-YYYY hh:mm'));\r",
															"const serviceName = 'Test funzionali App IO onboarding user criteri automatici ' + now;\r",
															"pm.collectionVariables.set('serviceName', serviceName);\r",
															"pm.collectionVariables.set('description', pm.variables.replaceIn('{{$randomLoremSentence}}'));\r",
															"\r",
															"pm.collectionVariables.set('channel_type', 'web');\r",
															"pm.collectionVariables.set('channel_contact', 'https://www.google.it');"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"serviceIO\": true,\n    \"serviceName\": \"{{serviceName}}\",\n    \"serviceScope\": \"LOCAL\",\n    \"description\": \"{{description}}\",\n    \"privacyLink\": \"https://www.google.it\",\n    \"tcLink\": \"https://www.google.com\",\n    \"channels\": [\n        {\n            \"type\": \"{{channel_type}}\",\n            \"contact\": \"{{channel_contact}}\"\n        }\n    ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlInitiative}}/info",
													"host": [
														"{{baseUrlInitiative}}"
													],
													"path": [
														"info"
													]
												},
												"description": "Save initiative and first subset of data 'general info'"
											},
											"response": []
										},
										{
											"name": "STEP2-Update Initiative (general Info)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"let moment = require('moment');\r",
															"//Format: YYYY-MM-DD\r",
															"let today = String(moment().format('YYYY-MM-DD'));\r",
															"let todayP1 = String(moment().add(1,'months').format('YYYY-MM-DD'));\r",
															"let todayP2 = String(moment().add(2,'months').format('YYYY-MM-DD'));\r",
															"let todayP3 = String(moment().add(3,'months').format('YYYY-MM-DD'));\r",
															"\r",
															"/*\r",
															"var futureDate = pm.variables.replaceIn('{{$$randomDateFuture}}');\r",
															"pm.collectionVariables.set('...', _.random(0, 180));\r",
															"*/\r",
															"//_.floor(_.random(1.0, 100000.0, true),2)\r",
															"pm.collectionVariables.set('budget',500);\r",
															"pm.collectionVariables.set('beneficiaryType', 'PF');\r",
															"//pm.collectionVariables.set('beneficiaryKnown', pm.variables.replaceIn('{{$randomBoolean}}'));\r",
															"pm.collectionVariables.set('beneficiaryKnown', false);\r",
															"pm.collectionVariables.set('rankingEnabled', false);\r",
															"pm.collectionVariables.set('beneficiaryBudget', 400);//default max 1000\r",
															"pm.collectionVariables.set('rankingStartDate', today);\r",
															"pm.collectionVariables.set('rankingEndDate', todayP1);\r",
															"pm.collectionVariables.set('startDate', todayP2);\r",
															"pm.collectionVariables.set('endDate', todayP3);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Onboarding - Unhappy case - APP IO - Onboarding user initiative onboarding no budget - Initiative creation - STEP2 - Status test 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"budget\": {{budget}},\n    \"beneficiaryType\": \"{{beneficiaryType}}\",\n    \"beneficiaryKnown\": {{beneficiaryKnown}},\n    \"rankingEnabled\": {{rankingEnabled}},\n    \"beneficiaryBudget\": {{beneficiaryBudget}},\n    \"rankingStartDate\": \"{{rankingStartDate}}\",\n    \"rankingEndDate\": \"{{rankingEndDate}}\",\n    \"startDate\": \"{{startDate}}\",\n    \"endDate\": \"{{endDate}}\",\n    \"descriptionMap\": {\n        \"it\": \"it\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlInitiative}}/:initiativeId/general",
													"host": [
														"{{baseUrlInitiative}}"
													],
													"path": [
														":initiativeId",
														"general"
													],
													"variable": [
														{
															"key": "initiativeId",
															"value": "{{initiativeIdNoBudget}}",
															"description": "(Required) The initiative ID"
														}
													]
												},
												"description": "Save initiative and first subset of data 'general info'"
											},
											"response": []
										},
										{
											"name": "STEP3-Update Initiative (criteria)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Onboarding - Unhappy case - APP IO - Onboarding user initiative onboarding no budget - Initiative creation - STEP3 - Status test 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"automatedCriteria\": [\r\n        {\r\n            \"authority\": \"INPS\",\r\n            \"code\": \"ISEE\",\r\n            \"operator\": \"GE\",\r\n            \"value\": \"1\",\r\n            \"value2\": \"\",\r\n            \"iseeTypes\": [\r\n                \"ORDINARIO\",\r\n                \"MINORENNE\",\r\n                \"UNIVERSITARIO\",\r\n                \"SOCIOSANITARIO\",\r\n                \"DOTTORATO\",\r\n                \"RESIDENZIALE\",\r\n                \"CORRENTE\"\r\n            ]\r\n        }\r\n    ],\r\n    \"selfDeclarationCriteria\": []\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlInitiative}}/:initiativeId/beneficiary",
													"host": [
														"{{baseUrlInitiative}}"
													],
													"path": [
														":initiativeId",
														"beneficiary"
													],
													"variable": [
														{
															"key": "initiativeId",
															"value": "{{initiativeIdNoBudget}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "STEP4-Update Initiative Trx-Reward rules",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Onboarding - Unhappy case - APP IO - Onboarding user initiative onboarding no budget - Initiative creation - STEP4 - Status test 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const d = new Date();\r",
															"dateString = d.toISOString()\r",
															"let endTime = dateString.split('T');\r",
															"endTime = endTime[1].split('Z');\r",
															"\r",
															"pm.collectionVariables.set('rewardRuleType', 'rewardValue');\r",
															"const rewardValueTypes = [\"PERCENTAGE\", \"ABSOLUTE\"];\r",
															"rewardValueTypeRandomIndex = _.random(0, rewardValueTypes.length - 1);\r",
															"const selectedRewardValueType = rewardValueTypes[rewardValueTypeRandomIndex];\r",
															"pm.collectionVariables.set('rewardValueType', selectedRewardValueType);\r",
															"if (selectedRewardValueType == \"PERCENTAGE\") {\r",
															"    pm.collectionVariables.set('rewardRuleValue', 100);\r",
															"    pm.collectionVariables.set('trxThresholdFrom', 10);\r",
															"} else {\r",
															"    pm.collectionVariables.set('rewardRuleValue', 1);\r",
															"    pm.collectionVariables.set('trxThresholdFrom', 1);\r",
															"    \r",
															"}\r",
															"pm.collectionVariables.set('trxThresholdTo', 50);\r",
															"\r",
															"pm.collectionVariables.set('trxDaysOfWeek', pm.variables.replaceIn('{{$randomWeekday}}').toString().toUpperCase());\r",
															"pm.collectionVariables.set('trxDayEndTime', endTime[0]);\r",
															"pm.collectionVariables.set('trxCountFrom', 3);\r",
															"pm.collectionVariables.set('trxCountTo', 11);\r",
															"pm.collectionVariables.set('trxRewardLimitFrequency', 'DAILY');\r",
															"pm.collectionVariables.set('trxRewardLimitValue', 3);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{ \"initiativeRewardType\": \"REFUND\",\n  \"rewardRule\": {\n    \"_type\": \"{{rewardRuleType}}\",\n    \"rewardValue\": {{rewardRuleValue}},\n    \"rewardValueType\": \"{{rewardValueType}}\"\n  },\n  \"trxRule\": {\n    \"daysOfWeek\": [\n      {\n        \"daysOfWeek\": [\n          \"{{trxDaysOfWeek}}\"\n        ],\n        \"intervals\": [\n          {\n            \"startTime\": \"00:00:00.000\",\n            \"endTime\": \"{{trxDayEndTime}}\"\n          }\n        ]\n      }\n    ],\n    \"threshold\": {\n      \"from\": {{trxThresholdFrom}},\n      \"fromIncluded\": true,\n      \"to\": {{trxThresholdTo}},\n      \"toIncluded\": true\n    },\n    \"mccFilter\": {\n      \"allowedList\": true,\n      \"values\": [\n        \"0742\", \"0743\", \"0744\"\n      ]\n    },\n    \"trxCount\": {\n      \"from\": {{trxCountFrom}},\n      \"fromIncluded\": true,\n      \"to\": {{trxCountTo}},\n      \"toIncluded\": true\n    }\n  }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlInitiative}}/:initiativeId/reward",
													"host": [
														"{{baseUrlInitiative}}"
													],
													"path": [
														":initiativeId",
														"reward"
													],
													"variable": [
														{
															"key": "initiativeId",
															"value": "{{initiativeIdNoBudget}}",
															"description": "(Required) The initiative ID"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "STEP5-Update Initiative Refund Rule",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Onboarding - Unhappy case - APP IO - Onboarding user initiative onboarding no budget - Initiative creation - STEP5 - Status test 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"/*const timeType = [\"CLOSED\",\"DAILY\",\"WEEKLY\",\"MONTHLY\",\"QUARTERLY\"];\r",
															"timeTypeRandomIndex = _.random(0, timeType.length-1);\r",
															"\r",
															"const accumulatedType = [\"BUDGET_EXHAUSTED\",\"THRESHOLD_REACHED\"];\r",
															"accumulatedTypeRandomIndex = _.random(0, timeType.length-1);\r",
															"\r",
															"pm.collectionVariables.set('timeType', timeType[timeTypeRandomIndex]);\r",
															"pm.collectionVariables.set('accumulatedType', accumulatedType[accumulatedTypeRandomIndex]);\r",
															"pm.collectionVariables.set('identificationCode', pm.variables.replaceIn('{{$randomLoremSentence}}'));\r",
															"*/\r",
															"\r",
															"\r",
															"let refundType = [\"timeParameter\", \"accumulatedAmount\"];\r",
															"refundTypeRandomIndex = _.random(0, refundType.length - 1);\r",
															"\r",
															"const refundTypeSelected = refundType[refundTypeRandomIndex];\r",
															"let body = {};\r",
															"if (refundTypeSelected == \"timeParameter\") {\r",
															"    const timeType = [\"CLOSED\",\"DAILY\",\"WEEKLY\",\"MONTHLY\",\"QUARTERLY\"];\r",
															"    timeTypeRandomIndex = _.random(0, timeType.length-1);\r",
															"    body = {\r",
															"        timeParameter: {\r",
															"            timeType: timeType[timeTypeRandomIndex]\r",
															"        }\r",
															"    };\r",
															"} else {\r",
															"    const accumulatedType = [\"BUDGET_EXHAUSTED\", \"THRESHOLD_REACHED\"];\r",
															"    accumulatedTypeRandomIndex = _.random(0, accumulatedType.length - 1);\r",
															"    const accumulatedTypeSelected = accumulatedType[accumulatedTypeRandomIndex];\r",
															"    if (accumulatedTypeSelected == \"BUDGET_EXHAUSTED\") {\r",
															"        body = {\r",
															"            accumulatedAmount: {\r",
															"                accumulatedType: \"BUDGET_EXHAUSTED\"\r",
															"            }\r",
															"        };\r",
															"    } else {\r",
															"        body = {\r",
															"            accumulatedAmount: {\r",
															"                accumulatedType: \"THRESHOLD_REACHED\",\r",
															"                refundThreshold: 10\r",
															"            }\r",
															"        };\r",
															"    }\r",
															"}\r",
															"\r",
															"pm.collectionVariables.set('body', JSON.stringify(body));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{body}}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlInitiative}}/:initiativeId/refund",
													"host": [
														"{{baseUrlInitiative}}"
													],
													"path": [
														":initiativeId",
														"refund"
													],
													"variable": [
														{
															"key": "initiativeId",
															"value": "{{initiativeIdNoBudget}}",
															"description": "(Required) The initiative ID"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "PAGOPA - Initiative update status APPROVED",
									"item": [
										{
											"name": "Generate Portal Token",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"let textResponse = pm.response.text()\r",
															"\r",
															"pm.test('Onboarding - Unhappy case - APP IO - Onboarding user initiative onboarding no budget - Initiative creation - Generate Portal Token (PagoPA Admin)', () => {\r",
															"    //verify response HTTP status \r",
															"    pm.response.to.have.status(200);\r",
															"    pm.collectionVariables.set(\"identityPortalTokenPagopa\", textResponse);\r",
															"});\r",
															"\r",
															"//response time is less than 1s\r",
															"tests[\"Response time is less than 1s\"] = responseTime < 1000;"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "default"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"aud\": \"idpay.welfare.pagopa.it\",\r\n  \"uid\": \"{{uid_Pagopa}}\",\r\n  \"name\": \"{{name_Pagopa}}\",\r\n  \"familyName\": \"{{familyName_Pagopa}}\",\r\n  \"email\": \"{{email_Pagopa}}\",\r\n  \"orgId\": \"{{orgId_Pagopa}}\",\r\n  \"orgVAT\": \"{{orgVAT_Pagopa}}\",\r\n  \"orgName\": \"Ente di test IdPay\",\r\n  \"orgPartyRole\": \"{{orgPartyRole_Pagopa}}\",\r\n  \"orgRole\": \"{{orgRole_Pagopa}}\"\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlToken}}/welfare/token/test",
													"host": [
														"{{baseUrlToken}}"
													],
													"path": [
														"welfare",
														"token",
														"test"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update initiative into APPROVED status",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Onboarding - Unhappy case - APP IO - Onboarding user initiative onboarding no budget - PagoPA Admin updates initiative status to APPROVED - status 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"//setTimeout(function(){}, 20000); //milliseconds"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalTokenPagopa}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrlInitiative}}/{{initiativeIdNoBudget}}/approved",
													"host": [
														"{{baseUrlInitiative}}"
													],
													"path": [
														"{{initiativeIdNoBudget}}",
														"approved"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "ENTE - Initiative PUBLISHED",
									"item": [
										{
											"name": "Generate Portal Token Copy",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"let textResponse = pm.response.text()\r",
															"\r",
															"pm.test('Onboarding - Unhappy case - APP IO - Onboarding user initiative onboarding no budget - Initiative creation - Generate Portal Token (Ente Admin)', () => {\r",
															"    //verify response HTTP status \r",
															"    pm.response.to.have.status(200);\r",
															"    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
															"});\r",
															"\r",
															"//response time is less than 1s\r",
															"tests[\"Response time is less than 1s\"] = responseTime < 1000;"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "default"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"aud\": \"idpay.welfare.pagopa.it\",\r\n  \"uid\": \"{{uid_Ente}}\",\r\n  \"name\": \"{{name_Ente}}\",\r\n  \"familyName\": \"{{familyName_Ente}}\",\r\n  \"email\": \"{{email_Ente}}\",\r\n  \"orgId\": \"{{orgId_Ente}}\",\r\n  \"orgVAT\": \"{{orgVAT_Ente}}\",\r\n  \"orgName\": \"Ente di test IdPay\",\r\n  \"orgPartyRole\": \"{{orgPartyRole_Ente}}\",\r\n  \"orgRole\": \"{{orgRole_Ente}}\"\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlToken}}/welfare/token/test",
													"host": [
														"{{baseUrlToken}}"
													],
													"path": [
														"welfare",
														"token",
														"test"
													]
												}
											},
											"response": []
										},
										{
											"name": "Initiative PUBLISHED",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Onboarding - Unhappy case - APP IO - Onboarding user initiative onboarding no budget - PagoPA Admin updates initiative status to PUBLISHED - status 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"/*let body;\r",
															"baseUrlInitiative = pm.variables.get('baseUrlInitiative')\r",
															"if(baseUrlInitiative.includes('localhost')){\r",
															"    body = {\r",
															"        mode: 'raw',\r",
															"        raw: JSON.stringify({\r",
															"            organizationName: 'Comune di Milano',\r",
															"            organizationFiscalCode: '11122233344',\r",
															"            organizationUserId: 'b8986bf2-1f93-4827-ab16-b21eb8aeae2b',\r",
															"            organizationUserRole: 'admin'\r",
															"        })\r",
															"    }\r",
															"    pm.request.headers.add({\r",
															"        key: \"Content-Type\",\r",
															"        value: \"application/json\"\r",
															"    });\r",
															"    pm.variables.set('body', JSON.stringify(body));\r",
															"    pm.request.body.update(body);\r",
															"}\r",
															"*/"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {}
											},
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "{{baseUrlInitiative}}/{{initiativeIdNoBudget}}/published",
													"host": [
														"{{baseUrlInitiative}}"
													],
													"path": [
														"{{initiativeIdNoBudget}}",
														"published"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Generate Token IO",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Onboarding - Unhappy case - APP IO - Onboarding user initiative onboarding no budget - Generate token IO', () => {\r",
													"    //verify response HTTP status \r",
													"    pm.response.to.have.status(200);\r",
													"    pm.collectionVariables.set(\"tokenIO\", pm.response.text());\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"setTimeout(()=> {}, 5000)"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{genericSubscriptionKey}}",
												"type": "default"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "default"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/rtd/mock-io/login?fiscalCode={{CF_fake}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"rtd",
												"mock-io",
												"login"
											],
											"query": [
												{
													"key": "fiscalCode",
													"value": "{{CF_fake}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Accept T&C",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Onboarding - Unhappy case - APP IO - Onboarding user initiative onboarding not started - Accept T&C - status 204\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"setTimeout(()=> {}, 10000)"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tokenIO}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{apimSubscriptionKey}}",
												"type": "text"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"initiativeId\" : \"{{initiativeIdNoBudget}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/idpay/onboarding/",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"idpay",
												"onboarding",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "Prerequisites Check",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Onboarding - Unhappy case - APP IO - Onboarding user initiative onboarding not started - Prerequisites check - status 204\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200,202]);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tokenIO}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{apimSubscriptionKey}}",
												"type": "text"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"initiativeId\" : \"{{initiativeIdNoBudget}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/idpay/onboarding/initiative",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"idpay",
												"onboarding",
												"initiative"
											]
										}
									},
									"response": []
								},
								{
									"name": "PDND + Autocertification",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Onboarding - Unhappy case - APP IO - Onboarding user initiative onboarding not started - Prerequisites check - status 202\", function () {\r",
													"    pm.response.to.have.status(202);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"setTimeout(()=> {}, 20000);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tokenIO}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"initiativeId\" : \"{{initiativeIdNoBudget}}\",\r\n    \"pdndAccept\": true,\r\n    \"selfDeclarationList\": []\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/idpay/onboarding/consent",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"idpay",
												"onboarding",
												"consent"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate Token IO 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Onboarding - Unhappy case - APP IO - Onboarding user initiative onboarding no budget - Generate token IO', () => {\r",
													"    //verify response HTTP status \r",
													"    pm.response.to.have.status(200);\r",
													"    pm.collectionVariables.set(\"tokenIO\", pm.response.text());\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"setTimeout(()=> {}, 20000);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{genericSubscriptionKey}}",
												"type": "default"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "default"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/rtd/mock-io/login?fiscalCode={{CF_FAKE_1}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"rtd",
												"mock-io",
												"login"
											],
											"query": [
												{
													"key": "fiscalCode",
													"value": "{{CF_FAKE_1}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Accept T&C 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Onboarding - Unhappy case - APP IO - Onboarding user initiative onboarding not started - Accept T&C - status 403\", function () {\r",
													"    pm.response.to.have.status(403);\r",
													"});\r",
													"\r",
													"pm.test(\"Onboarding - Unhappy case - APP IO - Onboarding user initiative onboarding not started - Accept T&C - Message contains info about KO status\", function () {\r",
													"    const responseJson = pm.response.json();\r",
													"        pm.expect(responseJson.code).to.eql(\"ONBOARDING_BUDGET_EXHAUSTED\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"setTimeout(()=> {}, 10000);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tokenIO}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{apimSubscriptionKey}}",
												"type": "text"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"initiativeId\" : \"{{initiativeIdNoBudget}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/idpay/onboarding/",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"idpay",
												"onboarding",
												""
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Onboarding User Initiative not found - 404",
							"item": [
								{
									"name": "Generate Token IO",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Onboarding - Unhappy case - APP IO - Onboarding user initiativenot found - Generate token IO', () => {\r",
													"    //verify response HTTP status \r",
													"    pm.response.to.have.status(200);\r",
													"    pm.collectionVariables.set(\"tokenIO\", pm.response.text());\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{genericSubscriptionKey}}",
												"type": "default"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "default"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/rtd/mock-io/login?fiscalCode={{CF_FAKE_2}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"rtd",
												"mock-io",
												"login"
											],
											"query": [
												{
													"key": "fiscalCode",
													"value": "{{CF_FAKE_2}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Accept T&C",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Onboarding - Unhappy case - APP IO - Onboarding user initiative not found - Accept T&C - status 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"pm.test(\"Onboarding - Unhappy case - APP IO - Onboarding user initiative not found - Accept T&C - message contains info about initiative not found\", function () {\r",
													"    let jsonResponse = pm.response.json()\r",
													"    pm.expect(jsonResponse.code).to.equals(\"ONBOARDING_INITIATIVE_NOT_FOUND\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tokenIO}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{apimSubscriptionKey}}",
												"type": "text"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId - not found}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/idpay/onboarding/",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"idpay",
												"onboarding",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "Get family unit composition",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Onboarding - Happy case - APP IO - Onboarding user with criteria NF - Get family unit composition OK - Status 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"pm.test(\"Onboarding - Happy case - APP IO - Onboarding user with criteria NF - Get family unit composition - message contains info about initiative not found\", function () {\r",
													"    let jsonResponse = pm.response.json()\r",
													"    pm.expect(jsonResponse.code).to.equals('ONBOARDING_USER_NOT_ONBOARDED');\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{identityPortalToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Fiscal-Code",
												"value": "{{CF_FAKE_1}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/idpay/initiative/{{initiativeId - not found}}/beneficiary/family",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"idpay",
												"initiative",
												"{{initiativeId - not found}}",
												"beneficiary",
												"family"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Onboarding Unsubscribed User - bad request - 400",
							"item": [
								{
									"name": "Generate Token IO",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Onboarding - Unhappy case - APP IO - Onboarding user initiative onboarding unsubscribed user - Generate token IO', () => {\r",
													"    //verify response HTTP status \r",
													"    pm.response.to.have.status(200);\r",
													"    pm.collectionVariables.set(\"tokenIO\", pm.response.text());\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{genericSubscriptionKey}}",
												"type": "default"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "default"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/rtd/mock-io/login?fiscalCode={{CF_fake}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"rtd",
												"mock-io",
												"login"
											],
											"query": [
												{
													"key": "fiscalCode",
													"value": "{{CF_fake}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Unsubscribe - Ok",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Wallet - Happy case - Unsubscribed wallet & user - Unsubscribe - Response status is 204\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"setTimeout(() => {}, 20000);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tokenIO}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{apimSubscriptionKey}}",
												"type": "text"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/idpay/wallet/{{initiativeIdWithCriteria}}/unsubscribe",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"idpay",
												"wallet",
												"{{initiativeIdWithCriteria}}",
												"unsubscribe"
											]
										}
									},
									"response": []
								},
								{
									"name": "Accept T&C",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Onboarding - Unhappy case - APP IO - Onboarding user initiative onboarding unsubscribed user - Accept T&C - status 403\", function () {\r",
													"    pm.response.to.have.status(403);\r",
													"});\r",
													"\r",
													"pm.test(\"Onboarding - Unhappy case - APP IO - Onboarding user initiative onboarding unsubscribed user - Accept T&C - message contains info about unsubscribed user to initiative\", function () {\r",
													"    let jsonResponse = pm.response.json()\r",
													"    pm.expect(jsonResponse.code).to.equals(\"ONBOARDING_USER_UNSUBSCRIBED\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"setTimeout(() => {}, 10000);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tokenIO}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{apimSubscriptionKey}}",
												"type": "text"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"initiativeId\" : \"{{initiativeIdWithCriteria}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/idpay/onboarding/",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"idpay",
												"onboarding",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "Status Onboarding",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Onboarding - Unhappy case - APP IO - Onboarding user initiative onboarding unsubscribed user -  Status onboarding - status 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Onboarding - Unhappy case - APP IO - Onboarding user initiative onboarding unsubscribed user -  Status onboarding - user has status UNSUBSCRIBED\", function () {\r",
													"    let jsonResponse = pm.response.json()\r",
													"    pm.expect(jsonResponse.status).equals('UNSUBSCRIBED');\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"setTimeout(() => {}, 10000);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tokenIO}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/idpay/onboarding/{{initiativeIdWithCriteria}}/status",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"idpay",
												"onboarding",
												"{{initiativeIdWithCriteria}}",
												"status"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Onboarding User Initiative bad request - no initiativeId - 400",
							"item": [
								{
									"name": "Generate Token IO",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Onboarding - Unhappy case - APP IO - Onboarding user initiative onboarding user no initiative - Generate token IO', () => {\r",
													"    //verify response HTTP status \r",
													"    pm.response.to.have.status(200);\r",
													"    pm.collectionVariables.set(\"tokenIO\", pm.response.text());\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{genericSubscriptionKey}}",
												"type": "default"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "default"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/rtd/mock-io/login?fiscalCode={{CF_FAKE_1}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"rtd",
												"mock-io",
												"login"
											],
											"query": [
												{
													"key": "fiscalCode",
													"value": "{{CF_FAKE_1}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Accept T&C",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Onboarding - Unhappy case - APP IO - Onboarding user initiative onboarding user no initiative - Accept T&C - status 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Onboarding - Unhappy case - APP IO - Onboarding user initiative onboarding user no initiative - Accept T&C - message contains info about mandatory field initiativeId\", function () {\r",
													"    let jsonResponse = pm.response.json()\r",
													"    pm.expect(jsonResponse.code).to.equals(\"ONBOARDING_INVALID_REQUEST\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tokenIO}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{apimSubscriptionKey}}",
												"type": "text"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/idpay/onboarding/",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"idpay",
												"onboarding",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "Prerequisites Check",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Onboarding - Unhappy case - APP IO - Onboarding user initiative onboarding user no initiative - Prerequisites check - status 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Onboarding - Unhappy case - APP IO - Onboarding user initiative onboarding user no initiative - Prerequisites check - message contains info about mandatory field initiativeId\", function () {\r",
													"    let jsonResponse = pm.response.json()\r",
													"    pm.expect(jsonResponse.code).equals(\"ONBOARDING_INVALID_REQUEST\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tokenIO}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{apimSubscriptionKey}}",
												"type": "text"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/idpay/onboarding/initiative",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"idpay",
												"onboarding",
												"initiative"
											]
										}
									},
									"response": []
								},
								{
									"name": "PDND + Autocertification",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Onboarding - Unhappy case - APP IO - Onboarding user initiative onboarding user no initiative - PDND + Autocertification - status 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Onboarding - Unhappy case - APP IO - Onboarding user initiative onboarding user no initiative - PDND + Autocertification - message contains info about mandatory field initiativeId\", function () {\r",
													"    let jsonResponse = pm.response.json()\r",
													"    pm.expect(jsonResponse.code).equals(\"ONBOARDING_INVALID_REQUEST\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tokenIO}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"pdndAccept\": true,\r\n    \"selfDeclarationList\": []\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/idpay/onboarding/consent",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"idpay",
												"onboarding",
												"consent"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Onboarding User initiative not active - 403",
							"item": [
								{
									"name": "ENTE - Initiative creation",
									"item": [
										{
											"name": "Generate Portal Token",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"let textResponse = pm.response.text()\r",
															"\r",
															"pm.test('Onboarding - Happy case - APP IO - Onboarding user initiative not active - Initiative creation - Generate Portal Token (Ente Admin)', () => {\r",
															"    //verify response HTTP status \r",
															"    pm.response.to.have.status(200);\r",
															"    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "default"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"aud\": \"idpay.welfare.pagopa.it\",\r\n  \"uid\": \"{{uid_Ente}}\",\r\n  \"name\": \"{{name_Ente}}\",\r\n  \"familyName\": \"{{familyName_Ente}}\",\r\n  \"email\": \"{{email_Ente}}\",\r\n  \"orgId\": \"{{orgId_Ente}}\",\r\n  \"orgVAT\": \"{{orgVAT_Ente}}\",\r\n  \"orgName\": \"Ente di test IdPay\",\r\n  \"orgPartyRole\": \"{{orgPartyRole_Ente}}\",\r\n  \"orgRole\": \"{{orgRole_Ente}}\"\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlToken}}/welfare/token/test",
													"host": [
														"{{baseUrlToken}}"
													],
													"path": [
														"welfare",
														"token",
														"test"
													]
												}
											},
											"response": []
										},
										{
											"name": "STEP1-Insert Initiative (Service Info)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = JSON.parse(responseBody);\r",
															"// console.log('jsondata', jsonData);\r",
															"// console.log('jsondata.initiativeId', jsonData.initiativeId);\r",
															"pm.collectionVariables.set('initiativeIdDraft', jsonData.initiativeId);\r",
															"\r",
															"pm.test(\"Onboarding - Unhppy case - APP IO - Onboarding user initiative not active - Initiative creation - STEP1 - Status test 201\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"});\r",
															"\r",
															"pm.test(\"Onboarding - Unhappy case - APP IO - Onboarding user initiative not active - Initiative creation - STEP1 - Verify response body contains initiativeId\", function () {\r",
															"    let jsonResponse = pm.response.json();\r",
															"    pm.expect(jsonResponse).have.property(\"initiativeId\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"//pm.collectionVariables.set('serviceId', pm.variables.replaceIn('{{$randomUUID}}'));\r",
															"let moment = require('moment');\r",
															"const now = String(moment().format('DD-MM-YYYY hh:mm'));\r",
															"const serviceName = 'Test funzionali App IO onboarding user criteri automatici ' + now;\r",
															"pm.collectionVariables.set('serviceName', serviceName);\r",
															"pm.collectionVariables.set('description', pm.variables.replaceIn('{{$randomLoremSentence}}'));\r",
															"\r",
															"pm.collectionVariables.set('channel_type', 'web');\r",
															"pm.collectionVariables.set('channel_contact', 'https://www.google.it');"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"serviceIO\": true,\n    \"serviceName\": \"{{serviceName}}\",\n    \"serviceScope\": \"LOCAL\",\n    \"description\": \"{{description}}\",\n    \"privacyLink\": \"https://www.google.it\",\n    \"tcLink\": \"https://www.google.com\",\n    \"channels\": [\n        {\n            \"type\": \"{{channel_type}}\",\n            \"contact\": \"{{channel_contact}}\"\n        }\n    ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlInitiative}}/info",
													"host": [
														"{{baseUrlInitiative}}"
													],
													"path": [
														"info"
													]
												},
												"description": "Save initiative and first subset of data 'general info'"
											},
											"response": []
										}
									]
								},
								{
									"name": "Generate Token IO",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Onboarding - Unhappy case - APP IO - Onboarding user initiative not active - Generate token IO', () => {\r",
													"    //verify response HTTP status \r",
													"    pm.response.to.have.status(200);\r",
													"    pm.collectionVariables.set(\"tokenIO\", pm.response.text());\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{genericSubscriptionKey}}",
												"type": "default"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "default"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/rtd/mock-io/login?fiscalCode={{CF_FAKE_2}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"rtd",
												"mock-io",
												"login"
											],
											"query": [
												{
													"key": "fiscalCode",
													"value": "{{CF_FAKE_2}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Accept T&C",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Onboarding - Unhappy case - APP IO - Onboarding user initiative not active - Accept T&C - status 403\", function () {\r",
													"    pm.response.to.have.status(403);\r",
													"});\r",
													"\r",
													"pm.test(\"Onboarding - Unhappy case - APP IO - Onboarding user initiative not active - Accept T&C -  message contains info about initiative not active\", function () {\r",
													"    let jsonResponse = pm.response.json()\r",
													"    pm.expect(jsonResponse.code).to.equals(\"ONBOARDING_INITIATIVE_STATUS_NOT_PUBLISHED\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tokenIO}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{apimSubscriptionKey}}",
												"type": "text"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"initiativeId\" : \"{{initiativeIdDraft}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/idpay/onboarding/",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"idpay",
												"onboarding",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "Physical delete Initiative",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Onboarding - Unhappy case - APP IO - Onboarding User initiative not active - Delete Initiative - Status test 204\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{AKSAPIServerUrlGeneric}}idpayportalwelfarebackendinitiative/idpay/initiative/{{initiativeIdDraft}}",
											"host": [
												"{{AKSAPIServerUrlGeneric}}idpayportalwelfarebackendinitiative"
											],
											"path": [
												"idpay",
												"initiative",
												"{{initiativeIdDraft}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "ISSUER",
					"item": [
						{
							"name": "ISSUER Onboarding T&C not accepted - 404",
							"item": [
								{
									"name": "Prerequisites Check",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Onboarding - Unhappy case - ISSUER - Onboarding T&C not accepted - Prerequisites check - Status 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"pm.test(\"Onboarding - Unhappy case - ISSUER - Onboarding T&C not accepted - Prerequisites check - Message contains info about KO status\", function () {\r",
													"    const responseJson = pm.response.json();\r",
													"        pm.expect(responseJson.code).to.eql(\"ONBOARDING_USER_NOT_ONBOARDED\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "PUT",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{issuerSubscriptionKey}}",
												"type": "text"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											},
											{
												"key": "Accept-Language",
												"value": "it_IT",
												"type": "text"
											},
											{
												"key": "Fiscal-Code",
												"value": "{{CF_3}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"initiativeId\" : \"{{initiativeIdWithWhitelist}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/idpay/hb/onboarding/initiative",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"idpay",
												"hb",
												"onboarding",
												"initiative"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "ISSUER Onboarding User not in Whitelist - 403",
							"item": [
								{
									"name": "Accept T&C",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Onboarding - Unhappy case - ISSUER - Onboarding user not in whitelist - Accept T&C - status 204\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let vat = getRndInteger(10000000000,99999999999);\r",
													"function getRndInteger(min, max) {\r",
													"  return Math.floor(Math.random() * (max - min)) + min;\r",
													"}\r",
													"pm.collectionVariables.set('vatNumber', vat);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "PUT",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{issuerSubscriptionKey}}",
												"type": "text"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											},
											{
												"key": "Accept-Language",
												"value": "it_IT",
												"type": "text"
											},
											{
												"key": "Fiscal-Code",
												"value": "{{vatNumber}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"initiativeId\" : \"{{initiativeIdWithWhitelist}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/idpay/hb/onboarding/",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"idpay",
												"hb",
												"onboarding",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "Prerequisites Check",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Onboarding - Unhappy case - ISSUER - Onboarding user not in whitelist - Prerequisites check - status 403\", function () {\r",
													"    pm.response.to.have.status(403);\r",
													"});\r",
													"\r",
													"pm.test(\"Onboarding - Unhappy case - ISSUER - Onboarding user not in whitelist - Prerequisites check - message contains info about ko\", function () {\r",
													"    let jsonResponse = pm.response.json()\r",
													"    pm.expect(jsonResponse.code).equals('ONBOARDING_USER_NOT_IN_WHITELIST');\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "PUT",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{issuerSubscriptionKey}}",
												"type": "text"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											},
											{
												"key": "Accept-Language",
												"value": "it_IT",
												"type": "text"
											},
											{
												"key": "Fiscal-Code",
												"value": "{{vatNumber}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"initiativeId\" : \"{{initiativeIdWithWhitelist}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/idpay/hb/onboarding/initiative",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"idpay",
												"hb",
												"onboarding",
												"initiative"
											]
										}
									},
									"response": []
								},
								{
									"name": "Status Onboarding",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Onboarding - Unhappy case - ISSUER - Onboarding user not in whitelist - Status Onboarding - status 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Onboarding - Unhappy case - ISSUER - Onboarding user not in whitelist - Status Onboarding - user status is ONBOARDING_KO\", function () {\r",
													"    let jsonResponse = pm.response.json()\r",
													"    pm.expect(jsonResponse.status).equals('ONBOARDING_KO');\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.collectionVariables.set(\"same_fiscalCode\", pm.variables.replaceIn(\"{{fiscalCode}}\"));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{issuerSubscriptionKey}}",
												"type": "text"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											},
											{
												"key": "Accept-Language",
												"value": "it_IT",
												"type": "text"
											},
											{
												"key": "Fiscal-Code",
												"value": "{{vatNumber}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/idpay/hb/onboarding/{{initiativeIdWithWhitelist}}/status",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"idpay",
												"hb",
												"onboarding",
												"{{initiativeIdWithWhitelist}}",
												"status"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "ISSUER Onboarding User CF format not valid - 400",
							"item": [
								{
									"name": "Accept T&C",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Onboarding - Unhappy case - ISSUER - Onboarding user CF format not valid - Accept T&C - status 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Onboarding - Unhappy case - ISSUER - Onboarding user CF format not valid - Accept T&C - message contains info about ko\", function () {\r",
													"    let jsonResponse = pm.response.json()\r",
													"    pm.expect(jsonResponse.code).equals('FISCAL_CODE_NOT_VALID');\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.collectionVariables.set(\"fiscalCode\", pm.variables.replaceIn(\"{{$randomPassword}}\"));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "PUT",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{issuerSubscriptionKey}}",
												"type": "text"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											},
											{
												"key": "Accept-Language",
												"value": "it_IT",
												"type": "text"
											},
											{
												"key": "Fiscal-Code",
												"value": "{{fiscalCode}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"initiativeId\" : \"{{IssuerinitiativeId}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/idpay/hb/onboarding/",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"idpay",
												"hb",
												"onboarding",
												""
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "ISSUER Onboarding User VAT number format not valid - 400",
							"item": [
								{
									"name": "Accept T&C",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Onboarding - Unhappy case - ISSUER - Onboarding user VAT number format not valid - Accept T&C - status 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Onboarding - Unhappy case - ISSUER - Onboarding user VAT number format not valid - Accept T&C - message contains info about ko\", function () {\r",
													"    let jsonResponse = pm.response.json()\r",
													"    pm.expect(jsonResponse.code).equals('FISCAL_CODE_NOT_VALID');\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let vat = getRndInteger(100000000,999999999);\r",
													"\r",
													"function getRndInteger(min, max) {\r",
													"\r",
													"  return Math.floor(Math.random() * (max - min)) + min;\r",
													"\r",
													"}\r",
													"\r",
													"pm.collectionVariables.set('vatNumberWrong', vat);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "PUT",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{issuerSubscriptionKey}}",
												"type": "text"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											},
											{
												"key": "Accept-Language",
												"value": "it_IT",
												"type": "text"
											},
											{
												"key": "Fiscal-Code",
												"value": "{{vatNumberWrong}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"initiativeId\" : \"{{IssuerinitiativeId}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/idpay/hb/onboarding/",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"idpay",
												"hb",
												"onboarding",
												""
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "ISSUER Onboarding InitiativeId empty - 400",
							"item": [
								{
									"name": "Accept T&C",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Onboarding - Unhappy case - ISSUER - Onboarding initiativeId empty - Accept T&C - status 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Onboarding - Unhappy case - ISSUER - Onboarding initiativeId empty - Accept T&C - message contains info about mandatory field initiativeId\", function () {\r",
													"    let jsonResponse = pm.response.json()\r",
													"    pm.expect(jsonResponse.code).equals('ONBOARDING_INVALID_REQUEST');\r",
													"    });"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "PUT",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{issuerSubscriptionKey}}",
												"type": "text"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											},
											{
												"key": "Accept-Language",
												"value": "it_IT",
												"type": "text"
											},
											{
												"key": "Fiscal-Code",
												"value": "{{CF_fake}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"initiativeId\" : \"\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/idpay/hb/onboarding/",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"idpay",
												"hb",
												"onboarding",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "Prerequisites Check",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Onboarding - Unhappy case - ISSUER - Onboarding initiativeId empty - Prerequisites check - status 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Onboarding - Unhappy case - ISSUER - Onboarding initiativeId empty - Prerequisites check - message contains info about mandatory field initiativeId\", function () {\r",
													"    let jsonResponse = pm.response.json()\r",
													"    pm.expect(jsonResponse.code).equals('ONBOARDING_INVALID_REQUEST');\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "PUT",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{issuerSubscriptionKey}}",
												"type": "text"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											},
											{
												"key": "Accept-Language",
												"value": "it_IT",
												"type": "text"
											},
											{
												"key": "Fiscal-Code",
												"value": "{{CF_fake}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"initiativeId\" : \"\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/idpay/hb/onboarding/initiative",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"idpay",
												"hb",
												"onboarding",
												"initiative"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "ISSUER Onboarding Initiative not found - 404",
							"item": [
								{
									"name": "Accept T&C",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Onboarding - Unhappy case - ISSUER - Onboarding initiative not found - Accept T&C - status 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"pm.test(\"Onboarding - Unhappy case - ISSUER - Onboarding initiative not found - Accept T&C -  message contains info about initiative not found\", function () {\r",
													"    let jsonResponse = pm.response.json()\r",
													"    pm.expect(jsonResponse.code).equals('ONBOARDING_INITIATIVE_NOT_FOUND');\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "PUT",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{issuerSubscriptionKey}}",
												"type": "text"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											},
											{
												"key": "Accept-Language",
												"value": "it_IT",
												"type": "text"
											},
											{
												"key": "Fiscal-Code",
												"value": "{{CF_fake}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId - not found}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/idpay/hb/onboarding/",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"idpay",
												"hb",
												"onboarding",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "Prerequisites Check",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Onboarding - Unhappy case - ISSUER - Onboarding initiative not found - Prerequisites check - status 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"pm.test(\"Onboarding - Unhappy case - ISSUER - Onboarding initiative not found - Prerequisites check - message contains info about initiative not found\", function () {\r",
													"    let jsonResponse = pm.response.json()\r",
													"    pm.expect(jsonResponse.code).equals('ONBOARDING_INITIATIVE_NOT_FOUND');\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "PUT",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{issuerSubscriptionKey}}",
												"type": "text"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											},
											{
												"key": "Accept-Language",
												"value": "it_IT",
												"type": "text"
											},
											{
												"key": "Fiscal-Code",
												"value": "{{CF_fake}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId - not found}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/idpay/hb/onboarding/initiative",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"idpay",
												"hb",
												"onboarding",
												"initiative"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "ISSUER Onboarding Initiative draft - 403",
							"item": [
								{
									"name": "ENTE - Initiative creation",
									"item": [
										{
											"name": "Generate Portal Token",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"let textResponse = pm.response.text()\r",
															"\r",
															"pm.test('Onboarding - Happy case - APP IO - Onboarding user initiative not active - Initiative creation - Generate Portal Token (Ente Admin)', () => {\r",
															"    //verify response HTTP status \r",
															"    pm.response.to.have.status(200);\r",
															"    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "default"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"aud\": \"idpay.welfare.pagopa.it\",\r\n  \"uid\": \"{{uid_Ente}}\",\r\n  \"name\": \"{{name_Ente}}\",\r\n  \"familyName\": \"{{familyName_Ente}}\",\r\n  \"email\": \"{{email_Ente}}\",\r\n  \"orgId\": \"{{orgId_Ente}}\",\r\n  \"orgVAT\": \"{{orgVAT_Ente}}\",\r\n  \"orgName\": \"Ente di test IdPay\",\r\n  \"orgPartyRole\": \"{{orgPartyRole_Ente}}\",\r\n  \"orgRole\": \"{{orgRole_Ente}}\"\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlToken}}/welfare/token/test",
													"host": [
														"{{baseUrlToken}}"
													],
													"path": [
														"welfare",
														"token",
														"test"
													]
												}
											},
											"response": []
										},
										{
											"name": "STEP1-Insert Initiative (Service Info)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = JSON.parse(responseBody);\r",
															"// console.log('jsondata', jsonData);\r",
															"// console.log('jsondata.initiativeId', jsonData.initiativeId);\r",
															"pm.collectionVariables.set('initiativeIdDraft', jsonData.initiativeId);\r",
															"\r",
															"pm.test(\"Onboarding - Unhppy case - APP IO - Onboarding user initiative not active - Initiative creation - STEP1 - Status test 201\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"});\r",
															"\r",
															"pm.test(\"Onboarding - Unhappy case - APP IO - Onboarding user initiative not active - Initiative creation - STEP1 - Verify response body contains initiativeId\", function () {\r",
															"    let jsonResponse = pm.response.json();\r",
															"    pm.expect(jsonResponse).have.property(\"initiativeId\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"//pm.collectionVariables.set('serviceId', pm.variables.replaceIn('{{$randomUUID}}'));\r",
															"let moment = require('moment');\r",
															"const now = String(moment().format('DD-MM-YYYY hh:mm'));\r",
															"const serviceName = 'Test funzionali App IO onboarding user criteri automatici ' + now;\r",
															"pm.collectionVariables.set('serviceName', serviceName);\r",
															"pm.collectionVariables.set('description', pm.variables.replaceIn('{{$randomLoremSentence}}'));\r",
															"\r",
															"pm.collectionVariables.set('channel_type', 'web');\r",
															"pm.collectionVariables.set('channel_contact', 'https://www.google.it');"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"serviceIO\": true,\n    \"serviceName\": \"{{serviceName}}\",\n    \"serviceScope\": \"LOCAL\",\n    \"description\": \"{{description}}\",\n    \"privacyLink\": \"https://www.google.it\",\n    \"tcLink\": \"https://www.google.com\",\n    \"channels\": [\n        {\n            \"type\": \"{{channel_type}}\",\n            \"contact\": \"{{channel_contact}}\"\n        }\n    ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlInitiative}}/info",
													"host": [
														"{{baseUrlInitiative}}"
													],
													"path": [
														"info"
													]
												},
												"description": "Save initiative and first subset of data 'general info'"
											},
											"response": []
										}
									]
								},
								{
									"name": "Accept T&C",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Onboarding - Unhappy case - ISSUER - Onboarding initiative draft - Accept T&C - status 403\", function () {\r",
													"    pm.response.to.have.status(403);\r",
													"});\r",
													"\r",
													"pm.test(\"Onboarding - Unhappy case - ISSUER - Onboarding initiative draft - Accept T&C - message contains info about initiative not active\", function () {\r",
													"    let jsonResponse = pm.response.json()\r",
													"    pm.expect(jsonResponse.code).equals('ONBOARDING_INITIATIVE_STATUS_NOT_PUBLISHED');\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "PUT",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{issuerSubscriptionKey}}",
												"type": "text"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											},
											{
												"key": "Accept-Language",
												"value": "it_IT",
												"type": "text"
											},
											{
												"key": "Fiscal-Code",
												"value": "{{CF_fake}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"initiativeId\" : \"{{initiativeIdDraft}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/idpay/hb/onboarding/",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"idpay",
												"hb",
												"onboarding",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "Prerequisites Check",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Onboarding - Unhappy case - ISSUER - Onboarding initiative draft - Prerequisites check - status 403\", function () {\r",
													"    pm.response.to.have.status(403);\r",
													"});\r",
													"\r",
													"pm.test(\"Onboarding - Unhappy case - ISSUER - Onboarding initiative draft - Prerequisites check -  message contais info about initiative not active\", function () {\r",
													"    let jsonResponse = pm.response.json()\r",
													"    pm.expect(jsonResponse.code).equals('ONBOARDING_INITIATIVE_STATUS_NOT_PUBLISHED');\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "PUT",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{issuerSubscriptionKey}}",
												"type": "text"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											},
											{
												"key": "Accept-Language",
												"value": "it_IT",
												"type": "text"
											},
											{
												"key": "Fiscal-Code",
												"value": "{{CF_fake}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"initiativeId\" : \"{{initiativeIdDraft}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/idpay/hb/onboarding/initiative",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"idpay",
												"hb",
												"onboarding",
												"initiative"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "ISSUER Onboarding Initiative not started - 403",
							"item": [
								{
									"name": "Accept T&C",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Onboarding - Unhappy case - ISSUER - Onboarding initiative not started - Accept T&C - status 403\", function () {\r",
													"    pm.response.to.have.status(403);\r",
													"});\r",
													"\r",
													"pm.test(\"Onboarding - Unhappy case - ISSUER - Onboarding initiative not started - Accept T&C - Message contains info about KO status\", function () {\r",
													"    const responseJson = pm.response.json();\r",
													"        pm.expect(responseJson.code).to.eql(\"ONBOARDING_INITIATIVE_NOT_STARTED\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.collectionVariables.set(\"fiscalCode\", pm.variables.replaceIn(\"{{$randomPassword}}\"));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "PUT",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{issuerSubscriptionKey}}",
												"type": "text"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											},
											{
												"key": "Accept-Language",
												"value": "it_IT",
												"type": "text"
											},
											{
												"key": "Fiscal-Code",
												"value": "{{CF_fake}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"initiativeId\" : \"{{initiativeIdNotStarted}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/idpay/hb/onboarding/",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"idpay",
												"hb",
												"onboarding",
												""
											]
										}
									},
									"response": []
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "Delete Initiatives",
			"item": [
				{
					"name": "Delete Initiative with whitelist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Onboarding - Delete Initiatives - Delete Initiative with whitelist - Status test 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{AKSAPIServerUrlGeneric}}idpayportalwelfarebackendinitiative/idpay/initiative/{{initiativeIdWithWhitelist}}",
							"host": [
								"{{AKSAPIServerUrlGeneric}}idpayportalwelfarebackendinitiative"
							],
							"path": [
								"idpay",
								"initiative",
								"{{initiativeIdWithWhitelist}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Initiative with criteria",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Onboarding - Delete Initiatives - Delete Initiative with criteria - Status test 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{AKSAPIServerUrlGeneric}}idpayportalwelfarebackendinitiative/idpay/initiative/{{initiativeIdWithCriteria}}",
							"host": [
								"{{AKSAPIServerUrlGeneric}}idpayportalwelfarebackendinitiative"
							],
							"path": [
								"idpay",
								"initiative",
								"{{initiativeIdWithCriteria}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Initiative with manual criteria",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Onboarding - Delete Initiatives - Delete Initiative with manual criteria - Status test 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{AKSAPIServerUrlGeneric}}idpayportalwelfarebackendinitiative/idpay/initiative/{{initiativeIdWithManualCriteria}}",
							"host": [
								"{{AKSAPIServerUrlGeneric}}idpayportalwelfarebackendinitiative"
							],
							"path": [
								"idpay",
								"initiative",
								"{{initiativeIdWithManualCriteria}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Initiative with NF - User ONBOARDING_OK on initiative not NF and users list is empty",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Onboarding - Delete Initiatives - Delete Initiative with NF User ONBOARDING_OK on initiative not NF and users list is empty - Delete Initiative - Status test 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{AKSAPIServerUrlGeneric}}idpayportalwelfarebackendinitiative/idpay/initiative/{{initiativeId}}",
							"host": [
								"{{AKSAPIServerUrlGeneric}}idpayportalwelfarebackendinitiative"
							],
							"path": [
								"idpay",
								"initiative",
								"{{initiativeId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Initiative no criteria",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Onboarding - Delete Initiatives - Delete Initiative no criteria - Status test 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{AKSAPIServerUrlGeneric}}idpayportalwelfarebackendinitiative/idpay/initiative/{{NoCriteriaInitiativeId}}",
							"host": [
								"{{AKSAPIServerUrlGeneric}}idpayportalwelfarebackendinitiative"
							],
							"path": [
								"idpay",
								"initiative",
								"{{NoCriteriaInitiativeId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Initiative initiative onboarding not started",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Onboarding - Delete Initiatives - Delete Initiative initiative onboarding not started - Status test 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{AKSAPIServerUrlGeneric}}idpayportalwelfarebackendinitiative/idpay/initiative/{{initiativeIdNotStarted}}",
							"host": [
								"{{AKSAPIServerUrlGeneric}}idpayportalwelfarebackendinitiative"
							],
							"path": [
								"idpay",
								"initiative",
								"{{initiativeIdNotStarted}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Initiative initiative onboarding no budget",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Onboarding - Delete Initiatives - Delete Initiative initiative onboarding no budget - Status test 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{AKSAPIServerUrlGeneric}}idpayportalwelfarebackendinitiative/idpay/initiative/{{initiativeIdNoBudget}}",
							"host": [
								"{{AKSAPIServerUrlGeneric}}idpayportalwelfarebackendinitiative"
							],
							"path": [
								"idpay",
								"initiative",
								"{{initiativeIdNoBudget}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Initiative draft initiative",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Onboarding - Delete Initiatives - Delete Initiative draft initiative - Status test 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{AKSAPIServerUrlGeneric}}idpayportalwelfarebackendinitiative/idpay/initiative/{{initiativeIdDraft}}",
							"host": [
								"{{AKSAPIServerUrlGeneric}}idpayportalwelfarebackendinitiative"
							],
							"path": [
								"idpay",
								"initiative",
								"{{initiativeIdDraft}}"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "tokenIO",
			"value": ""
		},
		{
			"key": "initiativeId",
			"value": ""
		},
		{
			"key": "serviceId - initiative with criteria",
			"value": "MOCKdevYNDW3OYHUL533E2YM8X88WWF3S"
		},
		{
			"key": "initiativeId - not found",
			"value": "test"
		},
		{
			"key": "serviceId - initiative with whitelist",
			"value": "MOCKdev1YYPSLE0C22EGH7F97M97JE0XH"
		},
		{
			"key": "IssuerinitiativeId",
			"value": "63fded4ffea3f35a5644e738"
		},
		{
			"key": "NoCriteriaInitiativeId",
			"value": "6568ba85ba09561a49e89622"
		},
		{
			"key": "serviceId - self declaration",
			"value": "MOCKdevWI962QGAVKET21OPP0XYXXUYTL"
		},
		{
			"key": "initiativeId - draft",
			"value": "63fc8961fea3f35a5644e72e"
		},
		{
			"key": "serviceId - endDate",
			"value": "MOCKdevRT7SSUXXTV4DEAZE2NWR8LF4EW"
		},
		{
			"key": "serviceId - startDate",
			"value": "MOCKdevAYVTFNGYH6PAHSDJ5WKEOC2JS0"
		},
		{
			"key": "serviceId - no budget",
			"value": "MOCKdevDX6C521Q0GX1XCNYIKH86GZR61"
		},
		{
			"key": "fiscalCode",
			"value": "{{$randomPassword}}"
		},
		{
			"key": "same_fiscalCode",
			"value": ""
		},
		{
			"key": "initiativeId - endDate",
			"value": "63ff1505fea3f35a5644e73a"
		},
		{
			"key": "initiativeId - startDate",
			"value": "6400a8ad5416301023ae4c9e"
		},
		{
			"key": "serviceId - unsubscribed user",
			"value": "MOCKdevX21DC1KCY68H15SHEQZEMAZAOK"
		},
		{
			"key": "CF_fake",
			"value": "RNZPMP80A44X000Z"
		},
		{
			"key": "identityPortalToken",
			"value": ""
		},
		{
			"key": "serviceName",
			"value": ""
		},
		{
			"key": "description",
			"value": ""
		},
		{
			"key": "channel_type",
			"value": ""
		},
		{
			"key": "channel_contact",
			"value": ""
		},
		{
			"key": "budget",
			"value": ""
		},
		{
			"key": "beneficiaryType",
			"value": ""
		},
		{
			"key": "beneficiaryKnown",
			"value": ""
		},
		{
			"key": "beneficiaryBudget",
			"value": ""
		},
		{
			"key": "rankingStartDate",
			"value": ""
		},
		{
			"key": "rankingEndDate",
			"value": ""
		},
		{
			"key": "startDate",
			"value": ""
		},
		{
			"key": "endDate",
			"value": ""
		},
		{
			"key": "rewardRuleType",
			"value": ""
		},
		{
			"key": "rewardValueType",
			"value": ""
		},
		{
			"key": "rewardRuleValue",
			"value": ""
		},
		{
			"key": "trxThresholdFrom",
			"value": ""
		},
		{
			"key": "trxThresholdTo",
			"value": ""
		},
		{
			"key": "trxDaysOfWeek",
			"value": ""
		},
		{
			"key": "trxDayEndTime",
			"value": ""
		},
		{
			"key": "trxCountFrom",
			"value": ""
		},
		{
			"key": "trxCountTo",
			"value": ""
		},
		{
			"key": "trxRewardLimitFrequency",
			"value": ""
		},
		{
			"key": "trxRewardLimitValue",
			"value": ""
		},
		{
			"key": "body",
			"value": ""
		},
		{
			"key": "identityPortalTokenPagopa",
			"value": ""
		},
		{
			"key": "rankingEnabled",
			"value": ""
		},
		{
			"key": "initiativeIdWithCriteria",
			"value": ""
		},
		{
			"key": "initiativeIdWithWhitelist",
			"value": ""
		},
		{
			"key": "initiativeIdWithManualCriteria",
			"value": ""
		},
		{
			"key": "initiativeIdNotStarted",
			"value": ""
		},
		{
			"key": "initiativeIdNoBudget",
			"value": ""
		},
		{
			"key": "initiativeIdDraft",
			"value": ""
		},
		{
			"key": "familyUnitComposition",
			"value": ""
		},
		{
			"key": "vatNumber",
			"value": ""
		},
		{
			"key": "cf",
			"value": ""
		},
		{
			"key": "vatNumberWrong",
			"value": ""
		},
		{
			"key": "milCitizenToken",
			"value": ""
		},
		{
			"key": "terminalId",
			"value": ""
		}
	]
}